        -:    0:Source:allfile.c
        -:    0:Graph:allfile.gcno
        -:    0:Data:allfile.gcda
        -:    0:Runs:211
        -:    0:Programs:1
        -:    1:#include "crypt.h"
        -:    2:#include "getopt.h"
        -:    3:#include "gzip.h" 
        -:    4:#include "lzw.h"   
        -:    5:#include "tailor.h"
        -:    6:#include "revision.h"
        -:    7:
        -:    8:#include <stdlib.h>
        -:    9:#include <stdio.h>
        -:   10:#include <ctype.h>
        -:   11:#include <sys/types.h>
        -:   12:#include <sys/stat.h>
        -:   13:#include <errno.h>
        -:   14:#include <signal.h>   
        -:   15:
        -:   16:#define LINUX 1
        -:   17:
        -:   18:/* bits.c -- output variable-length bit strings
        -:   19: * Copyright (C) 1992-1993 Jean-loup Gailly
        -:   20: * This is free software; you can redistribute it and/or modify it under the
        -:   21: * terms of the GNU General Public License, see the file COPYING.
        -:   22: */
        -:   23:
        -:   24:
        -:   25:/*
        -:   26: *  PURPOSE
        -:   27: *
        -:   28: *      Output variable-length bit strings. Compression can be done
        -:   29: *      to a file or to memory. (The latter is not supported in this version.)
        -:   30: *
        -:   31: *  DISCUSSION
        -:   32: *
        -:   33: *      The PKZIP "deflate" file format interprets compressed file data
        -:   34: *      as a sequence of bits.  Multi-bit strings in the file may cross
        -:   35: *      byte boundaries without restriction.
        -:   36: *
        -:   37: *      The first bit of each byte is the low-order bit.
        -:   38: *
        -:   39: *      The routines in this file allow a variable-length bit value to
        -:   40: *      be output right-to-left (useful for literal values). For
        -:   41: *      left-to-right output (useful for code strings from the tree routines),
        -:   42: *      the bits must have been reversed first with bi_reverse().
        -:   43: *
        -:   44: *      For in-memory compression, the compressed bit stream goes directly
        -:   45: *      into the requested output buffer. The input data is read in blocks
        -:   46: *      by the mem_read() function. The buffer is limited to 64K on 16 bit
        -:   47: *      machines.
        -:   48: *
        -:   49: *  INTERFACE
        -:   50: *
        -:   51: *      void bi_init (FILE *zipfile)
        -:   52: *          Initialize the bit string routines.
        -:   53: *
        -:   54: *      void send_bits (int value, int length)
        -:   55: *          Write out a bit string, taking the source bits right to
        -:   56: *          left.
        -:   57: *
        -:   58: *      int bi_reverse (int value, int length)
        -:   59: *          Reverse the bits of a bit string, taking the source bits left to
        -:   60: *          right and emitting them right to left.
        -:   61: *
        -:   62: *      void bi_windup (void)
        -:   63: *          Write out any remaining bits in an incomplete byte.
        -:   64: *
        -:   65: *      void copy_block(char *buf, unsigned len, int header)
        -:   66: *          Copy a stored block to the zip file, storing first the length and
        -:   67: *          its one's complement if requested.
        -:   68: *
        -:   69: */
        -:   70:
        -:   71:#ifdef DEBUG
        -:   72:#  include <stdio.h>
        -:   73:#endif
        -:   74:
        -:   75:/*
        -:   76:#ifndef lint
        -:   77:static char rcsid[] = "$Id: bits.c,v 0.8 1993/02/04 13:21:06 jloup Exp $";
        -:   78:#endif
        -:   79:*/
        -:   80:
        -:   81:/* ===========================================================================
        -:   82: * Local data used by the "bit string" routines.
        -:   83: */
        -:   84:
        -:   85:local file_t zfile; /* output gzip file */
        -:   86:
        -:   87:local unsigned short bi_buf;
        -:   88:/* Output buffer. bits are inserted starting at the bottom (least significant
        -:   89: * bits).
        -:   90: */
        -:   91:
        -:   92:#define Buf_size (8 * 2*sizeof(char))
        -:   93:/* Number of bits used within bi_buf. (bi_buf might be implemented on
        -:   94: * more than 16 bits on some systems.)
        -:   95: */
        -:   96:
        -:   97:local int bi_valid;
        -:   98:/* Number of valid bits in bi_buf.  All bits above the last valid bit
        -:   99: * are always zero.
        -:  100: */
        -:  101:
        -:  102:int (*read_buf) OF((char *buf, unsigned size)) = file_read;
        -:  103:/* Current input function. Set to mem_read for in-memory compression */
        -:  104:
        -:  105:#ifdef DEBUG
        -:  106:  ulg bits_sent;   /* bit length of the compressed data */
        -:  107:#endif
        -:  108:
        -:  109:/* ===========================================================================
        -:  110: * Initialize the bit string routines.
        -:  111: */
      106:  112:void bi_init (zipfile)
        -:  113:    file_t zipfile; /* output zip file, NO_FILE for in-memory compression */
        -:  114:{
      106:  115:    zfile  = zipfile;
      106:  116:    bi_buf = 0;
      106:  117:    bi_valid = 0;
        -:  118:#ifdef DEBUG
        -:  119:    bits_sent = 0L;
        -:  120:#endif
        -:  121:
        -:  122:    /* Set the defaults for file compression. They are set by memcompress
        -:  123:     * for in-memory compression.
        -:  124:     */
      106:  125:    if (zfile != NO_FILE) {
      106:  126:	read_buf  = file_read;
        -:  127:    }
      106:  128:}
        -:  129:
        -:  130:/* ===========================================================================
        -:  131: * Send a value on a given number of bits.
        -:  132: * IN assertion: length <= 16 and value fits in length bits.
        -:  133: */
  1945890:  134:void send_bits(value, length)
        -:  135:    int value;  /* value to send */
        -:  136:    int length; /* number of bits */
        -:  137:{
        -:  138:#ifdef DEBUG
        -:  139:    Tracev((stderr," l %2d v %4x ", length, value));
        -:  140:    Assert(length > 0 && length <= 15, "invalid length");
        -:  141:    bits_sent += (ulg)length;
        -:  142:#endif
        -:  143:    /* If not enough room in bi_buf, use (valid) bits from bi_buf and
        -:  144:     * (16 - bi_valid) bits from value, leaving (width - (16-bi_valid))
        -:  145:     * unused bits in value.
        -:  146:     */
  1945890:  147:    if (bi_valid > (int)Buf_size - length) {
   704635:  148:        bi_buf |= (value << bi_valid);
   704635:  149:        put_short(bi_buf);
   704635:  150:        bi_buf = (ush)value >> (Buf_size - bi_valid);
   704635:  151:        bi_valid += length - Buf_size;
        -:  152:    } else {
  1241255:  153:        bi_buf |= value << bi_valid;
  1241255:  154:        bi_valid += length;
        -:  155:    }
  1945890:  156:}
        -:  157:
        -:  158:/* ===========================================================================
        -:  159: * Reverse the first len bits of a code, using straightforward code (a faster
        -:  160: * method would use a table)
        -:  161: * IN assertion: 1 <= len <= 15
        -:  162: */
    52356:  163:unsigned bi_reverse(code, len)
        -:  164:    unsigned code; /* the value to invert */
        -:  165:    int len;       /* its bit length */
        -:  166:{
    52356:  167:    register unsigned res = 0;
        -:  168:    do {
   414995:  169:        res |= code & 1;
   414995:  170:        code >>= 1, res <<= 1;
   414995:  171:    } while (--len > 0);
    52356:  172:    return res >> 1;
        -:  173:}
        -:  174:
        -:  175:/* ===========================================================================
        -:  176: * Write out any remaining bits in an incomplete byte.
        -:  177: */
      107:  178:void bi_windup()
        -:  179:{
      107:  180:    if (bi_valid > 8) {
       75:  181:        put_short(bi_buf);
       32:  182:    } else if (bi_valid > 0) {
       31:  183:        put_byte(bi_buf);
        -:  184:    }
      107:  185:    bi_buf = 0;
      107:  186:    bi_valid = 0;
        -:  187:#ifdef DEBUG
        -:  188:    bits_sent = (bits_sent+7) & ~7;
        -:  189:#endif
      107:  190:}
        -:  191:
        -:  192:/* ===========================================================================
        -:  193: * Copy a stored block to the zip file, storing first the length and its
        -:  194: * one's complement if requested.
        -:  195: */
        1:  196:void copy_block(buf, len, header)
        -:  197:    char     *buf;    /* the input data */
        -:  198:    unsigned len;     /* its length */
        -:  199:    int      header;  /* true if block header must be written */
        -:  200:{
        1:  201:    bi_windup();              /* align on byte boundary */
        -:  202:
        1:  203:    if (header) {
        1:  204:        put_short((ush)len);   
        1:  205:        put_short((ush)~len);
        -:  206:#ifdef DEBUG
        -:  207:        bits_sent += 2*16;
        -:  208:#endif
        -:  209:    }
        -:  210:#ifdef DEBUG
        -:  211:    bits_sent += (ulg)len<<3;
        -:  212:#endif
    12048:  213:    while (len--) {
        -:  214:#ifdef CRYPT
        -:  215:        int t;
        -:  216:	if (key) zencode(*buf, t);
        -:  217:#endif
    12046:  218:	put_byte(*buf++);
        -:  219:    }
        1:  220:}
        -:  221:/* crypt.c (dummy version) -- do not perform encryption
        -:  222: * Hardly worth copyrighting :-)
        -:  223: */
        -:  224:/*
        -:  225:#ifndef lint
        -:  226:static char rcsid[] = "$Id: crypt.c,v 0.6 1993/03/22 09:48:47 jloup Exp $";
        -:  227:#endif
        -:  228:*/
        -:  229:/* deflate.c -- compress data using the deflation algorithm
        -:  230: * Copyright (C) 1992-1993 Jean-loup Gailly
        -:  231: * This is free software; you can redistribute it and/or modify it under the
        -:  232: * terms of the GNU General Public License, see the file COPYING.
        -:  233: */
        -:  234:
        -:  235:/*
        -:  236: *  PURPOSE
        -:  237: *
        -:  238: *      Identify new text as repetitions of old text within a fixed-
        -:  239: *      length sliding window trailing behind the new text.
        -:  240: *
        -:  241: *  DISCUSSION
        -:  242: *
        -:  243: *      The "deflation" process depends on being able to identify portions
        -:  244: *      of the input text which are identical to earlier input (within a
        -:  245: *      sliding window trailing behind the input currently being processed).
        -:  246: *
        -:  247: *      The most straightforward technique turns out to be the fastest for
        -:  248: *      most input files: try all possible matches and select the longest.
        -:  249: *      The key feature of this algorithm is that insertions into the string
        -:  250: *      dictionary are very simple and thus fast, and deletions are avoided
        -:  251: *      completely. Insertions are performed at each input character, whereas
        -:  252: *      string matches are performed only when the previous match ends. So it
        -:  253: *      is preferable to spend more time in matches to allow very fast string
        -:  254: *      insertions and avoid deletions. The matching algorithm for small
        -:  255: *      strings is inspired from that of Rabin & Karp. A brute force approach
        -:  256: *      is used to find longer strings when a small match has been found.
        -:  257: *      A similar algorithm is used in comic (by Jan-Mark Wams) and freeze
        -:  258: *      (by Leonid Broukhis).
        -:  259: *         A previous version of this file used a more sophisticated algorithm
        -:  260: *      (by Fiala and Greene) which is guaranteed to run in linear amortized
        -:  261: *      time, but has a larger average cost, uses more memory and is patented.
        -:  262: *      However the F&G algorithm may be faster for some highly redundant
        -:  263: *      files if the parameter max_chain_length (described below) is too large.
        -:  264: *
        -:  265: *  ACKNOWLEDGEMENTS
        -:  266: *
        -:  267: *      The idea of lazy evaluation of matches is due to Jan-Mark Wams, and
        -:  268: *      I found it in 'freeze' written by Leonid Broukhis.
        -:  269: *      Thanks to many info-zippers for bug reports and testing.
        -:  270: *
        -:  271: *  REFERENCES
        -:  272: *
        -:  273: *      APPNOTE.TXT documentation file in PKZIP 1.93a distribution.
        -:  274: *
        -:  275: *      A description of the Rabin and Karp algorithm is given in the book
        -:  276: *         "Algorithms" by R. Sedgewick, Addison-Wesley, p252.
        -:  277: *
        -:  278: *      Fiala,E.R., and Greene,D.H.
        -:  279: *         Data Compression with Finite Windows, Comm.ACM, 32,4 (1989) 490-595
        -:  280: *
        -:  281: *  INTERFACE
        -:  282: *
        -:  283: *      void lm_init (int pack_level, ush *flags)
        -:  284: *          Initialize the "longest match" routines for a new file
        -:  285: *
        -:  286: *      ulg deflate (void)
        -:  287: *          Processes a new input file and return its compressed length. Sets
        -:  288: *          the compressed length, crc, deflate flags and internal file
        -:  289: *          attributes.
        -:  290: */
        -:  291:
        -:  292:/*
        -:  293:#ifndef lint
        -:  294:static char rcsid[] = "$Id: deflate.c,v 0.13 1993/05/25 16:25:40 jloup Exp $";
        -:  295:#endif
        -:  296:*/
        -:  297:
        -:  298:/* ===========================================================================
        -:  299: * Configuration parameters
        -:  300: */
        -:  301:
        -:  302:/* Compile with MEDIUM_MEM to reduce the memory requirements or
        -:  303: * with SMALL_MEM to use as little memory as possible. Use BIG_MEM if the
        -:  304: * entire input file can be held in memory (not possible on 16 bit systems).
        -:  305: * Warning: defining these symbols affects HASH_BITS (see below) and thus
        -:  306: * affects the compression ratio. The compressed output
        -:  307: * is still correct, and might even be smaller in some cases.
        -:  308: */
        -:  309:
        -:  310:#ifdef SMALL_MEM
        -:  311:#   define HASH_BITS  13  /* Number of bits used to hash strings */
        -:  312:#endif
        -:  313:#ifdef MEDIUM_MEM
        -:  314:#   define HASH_BITS  14
        -:  315:#endif
        -:  316:#ifndef HASH_BITS
        -:  317:#   define HASH_BITS  15
        -:  318:   /* For portability to 16 bit machines, do not use values above 15. */
        -:  319:#endif
        -:  320:
        -:  321:/* To save space (see unlzw.c), we overlay prev+head with tab_prefix and
        -:  322: * window with tab_suffix. Check that we can do this:
        -:  323: */
        -:  324:#if WSIZE<<1 > 1<<BITS
        -:  325:   error: cannot overlay window with tab_suffix and prev with tab_prefix0
        -:  326:#endif
        -:  327:#if HASH_BITS > BITS-1
        -:  328:   error: cannot overlay head with tab_prefix1
        -:  329:#endif
        -:  330:
        -:  331:#define HASH_SIZE (unsigned)(1<<HASH_BITS)
        -:  332:#define HASH_MASK (HASH_SIZE-1)
        -:  333:#define WMASK     (WSIZE-1)
        -:  334:/* HASH_SIZE and WSIZE must be powers of two */
        -:  335:
        -:  336:#define NIL 0
        -:  337:/* Tail of hash chains */
        -:  338:
        -:  339:#define FAST 4
        -:  340:#define SLOW 2
        -:  341:/* speed options for the general purpose bit flag */
        -:  342:
        -:  343:#ifndef TOO_FAR
        -:  344:#  define TOO_FAR 4096
        -:  345:#endif
        -:  346:/* Matches of length 3 are discarded if their distance exceeds TOO_FAR */
        -:  347:
        -:  348:/* ===========================================================================
        -:  349: * Local data used by the "longest match" routines.
        -:  350: */
        -:  351:
        -:  352:typedef ush Pos;
        -:  353:typedef unsigned IPos;
        -:  354:/* A Pos is an index in the character window. We use short instead of int to
        -:  355: * save space in the various tables. IPos is used only for parameter passing.
        -:  356: */
        -:  357:
        -:  358:/* DECLARE(uch, window, 2L*WSIZE); */
        -:  359:/* Sliding window. Input bytes are read into the second half of the window,
        -:  360: * and move to the first half later to keep a dictionary of at least WSIZE
        -:  361: * bytes. With this organization, matches are limited to a distance of
        -:  362: * WSIZE-MAX_MATCH bytes, but this ensures that IO is always
        -:  363: * performed with a length multiple of the block size. Also, it limits
        -:  364: * the window size to 64K, which is quite useful on MSDOS.
        -:  365: * To do: limit the window size to WSIZE+BSZ if SMALL_MEM (the code would
        -:  366: * be less efficient).
        -:  367: */
        -:  368:
        -:  369:/* DECLARE(Pos, prev, WSIZE); */
        -:  370:/* Link to older string with same hash index. To limit the size of this
        -:  371: * array to 64K, this link is maintained only for the last 32K strings.
        -:  372: * An index in this array is thus a window index modulo 32K.
        -:  373: */
        -:  374:
        -:  375:/* DECLARE(Pos, head, 1<<HASH_BITS); */
        -:  376:/* Heads of the hash chains or NIL. */
        -:  377:
        -:  378:ulg window_size = (ulg)2*WSIZE;
        -:  379:/* window size, 2*WSIZE except for MMAP or BIG_MEM, where it is the
        -:  380: * input file length plus MIN_LOOKAHEAD.
        -:  381: */
        -:  382:
        -:  383:long block_start;
        -:  384:/* window position at the beginning of the current output block. Gets
        -:  385: * negative when the window is moved backwards.
        -:  386: */
        -:  387:
        -:  388:local unsigned ins_h;  /* hash index of string to be inserted */
        -:  389:
        -:  390:#define H_SHIFT  ((HASH_BITS+MIN_MATCH-1)/MIN_MATCH)
        -:  391:/* Number of bits by which ins_h and del_h must be shifted at each
        -:  392: * input step. It must be such that after MIN_MATCH steps, the oldest
        -:  393: * byte no longer takes part in the hash key, that is:
        -:  394: *   H_SHIFT * MIN_MATCH >= HASH_BITS
        -:  395: */
        -:  396:
        -:  397:unsigned int near prev_length;
        -:  398:/* Length of the best match at previous step. Matches not greater than this
        -:  399: * are discarded. This is used in the lazy match evaluation.
        -:  400: */
        -:  401:
        -:  402:      unsigned near strstart;      /* start of string to insert */
        -:  403:      unsigned near match_start;   /* start of matching string */
        -:  404:local int           eofile;        /* flag set at end of input file */
        -:  405:local unsigned      lookahead;     /* number of valid bytes ahead in window */
        -:  406:
        -:  407:unsigned near max_chain_length;
        -:  408:/* To speed up deflation, hash chains are never searched beyond this length.
        -:  409: * A higher limit improves compression ratio but degrades the speed.
        -:  410: */
        -:  411:
        -:  412:local unsigned int max_lazy_match;
        -:  413:/* Attempt to find a better match only when the current match is strictly
        -:  414: * smaller than this value.
        -:  415: */
        -:  416:
        -:  417:int near good_match;
        -:  418:/* Use a faster search when the previous match is longer than this */
        -:  419:
        -:  420:
        -:  421:/* Values for max_lazy_match, good_match and max_chain_length, depending on
        -:  422: * the desired pack level (0..9). The values given below have been tuned to
        -:  423: * exclude worst case performance for pathological files. Better values may be
        -:  424: * found for specific files.
        -:  425: */
        -:  426:
        -:  427:typedef struct config {
        -:  428:   ush good_length; /* reduce lazy search above this match length */
        -:  429:   ush max_lazy;    /* do not perform lazy search above this match length */
        -:  430:   ush nice_length; /* quit search above this match length */
        -:  431:   ush max_chain;
        -:  432:} config;
        -:  433:
        -:  434:#ifdef  FULL_SEARCH
        -:  435:# define nice_match MAX_MATCH
        -:  436:#else
        -:  437:  int near nice_match; /* Stop searching when current match exceeds this */
        -:  438:#endif
        -:  439:
        -:  440:local config configuration_table[10] = {
        -:  441:/*      good lazy nice chain */
        -:  442:/* 0 */ {0,    0,  0,    0},  /* store only */
        -:  443:/* 1 */ {4,    4, 16,   16},  /* maximum speed */
        -:  444:/* 2 */ {6,    8, 16,   16},
        -:  445:/* 3 */ {8,   16, 32,   32},
        -:  446:/* 4 */ {8,   16, 64,   64},
        -:  447:/* 5 */ {8,   16, 128, 128},
        -:  448:/* 6 */ {8,   32, 128, 256},
        -:  449:/* 7 */ {8,   64, 128, 512},
        -:  450:/* 8 */ {32, 128, 258, 1024},
        -:  451:/* 9 */ {32, 258, 258, 4096}}; /* maximum compression */
        -:  452:
        -:  453:/* Note: the current code requires max_lazy >= MIN_MATCH and max_chain >= 4
        -:  454: * but these restrictions can easily be removed at a small cost.
        -:  455: */
        -:  456:
        -:  457:#define EQUAL 0
        -:  458:/* result of memcmp for equal strings */
        -:  459:
        -:  460:/* ===========================================================================
        -:  461: *  Prototypes for local functions.
        -:  462: */
        -:  463:local void fill_window   OF((void));
        -:  464:      int  longest_match OF((IPos cur_match));
        -:  465:#ifdef ASMV
        -:  466:      void match_init OF((void)); /* asm code initialization */
        -:  467:#endif
        -:  468:
        -:  469:#ifdef DEBUG
        -:  470:local  void check_match OF((IPos start, IPos match, int length));
        -:  471:#endif
        -:  472:
        -:  473:/* ===========================================================================
        -:  474: * Update a hash value with the given input byte
        -:  475: * IN  assertion: all calls to to UPDATE_HASH are made with consecutive
        -:  476: *    input characters, so that a running hash key can be computed from the
        -:  477: *    previous key instead of complete recalculation each time.
        -:  478: */
        -:  479:#define UPDATE_HASH(h,c) (h = (((h)<<H_SHIFT) ^ (c)) & HASH_MASK)
        -:  480:
        -:  481:/* ===========================================================================
        -:  482: * Insert string s in the dictionary and set match_head to the previous head
        -:  483: * of the hash chain (the most recent string with same hash key). Return
        -:  484: * the previous length of the hash chain.
        -:  485: * IN  assertion: all calls to to INSERT_STRING are made with consecutive
        -:  486: *    input characters and the first MIN_MATCH bytes of s are valid
        -:  487: *    (except for the last MIN_MATCH-1 bytes of the input file).
        -:  488: */
        -:  489:#define INSERT_STRING(s, match_head) \
        -:  490:   (UPDATE_HASH(ins_h, window[(s) + MIN_MATCH-1]), \
        -:  491:    prev[(s) & WMASK] = match_head = head[ins_h], \
        -:  492:    head[ins_h] = (s))
        -:  493:
        -:  494:/* ===========================================================================
        -:  495: * Initialize the "longest match" routines for a new file
        -:  496: */
      106:  497:void lm_init (pack_level, flags)
        -:  498:    int pack_level; /* 0: store, 1: best speed, 9: best compression */
        -:  499:    ush *flags;     /* general purpose bit flag */
        -:  500:{
        -:  501:    register unsigned j;
        -:  502:
      106:  503:    if (pack_level < 1 || pack_level > 9) error("bad pack level");
        -:  504:
        -:  505:    /* Initialize the hash table. */
        -:  506:
        -:  507:
        -:  508:#if defined(MAXSEG_64K) && HASH_BITS == 15
        -:  509:    for (j = 0;  j < HASH_SIZE; j++) head[j] = NIL;
        -:  510:#else
      106:  511:    memzero((char*)head, HASH_SIZE*sizeof(*head));
        -:  512:#endif
        -:  513:    /* prev will be initialized on the fly */
        -:  514:
        -:  515:    /* Set the default configuration parameters:
        -:  516:     */
      106:  517:    max_lazy_match   = configuration_table[pack_level].max_lazy;
      106:  518:    good_match       = configuration_table[pack_level].good_length;
        -:  519:#ifndef FULL_SEARCH
      106:  520:    nice_match       = configuration_table[pack_level].nice_length;
        -:  521:#endif
      106:  522:    max_chain_length = configuration_table[pack_level].max_chain;
      106:  523:    if (pack_level == 1) {
       10:  524:       *flags |= FAST;
       96:  525:    } else if (pack_level == 9) {
       10:  526:       *flags |= SLOW;
        -:  527:    }
        -:  528:    /* ??? reduce max_chain_length for binary files */
        -:  529:
      106:  530:    strstart = 0;
      106:  531:    block_start = 0L;
        -:  532:#ifdef ASMV
        -:  533:    match_init(); /* initialize the asm code */
        -:  534:#endif
        -:  535:
      106:  536:    lookahead = read_buf((char*)window,
        -:  537:			 sizeof(int) <= 2 ? (unsigned)WSIZE : 2*WSIZE);
        -:  538:
      106:  539:    if (lookahead == 0 || lookahead == (unsigned)EOF) {
        2:  540:       eofile = 1, lookahead = 0;
        2:  541:       return;
        -:  542:    }
      104:  543:    eofile = 0;
        -:  544:    /* Make sure that we always have enough lookahead. This is important
        -:  545:     * if input comes from a device such as a tty.
        -:  546:     */
      104:  547:    while (lookahead < MIN_LOOKAHEAD && !eofile) fill_window();
        -:  548:
      104:  549:    ins_h = 0;
      104:  550:    for (j=0; j<MIN_MATCH-1; j++) UPDATE_HASH(ins_h, window[j]);
        -:  551:    /* If lookahead < MIN_MATCH, ins_h is garbage, but this is
        -:  552:     * not important since only literal bytes will be emitted.
        -:  553:     */
        -:  554:}
        -:  555:
        -:  556:/* ===========================================================================
        -:  557: * Set match_start to the longest match starting at the given string and
        -:  558: * return its length. Matches shorter or equal to prev_length are discarded,
        -:  559: * in which case the result is equal to prev_length and match_start is
        -:  560: * garbage.
        -:  561: * IN assertions: cur_match is the head of the hash chain for the current
        -:  562: *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
        -:  563: */
        -:  564:#ifndef ASMV
        -:  565:/* For MSDOS, OS/2 and 386 Unix, an optimized version is in match.asm or
        -:  566: * match.s. The code is functionally equivalent, so you can use the C version
        -:  567: * if desired.
        -:  568: */
  1036997:  569:int longest_match(cur_match)
        -:  570:    IPos cur_match;                             /* current match */
        -:  571:{
  1036997:  572:    unsigned chain_length = max_chain_length;   /* max hash chain length */
  1036997:  573:    register uch *scan = window + strstart;     /* current string */
        -:  574:    register uch *match;                        /* matched string */
        -:  575:    register int len;                           /* length of current match */
  1036997:  576:    int best_len = prev_length;                 /* best match length so far */
  1036997:  577:    IPos limit = strstart > (IPos)MAX_DIST ? strstart - (IPos)MAX_DIST : NIL;
        -:  578:    /* Stop when cur_match becomes <= limit. To simplify the code,
        -:  579:     * we prevent matches with the string of window index 0.
        -:  580:     */
        -:  581:
        -:  582:/* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
        -:  583: * It is easy to get rid of this optimization if necessary.
        -:  584: */
        -:  585:#if HASH_BITS < 8 || MAX_MATCH != 258
        -:  586:   error: Code too clever
        -:  587:#endif
        -:  588:
        -:  589:#ifdef UNALIGNED_OK
        -:  590:    /* Compare two bytes at a time. Note: this is not always beneficial.
        -:  591:     * Try with and without -DUNALIGNED_OK to check.
        -:  592:     */
        -:  593:    register uch *strend = window + strstart + MAX_MATCH - 1;
        -:  594:    register ush scan_start = *(ush*)scan;
        -:  595:    register ush scan_end   = *(ush*)(scan+best_len-1);
        -:  596:#else
  1036997:  597:    register uch *strend = window + strstart + MAX_MATCH;
  1036997:  598:    register uch scan_end1  = scan[best_len-1];
  1036997:  599:    register uch scan_end   = scan[best_len];
        -:  600:#endif
        -:  601:
        -:  602:    /* Do not waste too much time if we already have a good match: */
  1036997:  603:    if (prev_length >= good_match) {
   114359:  604:        chain_length >>= 2;
        -:  605:    }
        -:  606:    Assert(strstart <= window_size-MIN_LOOKAHEAD, "insufficient lookahead");
        -:  607:
        -:  608:    do {
        -:  609:        Assert(cur_match < strstart, "no future");
 31078989:  610:        match = window + cur_match;
        -:  611:
        -:  612:        /* Skip to next match if the match length cannot increase
        -:  613:         * or if the match length is less than 2:
        -:  614:         */
        -:  615:#if (defined(UNALIGNED_OK) && MAX_MATCH == 258)
        -:  616:        /* This code assumes sizeof(unsigned short) == 2. Do not use
        -:  617:         * UNALIGNED_OK if your compiler uses a different size.
        -:  618:         */
        -:  619:        if (*(ush*)(match+best_len-1) != scan_end ||
        -:  620:            *(ush*)match != scan_start) continue;
        -:  621:
        -:  622:        /* It is not necessary to compare scan[2] and match[2] since they are
        -:  623:         * always equal when the other bytes match, given that the hash keys
        -:  624:         * are equal and that HASH_BITS >= 8. Compare 2 bytes at a time at
        -:  625:         * strstart+3, +5, ... up to strstart+257. We check for insufficient
        -:  626:         * lookahead only every 4th comparison; the 128th check will be made
        -:  627:         * at strstart+257. If MAX_MATCH-2 is not a multiple of 8, it is
        -:  628:         * necessary to put more guard bytes at the end of the window, or
        -:  629:         * to check more often for insufficient lookahead.
        -:  630:         */
        -:  631:        scan++, match++;
        -:  632:        do {
        -:  633:        } while (*(ush*)(scan+=2) == *(ush*)(match+=2) &&
        -:  634:                 *(ush*)(scan+=2) == *(ush*)(match+=2) &&
        -:  635:                 *(ush*)(scan+=2) == *(ush*)(match+=2) &&
        -:  636:                 *(ush*)(scan+=2) == *(ush*)(match+=2) &&
        -:  637:                 scan < strend);
        -:  638:        /* The funny "do {}" generates better code on most compilers */
        -:  639:
        -:  640:        /* Here, scan <= window+strstart+257 */
        -:  641:        Assert(scan <= window+(unsigned)(window_size-1), "wild scan");
        -:  642:        if (*scan == *match) scan++;
        -:  643:
        -:  644:        len = (MAX_MATCH - 1) - (int)(strend-scan);
        -:  645:        scan = strend - (MAX_MATCH-1);
        -:  646:
        -:  647:#else /* UNALIGNED_OK */
        -:  648:
 35277247:  649:        if (match[best_len]   != scan_end  ||
  6098566:  650:            match[best_len-1] != scan_end1 ||
  4005032:  651:            *match            != *scan     ||
 31085268:  652:            *++match          != scan[1])      continue;
        -:  653:
        -:  654:        /* The check at best_len-1 can be removed because it will be made
        -:  655:         * again later. (This heuristic is not always a win.)
        -:  656:         * It is not necessary to compare scan[2] and match[2] since they
        -:  657:         * are always equal when the other bytes match, given that
        -:  658:         * the hash keys are equal and that HASH_BITS >= 8.
        -:  659:         */
  1046083:  660:        scan += 2, match++;
        -:  661:
        -:  662:        /* We check for insufficient lookahead only every 8th comparison;
        -:  663:         * the 256th check will be made at strstart+258.
        -:  664:         */
        -:  665:        do {
  4655740:  666:        } while (*++scan == *++match && *++scan == *++match &&
  2655574:  667:                 *++scan == *++match && *++scan == *++match &&
  1653234:  668:                 *++scan == *++match && *++scan == *++match &&
   735874:  669:                 *++scan == *++match && *++scan == *++match &&
  3687390:  670:                 scan < strend);
        -:  671:
  1046083:  672:        len = MAX_MATCH - (int)(strend - scan);
  1046083:  673:        scan = strend - MAX_MATCH;
        -:  674:
        -:  675:#endif /* UNALIGNED_OK */
        -:  676:
  1046083:  677:        if (len > best_len) {
   888509:  678:            match_start = cur_match;
   888509:  679:            best_len = len;
   888509:  680:            if (len >= nice_match) break;
        -:  681:#ifdef UNALIGNED_OK
        -:  682:            scan_end = *(ush*)(scan+best_len-1);
        -:  683:#else
   883537:  684:            scan_end1  = scan[best_len-1];
   883537:  685:            scan_end   = scan[best_len];
        -:  686:#endif
        -:  687:        }
 31074017:  688:    } while ((cur_match = prev[cur_match & WMASK]) > limit
 31074017:  689:	     && --chain_length != 0);
        -:  690:
  1036997:  691:    return best_len;
        -:  692:}
        -:  693:#endif /* ASMV */
        -:  694:
        -:  695:#ifdef DEBUG
        -:  696:/* ===========================================================================
        -:  697: * Check that the match at match_start is indeed a match.
        -:  698: */
        -:  699:local void check_match(start, match, length)
        -:  700:    IPos start, match;
        -:  701:    int length;
        -:  702:{
        -:  703:    /* check that the match is indeed a match */
        -:  704:    if (memcmp((char*)window + match,
        -:  705:                (char*)window + start, length) != EQUAL) {
        -:  706:        fprintf(stderr,
        -:  707:            " start %d, match %d, length %d\n",
        -:  708:            start, match, length);
        -:  709:        error("invalid match");
        -:  710:    }
        -:  711:    if (verbose > 1) {
        -:  712:        fprintf(stderr,"\\[%d,%d]", start-match, length);
        -:  713:        do { putc(window[start++], stderr); } while (--length != 0);
        -:  714:    }
        -:  715:}
        -:  716:#else
        -:  717:#  define check_match(start, match, length)
        -:  718:#endif
        -:  719:
        -:  720:/* ===========================================================================
        -:  721: * Fill the window when the lookahead becomes insufficient.
        -:  722: * Updates strstart and lookahead, and sets eofile if end of input file.
        -:  723: * IN assertion: lookahead < MIN_LOOKAHEAD && strstart + lookahead > 0
        -:  724: * OUT assertions: at least one byte has been read, or eofile is set;
        -:  725: *    file reads are performed for at least two bytes (required for the
        -:  726: *    translate_eol option).
        -:  727: */
      128:  728:local void fill_window()
        -:  729:{
        -:  730:    register unsigned n, m;
      128:  731:    unsigned more = (unsigned)(window_size - (ulg)lookahead - (ulg)strstart);
        -:  732:    /* Amount of free space at the end of the window. */
        -:  733:
        -:  734:    /* If the window is almost full and there is insufficient lookahead,
        -:  735:     * move the upper half to the lower one to make room in the upper half.
        -:  736:     */
      128:  737:    if (more == (unsigned)EOF) {
        -:  738:        /* Very unlikely, but possible on 16 bit machine if strstart == 0
        -:  739:         * and lookahead == 1 (input done one byte at time)
        -:  740:         */
    #####:  741:        more--;
      128:  742:    } else if (strstart >= WSIZE+MAX_DIST) {
        -:  743:        /* By the IN assertion, the window is not empty so we can't confuse
        -:  744:         * more == 0 with more == 64K on a 16 bit machine.
        -:  745:         */
        -:  746:        Assert(window_size == (ulg)2*WSIZE, "no sliding with BIG_MEM");
        -:  747:
       24:  748:        memcpy((char*)window, (char*)window+WSIZE, (unsigned)WSIZE);
       24:  749:        match_start -= WSIZE;
       24:  750:        strstart    -= WSIZE; /* we now have strstart >= MAX_DIST: */
        -:  751:
       24:  752:        block_start -= (long) WSIZE;
        -:  753:
   786456:  754:        for (n = 0; n < HASH_SIZE; n++) {
   786432:  755:            m = head[n];
   786432:  756:            head[n] = (Pos)(m >= WSIZE ? m-WSIZE : NIL);
        -:  757:        }
   786456:  758:        for (n = 0; n < WSIZE; n++) {
   786432:  759:            m = prev[n];
   786432:  760:            prev[n] = (Pos)(m >= WSIZE ? m-WSIZE : NIL);
        -:  761:            /* If n is not on any hash chain, prev[n] is garbage but
        -:  762:             * its value will never be used.
        -:  763:             */
        -:  764:        }
       24:  765:        more += WSIZE;
        -:  766:    }
        -:  767:    /* At this point, more >= 2 */
      128:  768:    if (!eofile) {
      128:  769:        n = read_buf((char*)window+strstart+lookahead, more);
      128:  770:        if (n == 0 || n == (unsigned)EOF) {
      104:  771:            eofile = 1;
        -:  772:        } else {
       24:  773:            lookahead += n;
        -:  774:        }
        -:  775:    }
      128:  776:}
        -:  777:
        -:  778:/* ===========================================================================
        -:  779: * Flush the current block, with given end-of-file flag.
        -:  780: * IN assertion: strstart is set to the end of the current match.
        -:  781: */
        -:  782:#define FLUSH_BLOCK(eof) \
        -:  783:   flush_block(block_start >= 0L ? (char*)&window[(unsigned)block_start] : \
        -:  784:                (char*)NULL, (long)strstart - block_start, (eof))
        -:  785:
        -:  786:/* ===========================================================================
        -:  787: * Processes a new input file and return its compressed length.
        -:  788: */
        -:  789:#ifdef NO_LAZY
        -:  790:ulg deflate()
        -:  791:{
        -:  792:    IPos hash_head; /* head of the hash chain */
        -:  793:    int flush;      /* set if current block must be flushed */
        -:  794:    unsigned match_length = 0;  /* length of best match */
        -:  795:
        -:  796:    prev_length = MIN_MATCH-1;
        -:  797:    while (lookahead != 0) {
        -:  798:        /* Insert the string window[strstart .. strstart+2] in the
        -:  799:         * dictionary, and set hash_head to the head of the hash chain:
        -:  800:         */
        -:  801:        INSERT_STRING(strstart, hash_head);
        -:  802:
        -:  803:        /* Find the longest match, discarding those <= prev_length.
        -:  804:         * At this point we have always match_length < MIN_MATCH
        -:  805:         */
        -:  806:        if (hash_head != NIL && strstart - hash_head <= MAX_DIST) {
        -:  807:            /* To simplify the code, we prevent matches with the string
        -:  808:             * of window index 0 (in particular we have to avoid a match
        -:  809:             * of the string with itself at the start of the input file).
        -:  810:             */
        -:  811:            match_length = longest_match (hash_head);
        -:  812:            /* longest_match() sets match_start */
        -:  813:            if (match_length > lookahead) match_length = lookahead;
        -:  814:        }
        -:  815:        if (match_length >= MIN_MATCH) {
        -:  816:            check_match(strstart, match_start, match_length);
        -:  817:
        -:  818:            flush = ct_tally(strstart-match_start, match_length - MIN_MATCH);
        -:  819:
        -:  820:            lookahead -= match_length;
        -:  821:            match_length--; /* string at strstart already in hash table */
        -:  822:            do {
        -:  823:                strstart++;
        -:  824:                INSERT_STRING(strstart, hash_head);
        -:  825:                /* strstart never exceeds WSIZE-MAX_MATCH, so there are
        -:  826:                 * always MIN_MATCH bytes ahead. If lookahead < MIN_MATCH
        -:  827:                 * these bytes are garbage, but it does not matter since the
        -:  828:                 * next lookahead bytes will always be emitted as literals.
        -:  829:                 */
        -:  830:            } while (--match_length != 0);
        -:  831:        } else {
        -:  832:            /* No match, output a literal byte */
        -:  833:            flush = ct_tally (0, window[strstart]);
        -:  834:            lookahead--;
        -:  835:        }
        -:  836:        strstart++; 
        -:  837:        if (flush) FLUSH_BLOCK(0), block_start = strstart;
        -:  838:
        -:  839:        /* Make sure that we always have enough lookahead, except
        -:  840:         * at the end of the input file. We need MAX_MATCH bytes
        -:  841:         * for the next match, plus MIN_MATCH bytes to insert the
        -:  842:         * string following the next match.
        -:  843:         */
        -:  844:        while (lookahead < MIN_LOOKAHEAD && !eofile) fill_window();
        -:  845:
        -:  846:    }
        -:  847:    return FLUSH_BLOCK(1); /* eof */
        -:  848:}
        -:  849:#else /* LAZY */
        -:  850:/* ===========================================================================
        -:  851: * Same as above, but achieves better compression. We use a lazy
        -:  852: * evaluation for matches: a match is finally adopted only if there is
        -:  853: * no better match at the next window position.
        -:  854: */
      106:  855:ulg deflate()
        -:  856:{
        -:  857:    IPos hash_head;          /* head of hash chain */
        -:  858:    IPos prev_match;         /* previous match */
        -:  859:    int flush;               /* set if current block must be flushed */
      106:  860:    int match_available = 0; /* set if previous match exists */
      106:  861:    register unsigned match_length = MIN_MATCH-1; /* length of best match */
        -:  862:#ifdef DEBUG
        -:  863:    extern long isize;        /* byte length of input file, for debug only */
        -:  864:#endif
        -:  865:
        -:  866:    /* Process the input block. */
  1369688:  867:    while (lookahead != 0) {
        -:  868:        /* Insert the string window[strstart .. strstart+2] in the
        -:  869:         * dictionary, and set hash_head to the head of the hash chain:
        -:  870:         */
  1369476:  871:        INSERT_STRING(strstart, hash_head);
        -:  872:
        -:  873:        /* Find the longest match, discarding those <= prev_length.
        -:  874:         */
  1369476:  875:        prev_length = match_length, prev_match = match_start;
  1369476:  876:        match_length = MIN_MATCH-1;
        -:  877:
  2409132:  878:        if (hash_head != NIL && prev_length < max_lazy_match &&
  1039656:  879:            strstart - hash_head <= MAX_DIST) {
        -:  880:            /* To simplify the code, we prevent matches with the string
        -:  881:             * of window index 0 (in particular we have to avoid a match
        -:  882:             * of the string with itself at the start of the input file).
        -:  883:             */
  1036997:  884:            match_length = longest_match (hash_head);
        -:  885:            /* longest_match() sets match_start */
  1036997:  886:            if (match_length > lookahead) match_length = lookahead;
        -:  887:
        -:  888:            /* Ignore a length 3 match if it is too distant: */
  1036997:  889:            if (match_length == MIN_MATCH && strstart-match_start > TOO_FAR){
        -:  890:                /* If prev_match is also MIN_MATCH, match_start is garbage
        -:  891:                 * but we will ignore the current match anyway.
        -:  892:                 */
    32062:  893:                match_length--;
        -:  894:            }
        -:  895:        }
        -:  896:        /* If there was a match at the previous step and the current
        -:  897:         * match is not better, output the previous match:
        -:  898:         */
  1369476:  899:        if (prev_length >= MIN_MATCH && match_length <= prev_length) {
        -:  900:
        -:  901:            check_match(strstart-1, prev_match, prev_length);
        -:  902:
   488023:  903:            flush = ct_tally(strstart-1-prev_match, prev_length - MIN_MATCH);
        -:  904:
        -:  905:            /* Insert in hash table all strings up to the end of the match.
        -:  906:             * strstart-1 and strstart are already inserted.
        -:  907:             */
   488023:  908:            lookahead -= prev_length-1;
   488023:  909:            prev_length -= 2;
        -:  910:            do {
  2940718:  911:                strstart++;
  2940718:  912:                INSERT_STRING(strstart, hash_head);
        -:  913:                /* strstart never exceeds WSIZE-MAX_MATCH, so there are
        -:  914:                 * always MIN_MATCH bytes ahead. If lookahead < MIN_MATCH
        -:  915:                 * these bytes are garbage, but it does not matter since the
        -:  916:                 * next lookahead bytes will always be emitted as literals.
        -:  917:                 */
  2940718:  918:            } while (--prev_length != 0);
   488023:  919:            match_available = 0;
   488023:  920:            match_length = MIN_MATCH-1;
   488023:  921:            strstart++;
   488023:  922:            if (flush) FLUSH_BLOCK(0), block_start = strstart;
        -:  923:
   881453:  924:        } else if (match_available) {
        -:  925:            /* If there was no match at the previous position, output a
        -:  926:             * single literal. If there was a match but the current match
        -:  927:             * is longer, truncate the previous match to a single literal.
        -:  928:             */
        -:  929:            Tracevv((stderr,"%c",window[strstart-1]));
   393329:  930:            if (ct_tally (0, window[strstart-1])) {
        4:  931:                FLUSH_BLOCK(0), block_start = strstart;
        -:  932:            }
   393329:  933:            strstart++;
   393329:  934:            lookahead--;
        -:  935:        } else {
        -:  936:            /* There is no previous match to compare with, wait for
        -:  937:             * the next step to decide.
        -:  938:             */
   488124:  939:            match_available = 1;
   488124:  940:            strstart++;
   488124:  941:            lookahead--;
        -:  942:        }
        -:  943:        Assert (strstart <= isize && lookahead <= isize, "a bit too far");
        -:  944:
        -:  945:        /* Make sure that we always have enough lookahead, except
        -:  946:         * at the end of the input file. We need MAX_MATCH bytes
        -:  947:         * for the next match, plus MIN_MATCH bytes to insert the
        -:  948:         * string following the next match.
        -:  949:         */
  1369476:  950:        while (lookahead < MIN_LOOKAHEAD && !eofile) fill_window();
        -:  951:    }
      106:  952:    if (match_available) ct_tally (0, window[strstart-1]);
        -:  953:
      106:  954:    return FLUSH_BLOCK(1); /* eof */
        -:  955:}
        -:  956:#endif /* LAZY */
        -:  957:/* Getopt for GNU.
        -:  958:   NOTE: getopt is now part of the C library, so if you don't know what
        -:  959:   "Keep this file name-space clean" means, talk to roland@gnu.ai.mit.edu
        -:  960:   before changing it!
        -:  961:
        -:  962:   Copyright (C) 1987, 88, 89, 90, 91, 1992 Free Software Foundation, Inc.
        -:  963:
        -:  964:   This program is free software; you can redistribute it and/or modify it
        -:  965:   under the terms of the GNU General Public License as published by the
        -:  966:   Free Software Foundation; either version 2, or (at your option) any
        -:  967:   later version.
        -:  968:   
        -:  969:   This program is distributed in the hope that it will be useful,
        -:  970:   but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:  971:   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:  972:   GNU General Public License for more details.
        -:  973:   
        -:  974:   You should have received a copy of the GNU General Public License
        -:  975:   along with this program; if not, write to the Free Software
        -:  976:   Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */
        -:  977:
        -:  978:/* AIX requires this to be the first thing in the file.  */
        -:  979:#if (defined( __GNUC__) && (!defined(LINUX)))
        -:  980:#define alloca __builtin_alloca
        -:  981:#else /* not __GNUC__ */
        -:  982:#if defined (HAVE_ALLOCA_H) || (defined(sparc) && (defined(sun) || (!defined(USG) && !defined(SVR4) && !defined(__svr4__))))
        -:  983:#include <alloca.h>
        -:  984:#else
        -:  985:#ifdef _AIX
        -:  986: #pragma alloca
        -:  987:#else
        -:  988:char *alloca ();
        -:  989:#endif
        -:  990:#endif /* alloca.h */
        -:  991:#endif /* not __GNUC__ */
        -:  992:
        -:  993:/* This tells Alpha OSF/1 not to define a getopt prototype in <stdio.h>.  */
        -:  994:#ifndef _NO_PROTO
        -:  995:#  define _NO_PROTO
        -:  996:#endif
        -:  997:
        -:  998:#if defined(USG) || defined(STDC_HEADERS) || defined(__GNU_LIBRARY__)
        -:  999:#include <string.h>
        -: 1000:#endif
        -: 1001:
        -: 1002:/* This needs to come after some library #include
        -: 1003:   to get __GNU_LIBRARY__ defined.  */
        -: 1004:#ifdef	__GNU_LIBRARY__
        -: 1005:#undef	alloca
        -: 1006:/* Don't include stdlib.h for non-GNU C libraries because some of them
        -: 1007:   contain conflicting prototypes for getopt.  */
        -: 1008:#include <stdlib.h>
        -: 1009:#else	/* Not GNU C library.  */
        -: 1010:#define	__alloca	alloca
        -: 1011:#endif	/* GNU C library.  */
        -: 1012:
        -: 1013:#ifdef LINUX
        -: 1014:#define __alloca alloca
        -: 1015:#endif
        -: 1016:
        -: 1017:#if !__STDC__
        -: 1018:#define const
        -: 1019:#endif
        -: 1020:
        -: 1021:/* If GETOPT_COMPAT is defined, `+' as well as `--' can introduce a
        -: 1022:   long-named option.  Because this is not POSIX.2 compliant, it is
        -: 1023:   being phased out.  */
        -: 1024:#define GETOPT_COMPAT
        -: 1025:
        -: 1026:/* This version of `getopt' appears to the caller like standard Unix `getopt'
        -: 1027:   but it behaves differently for the user, since it allows the user
        -: 1028:   to intersperse the options with the other arguments.
        -: 1029:
        -: 1030:   As `getopt' works, it permutes the elements of ARGV so that,
        -: 1031:   when it is done, all the options precede everything else.  Thus
        -: 1032:   all application programs are extended to handle flexible argument order.
        -: 1033:
        -: 1034:   Setting the environment variable POSIXLY_CORRECT disables permutation.
        -: 1035:   Then the behavior is completely standard.
        -: 1036:
        -: 1037:   GNU application programs can use a third alternative mode in which
        -: 1038:   they can distinguish the relative order of options and other arguments.  */
        -: 1039:
        -: 1040:/* For communication from `getopt' to the caller.
        -: 1041:   When `getopt' finds an option that takes an argument,
        -: 1042:   the argument value is returned here.
        -: 1043:   Also, when `ordering' is RETURN_IN_ORDER,
        -: 1044:   each non-option ARGV-element is returned here.  */
        -: 1045:
        -: 1046:char *optarg = 0;
        -: 1047:
        -: 1048:/* Index in ARGV of the next element to be scanned.
        -: 1049:   This is used for communication to and from the caller
        -: 1050:   and for communication between successive calls to `getopt'.
        -: 1051:
        -: 1052:   On entry to `getopt', zero means this is the first call; initialize.
        -: 1053:
        -: 1054:   When `getopt' returns EOF, this is the index of the first of the
        -: 1055:   non-option elements that the caller should itself scan.
        -: 1056:
        -: 1057:   Otherwise, `optind' communicates from one call to the next
        -: 1058:   how much of ARGV has been scanned so far.  */
        -: 1059:
        -: 1060:int optind = 0;
        -: 1061:
        -: 1062:/* The next char to be scanned in the option-element
        -: 1063:   in which the last option character we returned was found.
        -: 1064:   This allows us to pick up the scan where we left off.
        -: 1065:
        -: 1066:   If this is zero, or a null string, it means resume the scan
        -: 1067:   by advancing to the next ARGV-element.  */
        -: 1068:
        -: 1069:static char *nextchar;
        -: 1070:
        -: 1071:/* Callers store zero here to inhibit the error message
        -: 1072:   for unrecognized options.  */
        -: 1073:
        -: 1074:int opterr = 1;
        -: 1075:
        -: 1076:/* Describe how to deal with options that follow non-option ARGV-elements.
        -: 1077:
        -: 1078:   If the caller did not specify anything,
        -: 1079:   the default is REQUIRE_ORDER if the environment variable
        -: 1080:   POSIXLY_CORRECT is defined, PERMUTE otherwise.
        -: 1081:
        -: 1082:   REQUIRE_ORDER means don't recognize them as options;
        -: 1083:   stop option processing when the first non-option is seen.
        -: 1084:   This is what Unix does.
        -: 1085:   This mode of operation is selected by either setting the environment
        -: 1086:   variable POSIXLY_CORRECT, or using `+' as the first character
        -: 1087:   of the list of option characters.
        -: 1088:
        -: 1089:   PERMUTE is the default.  We permute the contents of ARGV as we scan,
        -: 1090:   so that eventually all the non-options are at the end.  This allows options
        -: 1091:   to be given in any order, even with programs that were not written to
        -: 1092:   expect this.
        -: 1093:
        -: 1094:   RETURN_IN_ORDER is an option available to programs that were written
        -: 1095:   to expect options and other ARGV-elements in any order and that care about
        -: 1096:   the ordering of the two.  We describe each non-option ARGV-element
        -: 1097:   as if it were the argument of an option with character code 1.
        -: 1098:   Using `-' as the first character of the list of option characters
        -: 1099:   selects this mode of operation.
        -: 1100:
        -: 1101:   The special argument `--' forces an end of option-scanning regardless
        -: 1102:   of the value of `ordering'.  In the case of RETURN_IN_ORDER, only
        -: 1103:   `--' can cause `getopt' to return EOF with `optind' != ARGC.  */
        -: 1104:
        -: 1105:static enum
        -: 1106:{
        -: 1107:  REQUIRE_ORDER, PERMUTE, RETURN_IN_ORDER
        -: 1108:} ordering;
        -: 1109:
        -: 1110:#ifdef	__GNU_LIBRARY__
        -: 1111:#include <string.h>
        -: 1112:#define	my_index	strchr
        -: 1113:#define	my_bcopy(src, dst, n)	memcpy ((dst), (src), (n))
        -: 1114:#else
        -: 1115:
        -: 1116:/* Avoid depending on library functions or files
        -: 1117:   whose names are inconsistent.  */
        -: 1118:
        -: 1119:char *getenv ();
        -: 1120:
        -: 1121:static char *
        -: 1122:my_index (string, chr)
        -: 1123:     char *string;
        -: 1124:     int chr;
        -: 1125:{
        -: 1126:  while (*string)
        -: 1127:    {
        -: 1128:      if (*string == chr)
        -: 1129:	return string;
        -: 1130:      string++;
        -: 1131:    }
        -: 1132:  return 0;
        -: 1133:}
        -: 1134:
        -: 1135:static void
        -: 1136:my_bcopy (from, to, size)
        -: 1137:     char *from, *to;
        -: 1138:     int size;
        -: 1139:{
        -: 1140:  int i;
        -: 1141:  for (i = 0; i < size; i++)
        -: 1142:    to[i] = from[i];
        -: 1143:}
        -: 1144:#endif				/* GNU C library.  */
        -: 1145:
        -: 1146:/* Handle permutation of arguments.  */
        -: 1147:
        -: 1148:/* Describe the part of ARGV that contains non-options that have
        -: 1149:   been skipped.  `first_nonopt' is the index in ARGV of the first of them;
        -: 1150:   `last_nonopt' is the index after the last of them.  */
        -: 1151:
        -: 1152:static int first_nonopt;
        -: 1153:static int last_nonopt;
        -: 1154:
        -: 1155:/* Exchange two adjacent subsequences of ARGV.
        -: 1156:   One subsequence is elements [first_nonopt,last_nonopt)
        -: 1157:   which contains all the non-options that have been skipped so far.
        -: 1158:   The other is elements [last_nonopt,optind), which contains all
        -: 1159:   the options processed since those non-options were skipped.
        -: 1160:
        -: 1161:   `first_nonopt' and `last_nonopt' are relocated so that they describe
        -: 1162:   the new indices of the non-options in ARGV after they are moved.  */
        -: 1163:
        -: 1164:static void
       15: 1165:exchange (argv)
        -: 1166:     char **argv;
        -: 1167:{
       15: 1168:  int nonopts_size = (last_nonopt - first_nonopt) * sizeof (char *);
        -: 1169:#ifdef _CRAY
        -: 1170:  char *temp[last_nonopt - first_nonopt];
        -: 1171:#else
       15: 1172:  char **temp = (char **) __alloca (nonopts_size);
        -: 1173:#endif
        -: 1174:
        -: 1175:  /* Interchange the two blocks of data in ARGV.  */
        -: 1176:
       15: 1177:  my_bcopy ((char *) &argv[first_nonopt], (char *) temp, nonopts_size);
       15: 1178:  my_bcopy ((char *) &argv[last_nonopt], (char *) &argv[first_nonopt],
        -: 1179:	    (optind - last_nonopt) * sizeof (char *));
       15: 1180:  my_bcopy ((char *) temp,
        -: 1181:	    (char *) &argv[first_nonopt + optind - last_nonopt],
        -: 1182:	    nonopts_size);
        -: 1183:
        -: 1184:  /* Update records for the slots the non-options now occupy.  */
        -: 1185:
       15: 1186:  first_nonopt += (optind - last_nonopt);
       15: 1187:  last_nonopt = optind;
       15: 1188:}
        -: 1189:
        -: 1190:/* Scan elements of ARGV (whose length is ARGC) for option characters
        -: 1191:   given in OPTSTRING.
        -: 1192:
        -: 1193:   If an element of ARGV starts with '-', and is not exactly "-" or "--",
        -: 1194:   then it is an option element.  The characters of this element
        -: 1195:   (aside from the initial '-') are option characters.  If `getopt'
        -: 1196:   is called repeatedly, it returns successively each of the option characters
        -: 1197:   from each of the option elements.
        -: 1198:
        -: 1199:   If `getopt' finds another option character, it returns that character,
        -: 1200:   updating `optind' and `nextchar' so that the next call to `getopt' can
        -: 1201:   resume the scan with the following option character or ARGV-element.
        -: 1202:
        -: 1203:   If there are no more option characters, `getopt' returns `EOF'.
        -: 1204:   Then `optind' is the index in ARGV of the first ARGV-element
        -: 1205:   that is not an option.  (The ARGV-elements have been permuted
        -: 1206:   so that those that are not options now come last.)
        -: 1207:
        -: 1208:   OPTSTRING is a string containing the legitimate option characters.
        -: 1209:   If an option character is seen that is not listed in OPTSTRING,
        -: 1210:   return '?' after printing an error message.  If you set `opterr' to
        -: 1211:   zero, the error message is suppressed but we still return '?'.
        -: 1212:
        -: 1213:   If a char in OPTSTRING is followed by a colon, that means it wants an arg,
        -: 1214:   so the following text in the same ARGV-element, or the text of the following
        -: 1215:   ARGV-element, is returned in `optarg'.  Two colons mean an option that
        -: 1216:   wants an optional arg; if there is text in the current ARGV-element,
        -: 1217:   it is returned in `optarg', otherwise `optarg' is set to zero.
        -: 1218:
        -: 1219:   If OPTSTRING starts with `-' or `+', it requests different methods of
        -: 1220:   handling the non-option ARGV-elements.
        -: 1221:   See the comments about RETURN_IN_ORDER and REQUIRE_ORDER, above.
        -: 1222:
        -: 1223:   Long-named options begin with `--' instead of `-'.
        -: 1224:   Their names may be abbreviated as long as the abbreviation is unique
        -: 1225:   or is an exact match for some defined option.  If they have an
        -: 1226:   argument, it follows the option name in the same ARGV-element, separated
        -: 1227:   from the option name by a `=', or else the in next ARGV-element.
        -: 1228:   When `getopt' finds a long-named option, it returns 0 if that option's
        -: 1229:   `flag' field is nonzero, the value of the option's `val' field
        -: 1230:   if the `flag' field is zero.
        -: 1231:
        -: 1232:   The elements of ARGV aren't really const, because we permute them.
        -: 1233:   But we pretend they're const in the prototype to be compatible
        -: 1234:   with other systems.
        -: 1235:
        -: 1236:   LONGOPTS is a vector of `struct option' terminated by an
        -: 1237:   element containing a name which is zero.
        -: 1238:
        -: 1239:   LONGIND returns the index in LONGOPT of the long-named option found.
        -: 1240:   It is only valid when a long-named option has been found by the most
        -: 1241:   recent call.
        -: 1242:
        -: 1243:   If LONG_ONLY is nonzero, '-' as well as '--' can introduce
        -: 1244:   long-named options.  */
        -: 1245:
        -: 1246:int
      518: 1247:_getopt_internal (argc, argv, optstring, longopts, longind, long_only)
        -: 1248:     int argc;
        -: 1249:     char *const *argv;
        -: 1250:     const char *optstring;
        -: 1251:     const struct option *longopts;
        -: 1252:     int *longind;
        -: 1253:     int long_only;
        -: 1254:{
        -: 1255:  int option_index;
        -: 1256:
      518: 1257:  optarg = 0;
        -: 1258:
        -: 1259:  /* Initialize the internal data when the first call is made.
        -: 1260:     Start processing options with ARGV-element 1 (since ARGV-element 0
        -: 1261:     is the program name); the sequence of previously skipped
        -: 1262:     non-option ARGV-elements is empty.  */
        -: 1263:
      518: 1264:  if (optind == 0)
        -: 1265:    {
      211: 1266:      first_nonopt = last_nonopt = optind = 1;
        -: 1267:
      211: 1268:      nextchar = NULL;
        -: 1269:
        -: 1270:      /* Determine how to handle the ordering of options and nonoptions.  */
        -: 1271:
      211: 1272:      if (optstring[0] == '-')
        -: 1273:	{
    #####: 1274:	  ordering = RETURN_IN_ORDER;
    #####: 1275:	  ++optstring;
        -: 1276:	}
      211: 1277:      else if (optstring[0] == '+')
        -: 1278:	{
    #####: 1279:	  ordering = REQUIRE_ORDER;
    #####: 1280:	  ++optstring;
        -: 1281:	}
      211: 1282:      else if (getenv ("POSIXLY_CORRECT") != NULL)
    #####: 1283:	ordering = REQUIRE_ORDER;
        -: 1284:      else
      211: 1285:	ordering = PERMUTE;
        -: 1286:    }
        -: 1287:
      518: 1288:  if (nextchar == NULL || *nextchar == '\0')
        -: 1289:    {
      325: 1290:      if (ordering == PERMUTE)
        -: 1291:	{
        -: 1292:	  /* If we have just processed some options following some non-options,
        -: 1293:	     exchange them so that the options come first.  */
        -: 1294:
      325: 1295:	  if (first_nonopt != last_nonopt && last_nonopt != optind)
       15: 1296:	    exchange ((char **) argv);
      310: 1297:	  else if (last_nonopt != optind)
       99: 1298:	    first_nonopt = optind;
        -: 1299:
        -: 1300:	  /* Now skip any additional non-options
        -: 1301:	     and extend the range of non-options previously skipped.  */
        -: 1302:
      666: 1303:	  while (optind < argc
      219: 1304:		 && (argv[optind][0] != '-' || argv[optind][1] == '\0')
        -: 1305:#ifdef GETOPT_COMPAT
       16: 1306:		 && (longopts == NULL
       16: 1307:		     || argv[optind][0] != '+' || argv[optind][1] == '\0')
        -: 1308:#endif				/* GETOPT_COMPAT */
        -: 1309:		 )
       16: 1310:	    optind++;
      325: 1311:	  last_nonopt = optind;
        -: 1312:	}
        -: 1313:
        -: 1314:      /* Special ARGV-element `--' means premature end of options.
        -: 1315:	 Skip it like a null option,
        -: 1316:	 then exchange with previous non-options as if it were an option,
        -: 1317:	 then skip everything else like a non-option.  */
        -: 1318:
      325: 1319:      if (optind != argc && !strcmp (argv[optind], "--"))
        -: 1320:	{
    #####: 1321:	  optind++;
        -: 1322:
    #####: 1323:	  if (first_nonopt != last_nonopt && last_nonopt != optind)
    #####: 1324:	    exchange ((char **) argv);
    #####: 1325:	  else if (first_nonopt == last_nonopt)
    #####: 1326:	    first_nonopt = optind;
    #####: 1327:	  last_nonopt = argc;
        -: 1328:
    #####: 1329:	  optind = argc;
        -: 1330:	}
        -: 1331:
        -: 1332:      /* If we have done all the ARGV-elements, stop the scan
        -: 1333:	 and back over any non-options that we skipped and permuted.  */
        -: 1334:
      325: 1335:      if (optind == argc)
        -: 1336:	{
        -: 1337:	  /* Set the next-arg-index to point at the non-options
        -: 1338:	     that we previously skipped, so the caller will digest them.  */
      122: 1339:	  if (first_nonopt != last_nonopt)
       15: 1340:	    optind = first_nonopt;
      122: 1341:	  return EOF;
        -: 1342:	}
        -: 1343:
        -: 1344:      /* If we have come to a non-option and did not permute it,
        -: 1345:	 either stop the scan or describe it to the caller and pass it by.  */
        -: 1346:
      203: 1347:      if ((argv[optind][0] != '-' || argv[optind][1] == '\0')
        -: 1348:#ifdef GETOPT_COMPAT
    #####: 1349:	  && (longopts == NULL
    #####: 1350:	      || argv[optind][0] != '+' || argv[optind][1] == '\0')
        -: 1351:#endif				/* GETOPT_COMPAT */
        -: 1352:	  )
        -: 1353:	{
    #####: 1354:	  if (ordering == REQUIRE_ORDER)
    #####: 1355:	    return EOF;
    #####: 1356:	  optarg = argv[optind++];
    #####: 1357:	  return 1;
        -: 1358:	}
        -: 1359:
        -: 1360:      /* We have found another option-ARGV-element.
        -: 1361:	 Start decoding its characters.  */
        -: 1362:
      406: 1363:      nextchar = (argv[optind] + 1
      203: 1364:		  + (longopts != NULL && argv[optind][1] == '-'));
        -: 1365:    }
        -: 1366:
      396: 1367:  if (longopts != NULL
      396: 1368:      && ((argv[optind][0] == '-'
      396: 1369:	   && (argv[optind][1] == '-' || long_only))
        -: 1370:#ifdef GETOPT_COMPAT
      383: 1371:	  || argv[optind][0] == '+'
        -: 1372:#endif				/* GETOPT_COMPAT */
        -: 1373:	  ))
        -: 1374:    {
        -: 1375:      const struct option *p;
       13: 1376:      char *s = nextchar;
       13: 1377:      int exact = 0;
       13: 1378:      int ambig = 0;
       13: 1379:      const struct option *pfound = NULL;
       13: 1380:      int indfound = 0;
        -: 1381:
      106: 1382:      while (*s && *s != '=')
       80: 1383:	s++;
        -: 1384:
        -: 1385:      /* Test all options for either exact match or abbreviated matches.  */
      141: 1386:      for (p = longopts, option_index = 0; p->name;
      115: 1387:	   p++, option_index++)
      128: 1388:	if (!strncmp (p->name, nextchar, s - nextchar))
        -: 1389:	  {
       13: 1390:	    if (s - nextchar == strlen (p->name))
        -: 1391:	      {
        -: 1392:		/* Exact match found.  */
       13: 1393:		pfound = p;
       13: 1394:		indfound = option_index;
       13: 1395:		exact = 1;
       13: 1396:		break;
        -: 1397:	      }
    #####: 1398:	    else if (pfound == NULL)
        -: 1399:	      {
        -: 1400:		/* First nonexact match found.  */
    #####: 1401:		pfound = p;
    #####: 1402:		indfound = option_index;
        -: 1403:	      }
        -: 1404:	    else
        -: 1405:	      /* Second nonexact match found.  */
    #####: 1406:	      ambig = 1;
        -: 1407:	  }
        -: 1408:
       13: 1409:      if (ambig && !exact)
        -: 1410:	{
    #####: 1411:	  if (opterr)
    #####: 1412:	    fprintf (stderr, "%s: option `%s' is ambiguous\n",
    #####: 1413:		     argv[0], argv[optind]);
    #####: 1414:	  nextchar += strlen (nextchar);
    #####: 1415:	  optind++;
    #####: 1416:	  return '?';
        -: 1417:	}
        -: 1418:
       13: 1419:      if (pfound != NULL)
        -: 1420:	{
       13: 1421:	  option_index = indfound;
       13: 1422:	  optind++;
       13: 1423:	  if (*s)
        -: 1424:	    {
        -: 1425:	      /* Don't test has_arg with >, because some C compilers don't
        -: 1426:		 allow it to be used on enums.  */
    #####: 1427:	      if (pfound->has_arg)
    #####: 1428:		optarg = s + 1;
        -: 1429:	      else
        -: 1430:		{
    #####: 1431:		  if (opterr)
        -: 1432:		    {
    #####: 1433:		      if (argv[optind - 1][1] == '-')
        -: 1434:			/* --option */
    #####: 1435:			fprintf (stderr,
        -: 1436:				 "%s: option `--%s' doesn't allow an argument\n",
        -: 1437:				 argv[0], pfound->name);
        -: 1438:		      else
        -: 1439:			/* +option or -option */
    #####: 1440:			fprintf (stderr,
        -: 1441:			     "%s: option `%c%s' doesn't allow an argument\n",
    #####: 1442:			     argv[0], argv[optind - 1][0], pfound->name);
        -: 1443:		    }
    #####: 1444:		  nextchar += strlen (nextchar);
    #####: 1445:		  return '?';
        -: 1446:		}
        -: 1447:	    }
       13: 1448:	  else if (pfound->has_arg == 1)
        -: 1449:	    {
    #####: 1450:	      if (optind < argc)
    #####: 1451:		optarg = argv[optind++];
        -: 1452:	      else
        -: 1453:		{
    #####: 1454:		  if (opterr)
    #####: 1455:		    fprintf (stderr, "%s: option `%s' requires an argument\n",
    #####: 1456:			     argv[0], argv[optind - 1]);
    #####: 1457:		  nextchar += strlen (nextchar);
    #####: 1458:		  return '?';
        -: 1459:		}
        -: 1460:	    }
       13: 1461:	  nextchar += strlen (nextchar);
       13: 1462:	  if (longind != NULL)
    #####: 1463:	    *longind = option_index;
       13: 1464:	  if (pfound->flag)
        -: 1465:	    {
    #####: 1466:	      *(pfound->flag) = pfound->val;
    #####: 1467:	      return 0;
        -: 1468:	    }
       13: 1469:	  return pfound->val;
        -: 1470:	}
        -: 1471:      /* Can't find it as a long option.  If this is not getopt_long_only,
        -: 1472:	 or the option starts with '--' or is not a valid short
        -: 1473:	 option, then it's an error.
        -: 1474:	 Otherwise interpret it as a short option.  */
    #####: 1475:      if (!long_only || argv[optind][1] == '-'
        -: 1476:#ifdef GETOPT_COMPAT
    #####: 1477:	  || argv[optind][0] == '+'
        -: 1478:#endif				/* GETOPT_COMPAT */
    #####: 1479:	  || my_index ((char*)optstring, *nextchar) == NULL)
        -: 1480:	{
    #####: 1481:	  if (opterr)
        -: 1482:	    {
    #####: 1483:	      if (argv[optind][1] == '-')
        -: 1484:		/* --option */
    #####: 1485:		fprintf (stderr, "%s: unrecognized option `--%s'\n",
        -: 1486:			 argv[0], nextchar);
        -: 1487:	      else
        -: 1488:		/* +option or -option */
    #####: 1489:		fprintf (stderr, "%s: unrecognized option `%c%s'\n",
    #####: 1490:			 argv[0], argv[optind][0], nextchar);
        -: 1491:	    }
    #####: 1492:	  nextchar = (char *) "";
    #####: 1493:	  optind++;
    #####: 1494:	  return '?';
        -: 1495:	}
        -: 1496:    }
        -: 1497:
        -: 1498:  /* Look at and handle the next option-character.  */
        -: 1499:
        -: 1500:  {
      383: 1501:    char c = *nextchar++;
      383: 1502:    char *temp = my_index ((char*)optstring, c);
        -: 1503:
        -: 1504:    /* Increment `optind' when we start to process its last character.  */
      383: 1505:    if (*nextchar == '\0')
      114: 1506:      ++optind;
        -: 1507:
      383: 1508:    if (temp == NULL || c == ':')
        -: 1509:      {
    #####: 1510:	if (opterr)
        -: 1511:	  {
    #####: 1512:	    if (c < 040 || c >= 0177)
    #####: 1513:	      fprintf (stderr, "%s: unrecognized option, character code 0%o\n",
        -: 1514:		       argv[0], c);
        -: 1515:	    else
    #####: 1516:	      fprintf (stderr, "%s: unrecognized option `-%c'\n", argv[0], c);
        -: 1517:	  }
    #####: 1518:	return '?';
        -: 1519:      }
      383: 1520:    if (temp[1] == ':')
        -: 1521:      {
    #####: 1522:	if (temp[2] == ':')
        -: 1523:	  {
        -: 1524:	    /* This is an option that accepts an argument optionally.  */
    #####: 1525:	    if (*nextchar != '\0')
        -: 1526:	      {
    #####: 1527:		optarg = nextchar;
    #####: 1528:		optind++;
        -: 1529:	      }
        -: 1530:	    else
    #####: 1531:	      optarg = 0;
    #####: 1532:	    nextchar = NULL;
        -: 1533:	  }
        -: 1534:	else
        -: 1535:	  {
        -: 1536:	    /* This is an option that requires an argument.  */
    #####: 1537:	    if (*nextchar != '\0')
        -: 1538:	      {
    #####: 1539:		optarg = nextchar;
        -: 1540:		/* If we end this ARGV-element by taking the rest as an arg,
        -: 1541:		   we must advance to the next element now.  */
    #####: 1542:		optind++;
        -: 1543:	      }
    #####: 1544:	    else if (optind == argc)
        -: 1545:	      {
    #####: 1546:		if (opterr)
    #####: 1547:		  fprintf (stderr, "%s: option `-%c' requires an argument\n",
        -: 1548:			   argv[0], c);
    #####: 1549:		c = '?';
        -: 1550:	      }
        -: 1551:	    else
        -: 1552:	      /* We already incremented `optind' once;
        -: 1553:		 increment it again when taking next ARGV-elt as argument.  */
    #####: 1554:	      optarg = argv[optind++];
    #####: 1555:	    nextchar = NULL;
        -: 1556:	  }
        -: 1557:      }
      383: 1558:    return c;
        -: 1559:  }
        -: 1560:}
        -: 1561:
        -: 1562:int
    #####: 1563:getopt (argc, argv, optstring)
        -: 1564:     int argc;
        -: 1565:     char *const *argv;
        -: 1566:     const char *optstring;
        -: 1567:{
    #####: 1568:  return _getopt_internal (argc, argv, optstring,
        -: 1569:			   (const struct option *) 0,
        -: 1570:			   (int *) 0,
        -: 1571:			   0);
        -: 1572:}
        -: 1573:
        -: 1574:int
      518: 1575:getopt_long (argc, argv, options, long_options, opt_index)
        -: 1576:     int argc;
        -: 1577:     char *const *argv;
        -: 1578:     const char *options;
        -: 1579:     const struct option *long_options;
        -: 1580:     int *opt_index;
        -: 1581:{
      518: 1582:  return _getopt_internal (argc, argv, options, long_options, opt_index, 0);
        -: 1583:}
        -: 1584:
        -: 1585:/* Like getopt_long, but '-' as well as '--' can indicate a long option.
        -: 1586:   If an option that starts with '-' (not '--') doesn't match a long option,
        -: 1587:   but does match a short option, it is parsed as a short option
        -: 1588:   instead. */
        -: 1589:
        -: 1590:int 
    #####: 1591:getopt_long_only (argc, argv, options, long_options, opt_index)
        -: 1592:     int argc;
        -: 1593:     char *const *argv;
        -: 1594:     const char *options;
        -: 1595:     const struct option *long_options;
        -: 1596:     int *opt_index;
        -: 1597:{
    #####: 1598:  return _getopt_internal (argc, argv, options, long_options, opt_index, 1);
        -: 1599:}
        -: 1600:
        -: 1601:
        -: 1602:#ifdef TEST
        -: 1603:
        -: 1604:/* Compile with -DTEST to make an executable for use in testing
        -: 1605:   the above definition of `getopt'.  */
        -: 1606:
        -: 1607:int
        -: 1608:main (argc, argv)
        -: 1609:     int argc;
        -: 1610:     char **argv;
        -: 1611:{
        -: 1612:  int c;
        -: 1613:  int digit_optind = 0;
        -: 1614:
        -: 1615:  while (1)
        -: 1616:    {
        -: 1617:      int this_option_optind = optind ? optind : 1;
        -: 1618:
        -: 1619:      c = getopt (argc, argv, "abc:d:0123456789");
        -: 1620:      if (c == EOF)
        -: 1621:	break;
        -: 1622:
        -: 1623:      switch (c)
        -: 1624:	{
        -: 1625:	case '0':
        -: 1626:	case '1':
        -: 1627:	case '2':
        -: 1628:	case '3':
        -: 1629:	case '4':
        -: 1630:	case '5':
        -: 1631:	case '6':
        -: 1632:	case '7':
        -: 1633:	case '8':
        -: 1634:	case '9':
        -: 1635:	  if (digit_optind != 0 && digit_optind != this_option_optind)
        -: 1636:	    printf ("digits occur in two different argv-elements.\n");
        -: 1637:	  digit_optind = this_option_optind;
        -: 1638:	  printf ("option %c\n", c);
        -: 1639:	  break;
        -: 1640:
        -: 1641:	case 'a':
        -: 1642:	  printf ("option a\n");
        -: 1643:	  break;
        -: 1644:
        -: 1645:	case 'b':
        -: 1646:	  printf ("option b\n");
        -: 1647:	  break;
        -: 1648:
        -: 1649:	case 'c':
        -: 1650:	  printf ("option c with value `%s'\n", optarg);
        -: 1651:	  break;
        -: 1652:
        -: 1653:	case '?':
        -: 1654:	  break;
        -: 1655:
        -: 1656:	default:
        -: 1657:	  printf ("?? getopt returned character code 0%o ??\n", c);
        -: 1658:	}
        -: 1659:    }
        -: 1660:
        -: 1661:  if (optind < argc)
        -: 1662:    {
        -: 1663:      printf ("non-option ARGV-elements: ");
        -: 1664:      while (optind < argc)
        -: 1665:	printf ("%s ", argv[optind++]);
        -: 1666:      printf ("\n");
        -: 1667:    }
        -: 1668:
        -: 1669:  exit (0);
        -: 1670:}
        -: 1671:
        -: 1672:#endif /* TEST */
        -: 1673:/* gzip (GNU zip) -- compress files with zip algorithm and 'compress' interface
        -: 1674: * Copyright (C) 1992-1993 Jean-loup Gailly
        -: 1675: * The unzip code was written and put in the public domain by Mark Adler.
        -: 1676: * Portions of the lzw code are derived from the public domain 'compress'
        -: 1677: * written by Spencer Thomas, Joe Orost, James Woods, Jim McKie, Steve Davies,
        -: 1678: * Ken Turkowski, Dave Mack and Peter Jannesen.
        -: 1679: *
        -: 1680: * See the license_msg below and the file COPYING for the software license.
        -: 1681: * See the file algorithm.doc for the compression algorithms and file formats.
        -: 1682: */
        -: 1683:
        -: 1684:static char  *license_msg[] = {
        -: 1685:"   Copyright (C) 1992-1993 Jean-loup Gailly",
        -: 1686:"   This program is free software; you can redistribute it and/or modify",
        -: 1687:"   it under the terms of the GNU General Public License as published by",
        -: 1688:"   the Free Software Foundation; either version 2, or (at your option)",
        -: 1689:"   any later version.",
        -: 1690:"",
        -: 1691:"   This program is distributed in the hope that it will be useful,",
        -: 1692:"   but WITHOUT ANY WARRANTY; without even the implied warranty of",
        -: 1693:"   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
        -: 1694:"   GNU General Public License for more details.",
        -: 1695:"",
        -: 1696:"   You should have received a copy of the GNU General Public License",
        -: 1697:"   along with this program; if not, write to the Free Software",
        -: 1698:"   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.",
        -: 1699:0};
        -: 1700:
        -: 1701:/* Compress files with zip algorithm and 'compress' interface.
        -: 1702: * See usage() and help() functions below for all options.
        -: 1703: * Outputs:
        -: 1704: *        file.gz:   compressed file with same mode, owner, and utimes
        -: 1705: *     or stdout with -c option or if stdin used as input.
        -: 1706: * If the OS does not support file names with multiple dots (MSDOS, VMS) or
        -: 1707: * if the output file name had to be truncated, the original name is kept
        -: 1708: * in the compressed file.
        -: 1709: * On MSDOS, file.tmp -> file.tmz. On VMS, file.tmp -> file.tmp-gz.
        -: 1710: *
        -: 1711: * For the meaning of all compilation flags, see comments in Makefile.in.
        -: 1712: */
        -: 1713:
        -: 1714:/*
        -: 1715:#ifndef lint
        -: 1716:static char rcsid[] = "$Id: gzip.c,v 0.19 1993/06/01 14:21:46 jloup Exp $";
        -: 1717:#endif
        -: 1718:*/
        -: 1719:
        -: 1720:		/* configuration */
        -: 1721:
        -: 1722:#ifndef NO_FCNTL_H
        -: 1723:#  include <fcntl.h>
        -: 1724:#endif
        -: 1725:
        -: 1726:#ifdef HAVE_UNISTD_H
        -: 1727:#  include <unistd.h>
        -: 1728:#endif
        -: 1729:
        -: 1730:#if defined(STDC_HEADERS) || !defined(NO_STDLIB_H)
        -: 1731:#  include <stdlib.h>
        -: 1732:#else
        -: 1733:   extern int errno;
        -: 1734:#endif
        -: 1735:
        -: 1736:#if defined(DIRENT)
        -: 1737:#  include <dirent.h>
        -: 1738:   typedef struct dirent dir_type;
        -: 1739:#  define NLENGTH(dirent) ((int)strlen((dirent)->d_name))
        -: 1740:#  define DIR_OPT "DIRENT"
        -: 1741:#else
        -: 1742:#  define NLENGTH(dirent) ((dirent)->d_namlen)
        -: 1743:#  ifdef SYSDIR
        -: 1744:#    include <sys/dir.h>
        -: 1745:     typedef struct direct dir_type;
        -: 1746:#    define DIR_OPT "SYSDIR"
        -: 1747:#  else
        -: 1748:#    ifdef SYSNDIR
        -: 1749:#      include <sys/ndir.h>
        -: 1750:       typedef struct direct dir_type;
        -: 1751:#      define DIR_OPT "SYSNDIR"
        -: 1752:#    else
        -: 1753:#      ifdef NDIR
        -: 1754:#        include <ndir.h>
        -: 1755:         typedef struct direct dir_type;
        -: 1756:#        define DIR_OPT "NDIR"
        -: 1757:#      else
        -: 1758:#        define NO_DIR
        -: 1759:#        define DIR_OPT "NO_DIR"
        -: 1760:#      endif
        -: 1761:#    endif
        -: 1762:#  endif
        -: 1763:#endif
        -: 1764:
        -: 1765:#ifndef NO_UTIME
        -: 1766:#  ifndef NO_UTIME_H
        -: 1767:#    include <utime.h>
        -: 1768:#    define TIME_OPT "UTIME"
        -: 1769:#  else
        -: 1770:#    ifdef HAVE_SYS_UTIME_H
        -: 1771:#      include <sys/utime.h>
        -: 1772:#      define TIME_OPT "SYS_UTIME"
        -: 1773:#    else
        -: 1774:       struct utimbuf {
        -: 1775:         time_t actime;
        -: 1776:         time_t modtime;
        -: 1777:       };
        -: 1778:#      define TIME_OPT ""
        -: 1779:#    endif
        -: 1780:#  endif
        -: 1781:#else
        -: 1782:#  define TIME_OPT "NO_UTIME"
        -: 1783:#endif
        -: 1784:
        -: 1785:#if !defined(S_ISDIR) && defined(S_IFDIR)
        -: 1786:#  define S_ISDIR(m) (((m) & S_IFMT) == S_IFDIR)
        -: 1787:#endif
        -: 1788:#if !defined(S_ISREG) && defined(S_IFREG)
        -: 1789:#  define S_ISREG(m) (((m) & S_IFMT) == S_IFREG)
        -: 1790:#endif
        -: 1791:
        -: 1792:typedef RETSIGTYPE (*sig_type) OF((int));
        -: 1793:
        -: 1794:#ifndef	O_BINARY
        -: 1795:#  define  O_BINARY  0  /* creation mode for open() */
        -: 1796:#endif
        -: 1797:
        -: 1798:#ifndef O_CREAT
        -: 1799:   /* Pure BSD system? */
        -: 1800:#  include <sys/file.h>
        -: 1801:#  ifndef O_CREAT
        -: 1802:#    define O_CREAT FCREAT
        -: 1803:#  endif
        -: 1804:#  ifndef O_EXCL
        -: 1805:#    define O_EXCL FEXCL
        -: 1806:#  endif
        -: 1807:#endif
        -: 1808:
        -: 1809:#ifndef S_IRUSR
        -: 1810:#  define S_IRUSR 0400
        -: 1811:#endif
        -: 1812:#ifndef S_IWUSR
        -: 1813:#  define S_IWUSR 0200
        -: 1814:#endif
        -: 1815:#define RW_USER (S_IRUSR | S_IWUSR)  /* creation mode for open() */
        -: 1816:
        -: 1817:#ifndef MAX_PATH_LEN
        -: 1818:#  define MAX_PATH_LEN   1024 /* max pathname length */
        -: 1819:#endif
        -: 1820:
        -: 1821:#define MAX_HEADER_LEN   16
        -: 1822:/* max length of a compressed file header, fixed part only */
        -: 1823:
        -: 1824:		/* global buffers */
        -: 1825:
        -: 1826:DECLARE(uch, inbuf,  INBUFSIZ +INBUF_EXTRA);
        -: 1827:DECLARE(uch, outbuf, OUTBUFSIZ+OUTBUF_EXTRA);
        -: 1828:DECLARE(ush, d_buf,  DIST_BUFSIZE);
        -: 1829:DECLARE(uch, window, 2L*WSIZE);
        -: 1830:#ifndef MAXSEG_64K
        -: 1831:    DECLARE(ush, tab_prefix, 1L<<BITS);
        -: 1832:#else
        -: 1833:    DECLARE(ush, tab_prefix0, 1L<<(BITS-1));
        -: 1834:    DECLARE(ush, tab_prefix1, 1L<<(BITS-1));
        -: 1835:#endif
        -: 1836:
        -: 1837:		/* local variables */
        -: 1838:
        -: 1839:int ascii = 0;        /* convert end-of-lines to local OS conventions */
        -: 1840:int to_stdout = 0;    /* output to stdout (-c) */
        -: 1841:int decompress = 0;   /* decompress (-d) */
        -: 1842:int force = 0;        /* don't ask questions, compress links (-f) */
        -: 1843:int recursive = 0;    /* recurse through directories (-r) */
        -: 1844:int verbose = 0;      /* be verbose (-v) */
        -: 1845:int quiet = 0;        /* be very quiet (-q) */
        -: 1846:int do_lzw = 0;       /* generate output compatible with old compress (-Z) */
        -: 1847:int test = 0;         /* test .gz file integrity */
        -: 1848:int foreground;       /* set if program run in foreground */
        -: 1849:char *progname;       /* program name */
        -: 1850:int maxbits = BITS;   /* max bits per code for LZW */
        -: 1851:int method = DEFLATED;/* compression method */
        -: 1852:int level = 5;        /* compression level */
        -: 1853:int exit_code = OK;   /* program exit code */
        -: 1854:int save_orig_name;   /* set if original name must be saved */
        -: 1855:int last_member;      /* set for .zip and .Z files */
        -: 1856:int part_nb;          /* number of parts in .gz file */
        -: 1857:ulg time_stamp;       /* original time stamp (modification time) */
        -: 1858:long ifile_size;      /* input file size, -1 for devices (debug only) */
        -: 1859:char *env;            /* contents of GZIP env variable */
        -: 1860:char **args = NULL;   /* argv pointer if GZIP env variable defined */
        -: 1861:char z_suffix[MAX_SUFFIX+1]; /* default suffix (can be set with --suffix) */
        -: 1862:int  z_len;           /* strlen(z_suffix) */
        -: 1863:
        -: 1864:long bytes_in;             /* number of input bytes */
        -: 1865:long bytes_out;            /* number of output bytes */
        -: 1866:char ifname[MAX_PATH_LEN]; /* input file name */
        -: 1867:char ofname[MAX_PATH_LEN]; /* output file name */
        -: 1868:int  remove_ofname = 0;	   /* remove output file on error */
        -: 1869:struct stat istat;         /* status for input file */
        -: 1870:int  ifd;                  /* input file descriptor */
        -: 1871:int  ofd;                  /* output file descriptor */
        -: 1872:unsigned insize;           /* valid bytes in inbuf */
        -: 1873:unsigned inptr;            /* index of next byte to be processed in inbuf */
        -: 1874:unsigned outcnt;           /* bytes in output buffer */
        -: 1875:
        -: 1876:struct option longopts[] =
        -: 1877:{
        -: 1878: /* { name  has_arg  *flag  val } */
        -: 1879:    {"ascii",      0, 0, 'a'}, /* ascii text mode */
        -: 1880:    {"to-stdout",  0, 0, 'c'}, /* write output on standard output */
        -: 1881:    {"stdout",     0, 0, 'c'}, /* write output on standard output */
        -: 1882:    {"decompress", 0, 0, 'd'}, /* decompress */
        -: 1883:    {"uncompress", 0, 0, 'd'}, /* decompress */
        -: 1884: /* {"encrypt",    0, 0, 'e'},    encrypt */
        -: 1885:    {"force",      0, 0, 'f'}, /* force overwrite of output file */
        -: 1886:    {"help",       0, 0, 'h'}, /* give help */
        -: 1887: /* {"pkzip",      0, 0, 'k'},    force output in pkzip format */
        -: 1888: /* {"list",       0, 0, 'l'},    list .gz file contents */
        -: 1889:    {"license",    0, 0, 'L'}, /* display software license */
        -: 1890:    {"quiet",      0, 0, 'q'}, /* quiet mode */
        -: 1891:    {"silent",     0, 0, 'q'}, /* quiet mode */
        -: 1892:    {"recurse",    0, 0, 'r'}, /* recurse through directories */
        -: 1893:    {"suffix",     1, 0, 'S'}, /* use given suffix instead of .gz */
        -: 1894:    {"test",       0, 0, 't'}, /* test compressed file integrity */
        -: 1895:    {"verbose",    0, 0, 'v'}, /* verbose mode */
        -: 1896:    {"version",    0, 0, 'V'}, /* display version number */
        -: 1897:    {"fast",       0, 0, '1'}, /* compress faster */
        -: 1898:    {"best",       0, 0, '9'}, /* compress better */
        -: 1899:    {"lzw",        0, 0, 'Z'}, /* make output compatible with old compress */
        -: 1900:    {"bits",       1, 0, 'b'}, /* max number of bits per code (implies -Z) */
        -: 1901:    { 0, 0, 0, 0 }
        -: 1902:};
        -: 1903:
        -: 1904:/* local functions */
        -: 1905:
        -: 1906:local void usage        OF((void));
        -: 1907:local void help         OF((void));
        -: 1908:local void license      OF((void));
        -: 1909:local void version      OF((void));
        -: 1910:local void treat_stdin  OF((void));
        -: 1911:local void treat_file   OF((char *iname));
        -: 1912:local int create_outfile OF((void));
        -: 1913:local int  do_stat      OF((char *name, struct stat *sbuf));
        -: 1914:local char *get_suffix  OF((char *name));
        -: 1915:local int  get_istat    OF((char *iname, struct stat *sbuf));
        -: 1916:local int  make_ofname  OF((void));
        -: 1917:local int  same_file    OF((struct stat *stat1, struct stat *stat2));
        -: 1918:local int name_too_long OF((char *name, struct stat *statb));
        -: 1919:local int  get_method   OF((int in));
        -: 1920:local int  check_ofname OF((void));
        -: 1921:local void reset_times  OF((char *name, struct stat *statb));
        -: 1922:local void copy_stat    OF((struct stat *ifstat));
        -: 1923:local void treat_dir    OF((char *dir));
        -: 1924:local void do_exit      OF((int exitcode));
        -: 1925:      int main          OF((int argc, char **argv));
        -: 1926:
        -: 1927:int (*work) OF((int infile, int outfile)) = zip; /* function to call */
        -: 1928:
        -: 1929:#define strequ(s1, s2) (strcmp((s1),(s2)) == 0)
        -: 1930:
        -: 1931:/* ======================================================================== */
       85: 1932:local void usage()
        -: 1933:{
       85: 1934:    fprintf(stderr, "usage: %s [-%scdfhL%stvV19] [-S suffix] [file ...]\n",
        -: 1935:	    progname,
        -: 1936:#if O_BINARY
        -: 1937:	    "a",
        -: 1938:#else
        -: 1939:	    "",
        -: 1940:#endif
        -: 1941:#ifdef NO_DIR
        -: 1942:	    ""
        -: 1943:#else
        -: 1944:	    "r"
        -: 1945:#endif
        -: 1946:	    );
       85: 1947:}
        -: 1948:
        -: 1949:/* ======================================================================== */
        2: 1950:local void help()
        -: 1951:{
        -: 1952:    static char  *help_msg[] = {
        -: 1953:#if O_BINARY
        -: 1954: " -a --ascii       ascii text; convert end-of-lines using local conventions",
        -: 1955:#endif
        -: 1956: " -c --stdout      write on standard output, keep original files unchanged",
        -: 1957: " -d --decompress  decompress",
        -: 1958:/* -e --encrypt     encrypt */
        -: 1959: " -f --force       force overwrite of output file and compress links",
        -: 1960: " -h --help        give this help",
        -: 1961:/* -k --pkzip       force output in pkzip format */
        -: 1962:/* -l --list        list .gz file contents */
        -: 1963: " -L --license     display software license",
        -: 1964: " -q --quiet       suppress all warnings",
        -: 1965:#ifndef NO_DIR
        -: 1966: " -r --recurse     recurse through directories",
        -: 1967:#endif
        -: 1968:#ifdef MAX_EXT_CHARS
        -: 1969: " -S .suf  --suffix .suf     use suffix .suf instead of .z",
        -: 1970:#else
        -: 1971: " -S .suf  --suffix .suf     use suffix .suf instead of .gz",
        -: 1972:#endif
        -: 1973: " -t --test        test compressed file integrity",
        -: 1974: " -v --verbose     verbose mode",
        -: 1975: " -V --version     display version number",
        -: 1976: " -1 --fast        compress faster",
        -: 1977: " -9 --best        compress better",
        -: 1978:#ifdef LZW
        -: 1979: " -Z --lzw         produce output compatible with old compress",
        -: 1980: " -b --bits maxbits   max number of bits per code (implies -Z)",
        -: 1981:#endif
        -: 1982: " file...          files to (de)compress. If none given, use standard input.",
        -: 1983:  0};
        2: 1984:    char **p = help_msg;
        -: 1985:
        2: 1986:    fprintf(stderr,"%s %s (%s)\n", progname, VERSION, REVDATE);
        2: 1987:    usage();
        2: 1988:    while (*p) fprintf(stderr, "%s\n", *p++);
        2: 1989:}
        -: 1990:
        -: 1991:/* ======================================================================== */
        2: 1992:local void license()
        -: 1993:{
        2: 1994:    char **p = license_msg;
        -: 1995:
        2: 1996:    fprintf(stderr,"%s %s (%s)\n", progname, VERSION, REVDATE);
        2: 1997:    while (*p) fprintf(stderr, "%s\n", *p++);
        2: 1998:}
        -: 1999:
        -: 2000:/* ======================================================================== */
        2: 2001:local void version()
        -: 2002:{
        2: 2003:    fprintf(stderr,"%s %s (%s)\n", progname, VERSION, REVDATE);
        -: 2004:
        2: 2005:    fprintf(stderr, "Compilation options:\n%s %s ", DIR_OPT, TIME_OPT);
        -: 2006:#ifdef STDC_HEADERS
        -: 2007:    fprintf(stderr, "STDC_HEADERS ");
        -: 2008:#endif
        -: 2009:#ifdef HAVE_UNISTD_H
        -: 2010:    fprintf(stderr, "HAVE_UNISTD_H ");
        -: 2011:#endif
        -: 2012:#ifdef NO_MEMORY_H
        -: 2013:    fprintf(stderr, "NO_MEMORY_H ");
        -: 2014:#endif
        -: 2015:#ifdef NO_STRING_H
        -: 2016:    fprintf(stderr, "NO_STRING_H ");
        -: 2017:#endif
        -: 2018:#ifdef NO_SYMLINK
        -: 2019:    fprintf(stderr, "NO_SYMLINK ");
        -: 2020:#endif
        -: 2021:#ifdef NO_MULTIPLE_DOTS
        -: 2022:    fprintf(stderr, "NO_MULTIPLE_DOTS ");
        -: 2023:#endif
        -: 2024:#ifdef NO_CHOWN
        -: 2025:    fprintf(stderr, "NO_CHOWN ");
        -: 2026:#endif
        -: 2027:#ifdef PROTO
        -: 2028:    fprintf(stderr, "PROTO ");
        -: 2029:#endif
        -: 2030:#ifdef ASMV
        -: 2031:    fprintf(stderr, "ASMV ");
        -: 2032:#endif
        -: 2033:#ifdef DEBUG
        -: 2034:    fprintf(stderr, "DEBUG ");
        -: 2035:#endif
        -: 2036:#ifdef DYN_ALLOC
        -: 2037:    fprintf(stderr, "DYN_ALLOC ");
        -: 2038:#endif
        -: 2039:#ifdef MAXSEG_64K
        -: 2040:    fprintf(stderr, "MAXSEG_64K");
        -: 2041:#endif
        2: 2042:    fprintf(stderr, "\n");
        2: 2043:}
        -: 2044:
        -: 2045:/* ======================================================================== */
      211: 2046:int main (argc, argv)
        -: 2047:    int argc;
        -: 2048:    char **argv;
        -: 2049:{
      211: 2050:    int file_count = 0; /* number of files to precess */
        -: 2051:    int proglen;        /* length of progname */
        -: 2052:    int optc;           /* current option */
        -: 2053:
        -: 2054:    EXPAND(argc, argv); /* wild card expansion if necessary */
        -: 2055:
      211: 2056:    progname = basename(argv[0]);
      211: 2057:    proglen = strlen(progname);
        -: 2058:
        -: 2059:    /* Suppress .exe for MSDOS, OS/2 and VMS: */
      211: 2060:    if (proglen > 4 && strequ(progname+proglen-4, ".exe")) {
      211: 2061:        progname[proglen-4] = '\0';
        -: 2062:    }
        -: 2063:
        -: 2064:    /* Add options in GZIP environment variable if there is one */
      211: 2065:    env = add_envopt(&argc, &argv, OPTIONS_VAR);
      211: 2066:    if (env != NULL) args = argv;
        -: 2067:
      211: 2068:    foreground = signal(SIGINT, SIG_IGN) != SIG_IGN;
      211: 2069:    if (foreground) {
      211: 2070:	signal (SIGINT, (sig_type)abort_gzip);
        -: 2071:    }
        -: 2072:#ifdef SIGTERM
      211: 2073:    signal(SIGTERM, (sig_type)abort_gzip);
        -: 2074:#endif
        -: 2075:#ifdef SIGHUP
      211: 2076:    signal(SIGHUP,  (sig_type)abort_gzip);
        -: 2077:#endif
        -: 2078:
        -: 2079:#ifndef GNU_STANDARD
        -: 2080:    /* For compatibility with old compress, use program name as an option.
        -: 2081:     * If you compile with -DGNU_STANDARD, this program will behave as
        -: 2082:     * gzip even if it is invoked under the name gunzip or zcat.
        -: 2083:     *
        -: 2084:     * Systems which do not support links can still use -d or -dc.
        -: 2085:     * Ignore an .exe extension for MSDOS, OS/2 and VMS.
        -: 2086:     */
      211: 2087:    if (  strncmp(progname, "un",  2) == 0     /* ungzip, uncompress */
      211: 2088:       || strncmp(progname, "gun", 3) == 0) {  /* gunzip */
    #####: 2089:	decompress = 1;
      211: 2090:    } else if (strequ(progname+1, "cat")       /* zcat, pcat, gcat */
      211: 2091:	    || strequ(progname, "gzcat")) {    /* gzcat */
    #####: 2092:	decompress = to_stdout = 1;
        -: 2093:    }
        -: 2094:#endif
        -: 2095:
      211: 2096:    strncpy(z_suffix, Z_SUFFIX, sizeof(z_suffix)-1);
      211: 2097:    z_len = strlen(z_suffix);
        -: 2098:
      729: 2099:    while ((optc = getopt_long (argc, argv, "ab:cdfhLqrS:tvVZ123456789",
        -: 2100:				longopts, (int *)0)) != EOF) {
      396: 2101:	switch (optc) {
        -: 2102:        case 'a':
    #####: 2103:            ascii = 1; break;
        -: 2104:	case 'b':
    #####: 2105:	    maxbits = atoi(optarg);
    #####: 2106:	    break;
        -: 2107:	case 'c':
        2: 2108:	    to_stdout = 1; break;
        -: 2109:	case 'd':
       13: 2110:	    decompress = 1; break;
        -: 2111:	case 'f':
       82: 2112:	    force++; break;
        -: 2113:	case 'h': case 'H': case '?':
        2: 2114:	    help(); do_exit(OK); break;
        -: 2115:	case 'L':
        2: 2116:	    license(); do_exit(OK); break;
        -: 2117:	case 'q':
       82: 2118:	    quiet = 1; verbose = 0; break;
        -: 2119:	case 'r':
        -: 2120:#ifdef NO_DIR
       83: 2121:	    fprintf(stderr, "%s: -r not supported on this system\n", progname);
       83: 2122:	    usage();
       83: 2123:	    do_exit(ERROR); break;
        -: 2124:#else
        -: 2125:	    recursive = 1; break;
        -: 2126:#endif
        -: 2127:	case 'S':
        -: 2128:#ifdef NO_MULTIPLE_DOTS
        -: 2129:            if (*optarg == '.') optarg++;
        -: 2130:#endif
    #####: 2131:            z_len = strlen(optarg);
    #####: 2132:            if (z_len == 0 || z_len > MAX_SUFFIX) {
    #####: 2133:                fprintf(stderr, "%s: incorrect suffix '%s'\n",
        -: 2134:                        progname, optarg);
    #####: 2135:                do_exit(ERROR);
        -: 2136:            }
    #####: 2137:            strcpy(z_suffix, optarg);
    #####: 2138:            break;
        -: 2139:	case 't':
        3: 2140:	    test = decompress = to_stdout = 1;
        3: 2141:	    break;
        -: 2142:	case 'v':
       42: 2143:	    verbose++; quiet = 0; break;
        -: 2144:	case 'V':
        2: 2145:	    version(); do_exit(OK); break;
        -: 2146:	case 'Z':
        -: 2147:#ifdef LZW
        -: 2148:	    do_lzw = 1; break;
        -: 2149:#else
    #####: 2150:	    fprintf(stderr, "%s: -Z not supported in this version\n",
        -: 2151:		    progname);
    #####: 2152:	    usage();
    #####: 2153:	    do_exit(ERROR); break;
        -: 2154:#endif
        -: 2155:	case '1':  case '2':  case '3':  case '4':
        -: 2156:	case '5':  case '6':  case '7':  case '8':  case '9':
       83: 2157:	    level = optc - '0';
       83: 2158:	    break;
        -: 2159:	default:
        -: 2160:	    /* Error message already emitted by getopt_long. */
    #####: 2161:	    usage();
    #####: 2162:	    do_exit(ERROR);
        -: 2163:	}
        -: 2164:    } /* loop on all arguments */
        -: 2165:
      122: 2166:    file_count = argc - optind;
        -: 2167:
        -: 2168:#if O_BINARY
        -: 2169:#else
      122: 2170:    if (ascii && !quiet) {
    #####: 2171:	fprintf(stderr, "%s: option --ascii ignored on this system\n",
        -: 2172:		progname);
        -: 2173:    }
        -: 2174:#endif
      122: 2175:    if (do_lzw && !decompress) work = lzw;
        -: 2176:
        -: 2177:    /* Allocate all global buffers (for DYN_ALLOC option) */
        -: 2178:    ALLOC(uch, inbuf,  INBUFSIZ +INBUF_EXTRA);
        -: 2179:    ALLOC(uch, outbuf, OUTBUFSIZ+OUTBUF_EXTRA);
        -: 2180:    ALLOC(ush, d_buf,  DIST_BUFSIZE);
        -: 2181:    ALLOC(uch, window, 2L*WSIZE);
        -: 2182:#ifndef MAXSEG_64K
        -: 2183:    ALLOC(ush, tab_prefix, 1L<<BITS);
        -: 2184:#else
        -: 2185:    ALLOC(ush, tab_prefix0, 1L<<(BITS-1));
        -: 2186:    ALLOC(ush, tab_prefix1, 1L<<(BITS-1));
        -: 2187:#endif
        -: 2188:
        -: 2189:    /* And get to work */
      122: 2190:    if (file_count != 0) {
       15: 2191:	if (to_stdout && !test && (!decompress || !ascii)) {
        -: 2192:	    SET_BINARY_MODE(fileno(stdout));
        -: 2193:	}
       45: 2194:        while (optind < argc) {
       15: 2195:	    treat_file(argv[optind++]);
        -: 2196:	}
        -: 2197:    } else {  /* Standard input */
      107: 2198:	treat_stdin();
        -: 2199:    }
      121: 2200:    do_exit(exit_code);
    #####: 2201:    return exit_code; /* just to avoid lint warning */
        -: 2202:}
        -: 2203:
        -: 2204:/* ========================================================================
        -: 2205: * Compress or decompress stdin
        -: 2206: */
      107: 2207:local void treat_stdin()
        -: 2208:{
      107: 2209:    if (!force && isatty(fileno((FILE *)(decompress ? stdin : stdout)))) {
        -: 2210:	/* Do not send compressed data to the terminal or read it from
        -: 2211:	 * the terminal. We get here when user invoked the program
        -: 2212:	 * without parameters, so be helpful. According to the GNU standards:
        -: 2213:	 *
        -: 2214:	 *   If there is one behavior you think is most useful when the output
        -: 2215:	 *   is to a terminal, and another that you think is most useful when
        -: 2216:	 *   the output is a file or a pipe, then it is usually best to make
        -: 2217:	 *   the default behavior the one that is useful with output to a
        -: 2218:	 *   terminal, and have an option for the other behavior.
        -: 2219:	 *
        -: 2220:	 * Here we use the --force option to get the other behavior.
        -: 2221:	 */
    #####: 2222:	fprintf(stderr,
        -: 2223:    "%s: compressed data not %s a terminal. Use -f to force %scompression.\n",
    #####: 2224:		progname, decompress ? "read from" : "written to",
    #####: 2225:		decompress ? "de" : "");
    #####: 2226:	fprintf(stderr,"For help, type: %s -h\n", progname);
    #####: 2227:	do_exit(ERROR);
        -: 2228:    }
        -: 2229:
      107: 2230:    if (decompress || !ascii) {
        -: 2231:	SET_BINARY_MODE(fileno(stdin));
        -: 2232:    }
      107: 2233:    if (!test && (!decompress || !ascii)) {
        -: 2234:	SET_BINARY_MODE(fileno(stdout));
        -: 2235:    }
      107: 2236:    strcpy(ifname, "stdin");
      107: 2237:    strcpy(ofname, "stdout");
        -: 2238:
        -: 2239:    /* Get the time stamp on the input file. */
        -: 2240:#ifdef NO_STDIN_FSTAT
        -: 2241:    time_stamp = 0; /* time unknown */
        -: 2242:#else
      107: 2243:    if (fstat(fileno(stdin), &istat) != 0) {
    #####: 2244:	error("fstat(stdin)");
        -: 2245:    }
        -: 2246:    /* If you do not wish to save the time stamp when input comes from a pipe,
        -: 2247:     * compile with -DNO_PIPE_TIMESTAMP.
        -: 2248:     */
        -: 2249:#ifdef NO_PIPE_TIMESTAMP
        -: 2250:    if (!S_ISREG(istat.st_mode))
        -: 2251:	time_stamp = 0;
        -: 2252:    else
        -: 2253:#endif
        -: 2254:	/* time_stamp = istat.st_mtime; */
      107: 2255:	time_stamp = 0;
        -: 2256:#endif
      107: 2257:    ifile_size = -1L; /* convention for unknown size */
        -: 2258:
      107: 2259:    clear_bufs(); /* clear input and output buffers */
      107: 2260:    to_stdout = 1;
      107: 2261:    part_nb = 0;
        -: 2262:
      107: 2263:    if (decompress) {
       14: 2264:	method = get_method(ifd);
       13: 2265:	if (method < 0) {
    #####: 2266:	    do_exit(exit_code); /* error message already emitted */
        -: 2267:	}
        -: 2268:    }
        -: 2269:
        -: 2270:    /* Actually do the compression/decompression. Loop over zipped members.
        -: 2271:     */
        -: 2272:    for (;;) {
      106: 2273:	if ((*work)(fileno(stdin), fileno(stdout)) != OK) return;
        -: 2274:
      106: 2275:	if (!decompress || last_member || inptr == insize) break;
        -: 2276:	/* end of file */
        -: 2277:
        1: 2278:	method = get_method(ifd);
        1: 2279:	if (method < 0) return; /* error message already emitted */
    #####: 2280:	bytes_out = 0;            /* required for length check */
    #####: 2281:    }
        -: 2282:
      105: 2283:    if (verbose) {
       41: 2284:	if (test) {
    #####: 2285:	    fprintf(stderr, " OK");
        -: 2286:
       41: 2287:	} else if (!decompress) {
       41: 2288:	    display_ratio(bytes_in-(bytes_out-header_bytes), bytes_in);
        -: 2289:#ifdef DISPLAY_STDIN_RATIO
        -: 2290:	} else {
        -: 2291:	    display_ratio(bytes_out-(bytes_in-header_bytes), bytes_out);
        -: 2292:#endif
        -: 2293:	}
       41: 2294:	fprintf(stderr, "\n");
        -: 2295:    }
        -: 2296:}
        -: 2297:
        -: 2298:/* ========================================================================
        -: 2299: * Compress or decompress the given file
        -: 2300: */
       15: 2301:local void treat_file(iname)
        -: 2302:    char *iname;
        -: 2303:{
        -: 2304:    /* Check if the input file is present, set ifname and istat: */
       15: 2305:    if (get_istat(iname, &istat) != OK) return;
        -: 2306:
        -: 2307:    /* If the input name is that of a directory, recurse or ignore: */
       15: 2308:    if (S_ISDIR(istat.st_mode)) {
        -: 2309:#ifndef NO_DIR
        -: 2310:	if (recursive) {
        -: 2311:	    struct stat st;
        -: 2312:	    st = istat;
        -: 2313:	    treat_dir(iname);
        -: 2314:	    /* Warning: ifname is now garbage */
        -: 2315:	    reset_times (iname, &st);
        -: 2316:	} else
        -: 2317:#endif
    #####: 2318:	WARN((stderr,"%s: %s is a directory -- ignored\n", progname, ifname));
    #####: 2319:	return;
        -: 2320:    }
       15: 2321:    if (!S_ISREG(istat.st_mode)) {
    #####: 2322:	WARN((stderr,
        -: 2323:	      "%s: %s is not a directory or a regular file - ignored\n",
        -: 2324:	      progname, ifname));
    #####: 2325:	return;
        -: 2326:    }
       15: 2327:    if (istat.st_nlink > 1 && !to_stdout && !force) {
    #####: 2328:	WARN((stderr, "%s: %s has %d other link%c -- unchanged\n",
        -: 2329:	      progname, ifname,
        -: 2330:	      (int)istat.st_nlink - 1, istat.st_nlink > 2 ? 's' : ' '));
    #####: 2331:	return;
        -: 2332:    }
        -: 2333:
       15: 2334:    ifile_size = istat.st_size;
        -: 2335:    /* time_stamp = istat.st_mtime; */
       15: 2336:    time_stamp = 0;
        -: 2337:
        -: 2338:    /* Generate output file name */
       15: 2339:    if (to_stdout) {
        2: 2340:	strcpy(ofname, "stdout");
        -: 2341:
       13: 2342:    } else if (make_ofname() != OK) {
    #####: 2343:	return;
        -: 2344:    }
        -: 2345:
        -: 2346:    /* Open the input file and determine compression method. The mode
        -: 2347:     * parameter is ignored but required by some systems (VMS) and forbidden
        -: 2348:     * on other systems (MacOS).
        -: 2349:     */
       15: 2350:    ifd = OPEN(ifname, ascii && !decompress ? O_RDONLY : O_RDONLY | O_BINARY,
        -: 2351:	       RW_USER);
       15: 2352:    if (ifd == -1) {
    #####: 2353:	fprintf(stderr, "%s: ", progname);
    #####: 2354:	perror(ifname);
    #####: 2355:	exit_code = ERROR;
    #####: 2356:	return;
        -: 2357:    }
       15: 2358:    clear_bufs(); /* clear input and output buffers */
       15: 2359:    part_nb = 0;
        -: 2360:
       15: 2361:    if (decompress) {
        2: 2362:	method = get_method(ifd); /* updates ofname if original given */
        2: 2363:	if (method < 0) {
    #####: 2364:	    close(ifd);
    #####: 2365:	    return;               /* error message already emitted */
        -: 2366:	}
        -: 2367:    }
        -: 2368:
        -: 2369:    /* If compressing to a file, check if ofname is not ambiguous
        -: 2370:     * because the operating system truncates names. Otherwise, generate
        -: 2371:     * a new ofname and save the original name in the compressed file.
        -: 2372:     */
       15: 2373:    if (to_stdout) {
        2: 2374:	ofd = fileno(stdout);
        -: 2375:	/* keep remove_ofname as zero */
        -: 2376:    } else {
       13: 2377:	if (create_outfile() != OK) return;
        -: 2378:
       13: 2379:	if (save_orig_name && !verbose && !quiet) {
    #####: 2380:	    fprintf(stderr, "%s: %s compressed to %s\n",
        -: 2381:		    progname, ifname, ofname);
        -: 2382:	}
        -: 2383:    }
       15: 2384:    if (verbose) {
        1: 2385:	fprintf(stderr, "%s:\t%s", ifname, (int)strlen(ifname) >= 15 ? 
    #####: 2386:		"" : ((int)strlen(ifname) >= 7 ? "\t" : "\t\t"));
        -: 2387:    }
        -: 2388:
        -: 2389:    /* Actually do the compression/decompression. Loop over zipped members.
        -: 2390:     */
        -: 2391:    for (;;) {
       15: 2392:	if ((*work)(ifd, ofd) != OK) {
    #####: 2393:	    method = -1; /* force cleanup */
    #####: 2394:	    break;
        -: 2395:	}
       15: 2396:	if (!decompress || last_member || inptr == insize) break;
        -: 2397:	/* end of file */
        -: 2398:
    #####: 2399:	method = get_method(ifd);
    #####: 2400:	if (method < 0) break;    /* error message already emitted */
    #####: 2401:	bytes_out = 0;            /* required for length check */
    #####: 2402:    }
        -: 2403:
       15: 2404:    close(ifd);
       15: 2405:    if (!to_stdout && close(ofd)) {
    #####: 2406:	write_error();
        -: 2407:    }
       15: 2408:    if (method == -1) {
    #####: 2409:	if (!to_stdout) unlink (ofname);
    #####: 2410:	return;
        -: 2411:    }
        -: 2412:    /* Display statistics */
       15: 2413:    if(verbose) {
        1: 2414:	if (test) {
    #####: 2415:	    fprintf(stderr, " OK");
        1: 2416:	} else if (decompress) {
    #####: 2417:	    display_ratio(bytes_out-(bytes_in-header_bytes), bytes_out);
        -: 2418:	} else {
        1: 2419:	    display_ratio(bytes_in-(bytes_out-header_bytes), bytes_in);
        -: 2420:	}
        1: 2421:	if (!test && !to_stdout) {
        1: 2422:	    fprintf(stderr, " -- replaced with %s", ofname);
        -: 2423:	}
        1: 2424:	fprintf(stderr, "\n");
        -: 2425:    }
        -: 2426:    /* Copy modes, times, ownership, and remove the input file */
       15: 2427:    if (!to_stdout) {
       13: 2428:	copy_stat(&istat);
        -: 2429:    }
        -: 2430:}
        -: 2431:
        -: 2432:/* ========================================================================
        -: 2433: * Create the output file. Return OK or ERROR.
        -: 2434: * Try several times if necessary to avoid truncating the z_suffix. For
        -: 2435: * example, do not create a compressed file of name "1234567890123."
        -: 2436: * IN assertions: the input file has already been open (ifd is set) and
        -: 2437: *   ofname has already been updated if there was an original name.
        -: 2438: * OUT assertions: ifd and ofd are closed in case of error.
        -: 2439: */
       13: 2440:local int create_outfile()
        -: 2441:{
        -: 2442:    struct stat	ostat; /* stat for ofname */
        -: 2443:    int len;
       13: 2444:    int flags = O_WRONLY | O_CREAT | O_EXCL | O_BINARY;
        -: 2445:
       13: 2446:    if (ascii && decompress) {
    #####: 2447:	flags &= ~O_BINARY; /* force ascii text mode */
        -: 2448:    }
        -: 2449:    for (;;) {
       13: 2450:        len = strlen(ofname);
       13: 2451:        if (len == 0 || ofname[len] == PATH_SEP) break;
       13: 2452:	if (check_ofname() != OK) {
    #####: 2453:	    close(ifd);
    #####: 2454:	    return ERROR;
        -: 2455:	}
        -: 2456:	/* Create the output file */
       13: 2457:	remove_ofname = 1;
       13: 2458:	ofd = OPEN(ofname, flags, RW_USER);
       13: 2459:	if (ofd == -1) {
    #####: 2460:	    perror(ofname);
    #####: 2461:	    close(ifd);
    #####: 2462:	    exit_code = ERROR;
    #####: 2463:	    return ERROR;
        -: 2464:	}
        -: 2465:
        -: 2466:	/* Check for name truncation on new file (1234567890123.gz) */
       13: 2467:	if (fstat(ofd, &ostat) != 0) {
    #####: 2468:	    fprintf(stderr, "%s: ", progname);
    #####: 2469:	    perror(ofname);
    #####: 2470:	    close(ifd); close(ofd);
    #####: 2471:	    unlink(ofname);
    #####: 2472:	    exit_code = ERROR;
    #####: 2473:	    return ERROR;
        -: 2474:	}
       13: 2475:	if (!name_too_long(ofname, &ostat)) return OK;
        -: 2476:
    #####: 2477:	if (decompress) {
        -: 2478:	    /* name might be too long if an original name was saved */
    #####: 2479:	    WARN((stderr, "%s: %s: warning, name truncated\n",
        -: 2480:		  progname, ofname));
    #####: 2481:	    return OK;
        -: 2482:	} else {
        -: 2483:#ifdef NO_MULTIPLE_DOTS
        -: 2484:	    /* Should never happen, see check_ofname() */
        -: 2485:	    fprintf(stderr, "%s: %s: name too long\n", progname, ofname);
        -: 2486:	    do_exit(ERROR);
        -: 2487:#else
    #####: 2488:	    close(ofd);
    #####: 2489:	    unlink(ofname);
    #####: 2490:	    save_orig_name = 1;
    #####: 2491:	    strcpy(ofname+strlen(ofname)-z_len-1, z_suffix);
        -: 2492:            /* 123456789012.gz -> 12345678901.gz */
        -: 2493:#endif
        -: 2494:	} /* decompress ? */
    #####: 2495:    } /* while non null name */
        -: 2496:
    #####: 2497:    close(ifd);
    #####: 2498:    fprintf(stderr, "%s: %s: name too long\n", progname, ofname);
    #####: 2499:    exit_code = ERROR;
    #####: 2500:    return ERROR;
        -: 2501:}
        -: 2502:
        -: 2503:/* ========================================================================
        -: 2504: * Use lstat if available, except for -c or -f. Use stat otherwise.
        -: 2505: * This allows links when not removing the original file.
        -: 2506: */
       15: 2507:local int do_stat(name, sbuf)
        -: 2508:    char *name;
        -: 2509:    struct stat *sbuf;
        -: 2510:{
       15: 2511:    errno = 0;
        -: 2512:#if (defined(S_IFLNK) || defined (S_ISLNK)) && !defined(NO_SYMLINK)
       15: 2513:    if (!to_stdout && !force) {
       12: 2514:	return lstat(name, sbuf);
        -: 2515:    }
        -: 2516:#endif
        3: 2517:    return stat(name, sbuf);
        -: 2518:}
        -: 2519:
        -: 2520:/* ========================================================================
        -: 2521: * Return a pointer to the 'z' suffix of a file name, or NULL. For all
        -: 2522: * systems, ".gz", ".z", ".Z", ".taz", ".tgz", "-gz", "-z" and "_z" are
        -: 2523: * accepted suffixes, in addition to the value of the --suffix option.
        -: 2524: * ".tgz" is a useful convention for tar.z files on systems limited
        -: 2525: * to 3 characters extensions. On such systems, ".?z" and ".??z" are
        -: 2526: * also accepted suffixes. For Unix, we do not want to accept any
        -: 2527: * .??z suffix as indicating a compressed file; some people use .xyz
        -: 2528: * to denote volume data.
        -: 2529: */
       13: 2530:local char *get_suffix(name)
        -: 2531:    char *name;
        -: 2532:{
        -: 2533:    int nlen, slen;
        -: 2534:    char suffix[MAX_SUFFIX+3]; /* last chars of name, forced to lower case */
        -: 2535:    static char *known_suffixes[] =
        -: 2536:       {z_suffix, ".gz", ".z", ".taz", ".tgz", "-gz", "-z", "_z",
        -: 2537:#ifdef MAX_EXT_CHARS
        -: 2538:          "z",
        -: 2539:#endif
        -: 2540:          NULL};
       13: 2541:    char **suf = known_suffixes;
        -: 2542:
       13: 2543:    if (strequ(z_suffix, "z")) suf++; /* check long suffixes first */
        -: 2544:
       13: 2545:    nlen = strlen(name);
       13: 2546:    if (nlen <= MAX_SUFFIX+2) 
        -: 2547:{
       13: 2548:        strcpy(suffix, name);
        -: 2549:    } else {
    #####: 2550:        strcpy(suffix, name+nlen-MAX_SUFFIX-2);
        -: 2551:    }
        -: 2552:#ifdef SUFFIX_SEP
        -: 2553:    /* strip a version number from the file name */
        -: 2554:    {
        -: 2555:	char *v = strrchr(suffix, SUFFIX_SEP);
        -: 2556:	if (v != NULL) *v = '\0', nlen = v - name;
        -: 2557:    }
        -: 2558:#endif
       13: 2559:    strlwr(suffix);
       13: 2560:    slen = strlen(suffix);
        -: 2561:    do {
       99: 2562:       int s = strlen(*suf);
       99: 2563:       if (slen > s && suffix[slen-s-1] != PATH_SEP
       99: 2564:           && strequ(suffix + slen - s, *suf)) {
        1: 2565:           return name+nlen-s;
        -: 2566:       }
       98: 2567:    } while (*++suf != NULL);
        -: 2568:
       12: 2569:    return NULL;
        -: 2570:}
        -: 2571:
        -: 2572:
        -: 2573:/* ========================================================================
        -: 2574: * Set ifname to the input file name (with a suffix appended if necessary)
        -: 2575: * and istat to its stats. For decompression, if no file exists with the
        -: 2576: * original name, try adding successively z_suffix, .gz, .z, -z and .Z.
        -: 2577: * For MSDOS, we try only z_suffix and z.
        -: 2578: * Return OK or ERROR.
        -: 2579: */
       15: 2580:local int get_istat(iname, sbuf)
        -: 2581:    char *iname;
        -: 2582:    struct stat *sbuf;
        -: 2583:{
        -: 2584:    int ilen;  /* strlen(ifname) */
        -: 2585:    static char *suffixes[] = {z_suffix, ".gz", ".z", "-z", ".Z", NULL};
       15: 2586:    char **suf = suffixes;
        -: 2587:    char *s;
        -: 2588:#ifdef NO_MULTIPLE_DOTS
        -: 2589:    char *dot; /* pointer to ifname extension, or NULL */
        -: 2590:#endif
        -: 2591:
       15: 2592:    strcpy(ifname, iname);
        -: 2593:
        -: 2594:    /* If input file exists, return OK. */
       15: 2595:    if (do_stat(ifname, sbuf) == 0) return OK;
        -: 2596:
    #####: 2597:    if (!decompress || errno != ENOENT) {
    #####: 2598:	perror(ifname);
    #####: 2599:	exit_code = ERROR;
    #####: 2600:	return ERROR;
        -: 2601:    }
        -: 2602:    /* file.ext doesn't exist, try adding a suffix.
        -: 2603:     */
    #####: 2604:    s = get_suffix(ifname);
    #####: 2605:    if (s != NULL) {
    #####: 2606:	perror(ifname); /* ifname already has z suffix and does not exist */
    #####: 2607:	exit_code = ERROR;
    #####: 2608:	return ERROR;
        -: 2609:    }
        -: 2610:#ifdef SUFFIX_SEP
        -: 2611:    /* strip a version number from the input file name */
        -: 2612:    if ((s = strrchr(ifname, SUFFIX_SEP)) != NULL) *s = '\0';
        -: 2613:#endif
        -: 2614:#ifdef NO_MULTIPLE_DOTS
        -: 2615:    dot = strrchr(ifname, '.');
        -: 2616:    if (dot == NULL) {
        -: 2617:        strcat(ifname, ".");
        -: 2618:        dot = strrchr(ifname, '.');
        -: 2619:    }
        -: 2620:#endif
    #####: 2621:    ilen = strlen(ifname);
    #####: 2622:    if (strequ(z_suffix, ".gz")) suf++;
        -: 2623:
        -: 2624:    /* Search for all suffixes */
        -: 2625:    do {
    #####: 2626:        s = *suf;
        -: 2627:#ifdef NO_MULTIPLE_DOTS
        -: 2628:        if (*s == '.') s++;
        -: 2629:#endif
        -: 2630:#ifdef MAX_EXT_CHARS
        -: 2631:        strcpy(ifname, iname);
        -: 2632:        /* Needed if the suffixes are not sorted by increasing length */
        -: 2633:
        -: 2634:        if (*dot == '\0') strcpy(dot, ".");
        -: 2635:        dot[MAX_EXT_CHARS+1-strlen(s)] = '\0';
        -: 2636:#endif
    #####: 2637:        strcat(ifname, s);
    #####: 2638:        if (do_stat(ifname, sbuf) == 0) return OK;
    #####: 2639:	ifname[ilen] = '\0';
    #####: 2640:    } while (*++suf != NULL);
        -: 2641:
        -: 2642:    /* No suffix found, complain using z_suffix: */
        -: 2643:#ifdef MAX_EXT_CHARS
        -: 2644:    strcpy(ifname, iname);
        -: 2645:    if (*dot == '\0') strcpy(dot, ".");
        -: 2646:    dot[MAX_EXT_CHARS+1-z_len] = '\0';
        -: 2647:#endif
    #####: 2648:    strcat(ifname, z_suffix);
    #####: 2649:    perror(ifname);
    #####: 2650:    exit_code = ERROR;
    #####: 2651:    return ERROR;
        -: 2652:}
        -: 2653:
        -: 2654:/* ========================================================================
        -: 2655: * Generate ofname given ifname. Return OK, or WARNING if file must be skipped.
        -: 2656: * Initializes save_orig_name.
        -: 2657: * IN assertion: this function is not called if to_stdout is true.
        -: 2658: */
       13: 2659:local int make_ofname()
        -: 2660:{
        -: 2661:    char *suff;            /* ofname z suffix */
        -: 2662:
       13: 2663:    strcpy(ofname, ifname);
        -: 2664:#ifdef SUFFIX_SEP
        -: 2665:    /* strip a version number from the output file name */
        -: 2666:    if ((suff = strrchr(ofname, SUFFIX_SEP)) != NULL) *suff = '\0';
        -: 2667:#endif
       13: 2668:    suff = get_suffix(ofname);
        -: 2669:
       13: 2670:    if (decompress) {
        1: 2671:	if (suff == NULL) {
    #####: 2672:	    WARN((stderr,"%s: %s: unknown suffix -- ignored\n",
        -: 2673:		  progname, ifname));
    #####: 2674:	    return WARNING;
        -: 2675:	}
        -: 2676:	/* Make a special case for .tgz and .taz: */
        1: 2677:	strlwr(suff);
        1: 2678:	if (strequ(suff, ".tgz") || strequ(suff, ".taz")) {
    #####: 2679:	    strcpy(suff, ".tar");
        -: 2680:	} else {
        1: 2681:	    *suff = '\0'; /* strip z suffix and optional version number */
        -: 2682:	}
        -: 2683:        /* ofname might be changed later if infile contains an original name */
        -: 2684:
       12: 2685:    } else if (suff != NULL) {
        -: 2686:	/* Avoid annoying messages with -r (see treat_dir()) */
    #####: 2687:	if (verbose || (!recursive && !quiet)) {
    #####: 2688:	    fprintf(stderr, "%s: %s already has %s suffix -- unchanged\n",
        -: 2689:		    progname, ifname, suff);
        -: 2690:	}
    #####: 2691:	if (exit_code == OK) exit_code = WARNING;
    #####: 2692:	return WARNING;
        -: 2693:    } else {
       12: 2694:        save_orig_name = 0;
        -: 2695:
        -: 2696:#ifdef NO_MULTIPLE_DOTS
        -: 2697:	suff = strrchr(ofname, '.');
        -: 2698:	if (suff == NULL) {
        -: 2699:            strcat(ofname, ".");
        -: 2700:#  ifdef MAX_EXT_CHARS
        -: 2701:        /* On the Atari and some versions of MSDOS, name_too_long()
        -: 2702:         * does not work correctly because of a bug in stat(). So we
        -: 2703:         * must truncate here.
        -: 2704:         */
        -: 2705:        } else if (strlen(suff)-1 + z_len > MAX_SUFFIX) {
        -: 2706:            suff[MAX_SUFFIX+1-z_len] = '\0';
        -: 2707:            save_orig_name = 1;
        -: 2708:#  endif
        -: 2709:        }
        -: 2710:#endif /* NO_MULTIPLE_DOTS */
       12: 2711:	strcat(ofname, z_suffix);
        -: 2712:
        -: 2713:    } /* decompress ? */
       13: 2714:    return OK;
        -: 2715:}
        -: 2716:
        -: 2717:
        -: 2718:/* ========================================================================
        -: 2719: * Check the magic number of the input file and update ofname if an
        -: 2720: * original name was given and to_stdout is not set.
        -: 2721: * Return the compression method, -1 for error, -2 for warning.
        -: 2722: * Set inptr to the offset of the next byte to be processed.
        -: 2723: * This function may be called repeatedly for an input file consisting
        -: 2724: * of several contiguous gzip'ed members.
        -: 2725: * IN assertions: there is at least one remaining compressed member.
        -: 2726: *   If the member is a zip file, it must be the only one.
        -: 2727: */
       17: 2728:local int get_method(in)
        -: 2729:    int in;        /* input file descriptor */
        -: 2730:{
        -: 2731:    uch flags;
        -: 2732:    char magic[2]; /* magic header */
        -: 2733:
       17: 2734:    magic[0] = (char)get_byte();
       17: 2735:    magic[1] = (char)get_byte();
        -: 2736:
        -: 2737:    /* time_stamp = istat.st_mtime; */ /* may be modified later for some methods */
       17: 2738:    time_stamp = 0;
       17: 2739:    method = -1;                 /* unknown yet */
       17: 2740:    part_nb++;                   /* number of parts in gzip file */
       17: 2741:    header_bytes = 0;
       17: 2742:    last_member = RECORD_IO;
        -: 2743:    /* assume multiple members in gzip file except for record oriented I/O */
        -: 2744:
       17: 2745:    if (memcmp(magic, GZIP_MAGIC, 2) == 0
        5: 2746:        || memcmp(magic, OLD_GZIP_MAGIC, 2) == 0) {
       12: 2747:	method = (int)get_byte();
       12: 2748:	if (method != DEFLATED) {
    #####: 2749:	    fprintf(stderr,
        -: 2750:		    "%s: %s: unknown method %d -- get newer version of gzip\n",
        -: 2751:		    progname, ifname, method);
    #####: 2752:	    exit_code = ERROR;
    #####: 2753:	    return -1;
        -: 2754:	}
       12: 2755:	work = unzip;
       12: 2756:	flags  = (uch)get_byte();
        -: 2757:
       12: 2758:	if ((flags & ENCRYPTED) != 0) {
    #####: 2759:	    fprintf(stderr,
        -: 2760:		    "%s: %s is encrypted -- get newer version of gzip\n",
        -: 2761:		    progname, ifname);
    #####: 2762:	    exit_code = ERROR;
    #####: 2763:	    return -1;
        -: 2764:	}
       12: 2765:	if ((flags & CONTINUATION) != 0) {
    #####: 2766:	    fprintf(stderr,
        -: 2767:	   "%s: %s is a a multi-part gzip file -- get newer version of gzip\n",
        -: 2768:		    progname, ifname);
    #####: 2769:	    exit_code = ERROR;
    #####: 2770:	    if (force <= 1) return -1;
        -: 2771:	}
       12: 2772:	if ((flags & RESERVED) != 0) {
    #####: 2773:	    fprintf(stderr,
        -: 2774:		    "%s: %s has flags 0x%x -- get newer version of gzip\n",
        -: 2775:		    progname, ifname, flags);
    #####: 2776:	    exit_code = ERROR;
    #####: 2777:	    if (force <= 1) return -1;
        -: 2778:	}
       12: 2779:	time_stamp  = (ulg)get_byte();
       12: 2780:	time_stamp |= ((ulg)get_byte()) << 8;
       12: 2781:	time_stamp |= ((ulg)get_byte()) << 16;
       12: 2782:	time_stamp |= ((ulg)get_byte()) << 24;
        -: 2783:        /* this is not original code -- inserted by MAPSTEXT */
       12: 2784:	time_stamp = 0;
        -: 2785:
       12: 2786:	(void)get_byte();  /* Ignore extra flags for the moment */
       12: 2787:	(void)get_byte();  /* Ignore OS type for the moment */
        -: 2788:
       12: 2789:	if ((flags & CONTINUATION) != 0) {
    #####: 2790:	    unsigned part = (unsigned)get_byte();
    #####: 2791:	    part |= ((unsigned)get_byte())<<8;
    #####: 2792:	    if (verbose) {
    #####: 2793:		fprintf(stderr,"%s: %s: part number %u\n",
        -: 2794:			progname, ifname, part);
        -: 2795:	    }
        -: 2796:	}
       12: 2797:	if ((flags & EXTRA_FIELD) != 0) {
    #####: 2798:	    unsigned len = (unsigned)get_byte();
    #####: 2799:	    len |= ((unsigned)get_byte())<<8;
    #####: 2800:	    if (verbose) {
    #####: 2801:		fprintf(stderr,"%s: %s: extra field of %u bytes ignored\n",
        -: 2802:			progname, ifname, len);
        -: 2803:	    }
    #####: 2804:	    while (len--) (void)get_byte();
        -: 2805:	}
        -: 2806:
        -: 2807:	/* Get original file name if it was truncated */
       12: 2808:	if ((flags & ORIG_NAME) != 0) {
        5: 2809:	    if (to_stdout || part_nb > 1) {
        -: 2810:		/* Discard the old name */
        -: 2811:		char c; /* dummy used for NeXTstep 3.0 cc optimizer bug */
        3: 2812:		while ((c=get_byte()) != 0) c++;
        -: 2813:	    } else {
        -: 2814:		/* Copy the base name. Keep a directory prefix intact. */
    #####: 2815:		char *p = basename(ofname);
        -: 2816:		for (;;) {
    #####: 2817:		    *p = (char)get_char();
    #####: 2818:		    if (*p++ == '\0') break;
    #####: 2819:		    if (p >= ofname+sizeof(ofname)) {
    #####: 2820:			error("corrupted input -- file name too large");
        -: 2821:		    }
    #####: 2822:		}
        -: 2823:	    } /* to_stdout */
        -: 2824:	} /* orig_name */
        -: 2825:
        -: 2826:	/* Discard file comment if any */
       11: 2827:	if ((flags & COMMENT) != 0) {
    #####: 2828:	    while (get_char() != 0) /* null */ ;
        -: 2829:	}
       22: 2830:	if (part_nb == 1) {
       11: 2831:	    header_bytes = inptr + 2*sizeof(long); /* include crc and size */
        -: 2832:	}
        -: 2833:
        5: 2834:    } else if (memcmp(magic, PKZIP_MAGIC, 2) == 0 && inptr == 2
        2: 2835:	    && memcmp((char*)inbuf, PKZIP_MAGIC, 4) == 0) {
        -: 2836:	/* To simplify the code, we support a zip file when alone only.
        -: 2837:         * We are thus guaranteed that the entire local header fits in inbuf.
        -: 2838:         */
        2: 2839:        inptr = 0;
        2: 2840:	work = unzip;
        2: 2841:	if (check_zipfile(in) != OK) return -1;
        -: 2842:	/* check_zipfile may get ofname from the local header */
        2: 2843:	last_member = 1;
        -: 2844:
        3: 2845:    } else if (memcmp(magic, PACK_MAGIC, 2) == 0) {
        1: 2846:	work = unpack;
        1: 2847:	method = PACKED;
        2: 2848:    } else if (memcmp(magic, LZW_MAGIC, 2) == 0) {
        1: 2849:	work = unlzw;
        1: 2850:	method = COMPRESSED;
        1: 2851:	last_member = 1;
        -: 2852:    }
       16: 2853:    if (method >= 0) return method;
        1: 2854:    if (part_nb == 1) {
    #####: 2855:	fprintf(stderr, "\n%s: %s: not in gzip format\n", progname, ifname);
    #####: 2856:	exit_code = ERROR;
    #####: 2857:	return -1;
        -: 2858:    } else {
        1: 2859:	WARN((stderr, "\n%s: %s: decompression OK, trailing garbage ignored\n",
        -: 2860:	      progname, ifname));
        1: 2861:	return -2;
        -: 2862:    }
        -: 2863:}
        -: 2864:
        -: 2865:/* ========================================================================
        -: 2866: * Return true if the two stat structures correspond to the same file.
        -: 2867: */
    #####: 2868:local int same_file(stat1, stat2)
        -: 2869:    struct stat *stat1;
        -: 2870:    struct stat *stat2;
        -: 2871:{
    #####: 2872:    return stat1->st_ino   == stat2->st_ino
    #####: 2873:	&& stat1->st_dev   == stat2->st_dev
        -: 2874:#ifdef NO_ST_INO
        -: 2875:        /* Can't rely on st_ino and st_dev, use other fields: */
        -: 2876:	&& stat1->st_mode  == stat2->st_mode
        -: 2877:	&& stat1->st_uid   == stat2->st_uid
        -: 2878:	&& stat1->st_gid   == stat2->st_gid
        -: 2879:	&& stat1->st_size  == stat2->st_size
        -: 2880:	&& stat1->st_atime == stat2->st_atime
        -: 2881:	&& stat1->st_mtime == stat2->st_mtime
        -: 2882:	&& stat1->st_ctime == stat2->st_ctime
        -: 2883:#endif
        -: 2884:	    ;
        -: 2885:}
        -: 2886:
        -: 2887:/* ========================================================================
        -: 2888: * Return true if a file name is ambiguous because the operating system
        -: 2889: * truncates file names.
        -: 2890: */
       13: 2891:local int name_too_long(name, statb)
        -: 2892:    char *name;           /* file name to check */
        -: 2893:    struct stat *statb;   /* stat buf for this file name */
        -: 2894:{
       13: 2895:    int s = strlen(name);
       13: 2896:    char c = name[s-1];
        -: 2897:    struct stat	tstat; /* stat for truncated name */
        -: 2898:    int res;
        -: 2899:
       13: 2900:    tstat = *statb;      /* Just in case OS does not fill all fields */
       13: 2901:    name[s-1] = '\0';
       13: 2902:    res = stat(name, &tstat) == 0 && same_file(statb, &tstat);
       13: 2903:    name[s-1] = c;
        -: 2904:    Trace((stderr, " too_long(%s) => %d\n", name, res));
       13: 2905:    return res;
        -: 2906:}
        -: 2907:
        -: 2908:/* ========================================================================
        -: 2909: * If compressing to a file, check if ofname is not ambiguous
        -: 2910: * because the operating system truncates names. Otherwise, generate
        -: 2911: * a new ofname and save the original name in the compressed file.
        -: 2912: * If the compressed file already exists, ask for confirmation.
        -: 2913: *    The check for name truncation is made dynamically, because different
        -: 2914: * file systems on the same OS might use different truncation rules (on SVR4
        -: 2915: * s5 truncates to 14 chars and ufs does not truncate).
        -: 2916: *    This function returns -1 if the file must be skipped, and
        -: 2917: * updates save_orig_name if necessary.
        -: 2918: * IN assertions: save_orig_name is already set if ofname has been
        -: 2919: * already truncated because of NO_MULTIPLE_DOTS. The input file has
        -: 2920: * already been open and istat is set.
        -: 2921: */
       13: 2922:local int check_ofname()
        -: 2923:{
       13: 2924:    int s = strlen(ofname);
        -: 2925:    struct stat	ostat; /* stat for ofname */
        -: 2926:
       13: 2927:    if (stat(ofname, &ostat) != 0) return 0;
        -: 2928:
        -: 2929:    /* Check for name truncation on existing file: */
        -: 2930:#ifdef NO_MULTIPLE_DOTS
        -: 2931:    if (!decompress && name_too_long(ofname, &ostat)) {
        -: 2932:#else
    #####: 2933:    if (!decompress && s > 8 && name_too_long(ofname, &ostat)) {
        -: 2934:#endif
    #####: 2935:	save_orig_name = 1;
    #####: 2936:	strcpy(ofname+s-z_len-1, z_suffix);  /* f.ext.gz -> f.ex.gz  */
        -: 2937:
    #####: 2938:	if (stat(ofname, &ostat) != 0) return 0;
        -: 2939:    } /* !decompress && name_too_long */
        -: 2940:
        -: 2941:    /* Check that the input and output files are different (could be
        -: 2942:     * the same by name truncation or links).
        -: 2943:     */
    #####: 2944:    if (same_file(&istat, &ostat)) {
    #####: 2945:	fprintf(stderr, "%s: %s and %s are the same file\n",
        -: 2946:		progname, ifname, ofname);
    #####: 2947:	exit_code = ERROR;
    #####: 2948:	return ERROR;
        -: 2949:    }
        -: 2950:    /* Ask permission to overwrite the existing file */
    #####: 2951:    if (!force) {
        -: 2952:	char response[80];
    #####: 2953:	strcpy(response,"n");
    #####: 2954:	fprintf(stderr, "%s: %s already exists;", progname, ofname);
    #####: 2955:	if (foreground && isatty(fileno(stdin))) {
    #####: 2956:	    fprintf(stderr, " do you wish to overwrite (y or n)? ");
    #####: 2957:	    fflush(stderr);
    #####: 2958:	    (void)fgets(response, sizeof(response)-1, stdin);
        -: 2959:	}
    #####: 2960:	if (tolow(*response) != 'y') {
    #####: 2961:	    fprintf(stderr, "\tnot overwritten\n");
    #####: 2962:	    if (exit_code == OK) exit_code = WARNING;
    #####: 2963:	    return ERROR;
        -: 2964:	}
        -: 2965:    }
    #####: 2966:    (void) chmod(ofname, 0777);
    #####: 2967:    if (unlink(ofname)) {
    #####: 2968:	fprintf(stderr, "%s: ", progname);
    #####: 2969:	perror(ofname);
    #####: 2970:	exit_code = ERROR;
    #####: 2971:	return ERROR;
        -: 2972:    }
    #####: 2973:    return OK;
        -: 2974:}
        -: 2975:
        -: 2976:
        -: 2977:/* ========================================================================
        -: 2978: * Set the access and modification times from the given stat buffer.
        -: 2979: */
       13: 2980:local void reset_times (name, statb)
        -: 2981:    char *name;
        -: 2982:    struct stat *statb;
        -: 2983:{
        -: 2984:#ifndef NO_UTIME
        -: 2985:    struct utimbuf	timep;
        -: 2986:
        -: 2987:    /* Copy the time stamp */
       13: 2988:    timep.actime  = statb->st_atime;
       13: 2989:    timep.modtime = statb->st_mtime;
        -: 2990:
        -: 2991:    /* Some systems (at least OS/2) do not support utime on directories */
       13: 2992:    if (utime(name, &timep) && !S_ISDIR(statb->st_mode)) {
    #####: 2993:	WARN((stderr, "%s: ", progname));
    #####: 2994:	if (!quiet) perror(ofname);
        -: 2995:    }
        -: 2996:#else
        -: 2997:    name = name; statb = statb; /* avoid warnings */
        -: 2998:#endif
       13: 2999:}
        -: 3000:
        -: 3001:
        -: 3002:/* ========================================================================
        -: 3003: * Copy modes, times, ownership from input file to output file.
        -: 3004: * IN assertion: to_stdout is false.
        -: 3005: */
       13: 3006:local void copy_stat(ifstat)
        -: 3007:    struct stat *ifstat;
        -: 3008:{
        -: 3009:#ifndef NO_UTIME
       13: 3010:    if (decompress && time_stamp != 0 && ifstat->st_mtime != time_stamp) {
    #####: 3011:	ifstat->st_mtime = time_stamp;
    #####: 3012:	if (verbose) {
    #####: 3013:	    fprintf(stderr, "%s: time stamp restored\n", ofname);
        -: 3014:	}
        -: 3015:    }
       13: 3016:    reset_times(ofname, ifstat);
        -: 3017:#endif
        -: 3018:    /* Copy the protection modes */
       13: 3019:    if (chmod(ofname, ifstat->st_mode & 07777)) {
    #####: 3020:	WARN((stderr, "%s: ", progname));
    #####: 3021:	if (!quiet) perror(ofname);
        -: 3022:    }
        -: 3023:#ifndef NO_CHOWN
       13: 3024:    chown(ofname, ifstat->st_uid, ifstat->st_gid);  /* Copy ownership */
        -: 3025:#endif
       13: 3026:    remove_ofname = 0;
        -: 3027:    /* It's now safe to remove the input file: */
       13: 3028:    (void) chmod(ifname, 0777);
       13: 3029:    if (unlink(ifname)) {
    #####: 3030:	WARN((stderr, "%s: ", progname));
    #####: 3031:	if (!quiet) perror(ifname);
        -: 3032:    }
       13: 3033:}
        -: 3034:
        -: 3035:#ifndef NO_DIR
        -: 3036:
        -: 3037:/* ========================================================================
        -: 3038: * Recurse through the given directory. This code is taken from ncompress.
        -: 3039: */
        -: 3040:local void treat_dir(dir)
        -: 3041:    char *dir;
        -: 3042:{
        -: 3043:    dir_type *dp;
        -: 3044:    DIR      *dirp;
        -: 3045:    char     nbuf[MAX_PATH_LEN];
        -: 3046:    int      len;
        -: 3047:
        -: 3048:    dirp = opendir(dir);
        -: 3049:    
        -: 3050:    if (dirp == NULL) {
        -: 3051:	fprintf(stderr, "%s: %s unreadable\n", progname, dir);
        -: 3052:	exit_code = ERROR;
        -: 3053:	return ;
        -: 3054:    }
        -: 3055:    /*
        -: 3056:     ** WARNING: the following algorithm could occasionally cause
        -: 3057:     ** compress to produce error warnings of the form "<filename>.gz
        -: 3058:     ** already has .gz suffix - ignored". This occurs when the
        -: 3059:     ** .gz output file is inserted into the directory below
        -: 3060:     ** readdir's current pointer.
        -: 3061:     ** These warnings are harmless but annoying, so they are suppressed
        -: 3062:     ** with option -r (except when -v is on). An alternative
        -: 3063:     ** to allowing this would be to store the entire directory
        -: 3064:     ** list in memory, then compress the entries in the stored
        -: 3065:     ** list. Given the depth-first recursive algorithm used here,
        -: 3066:     ** this could use up a tremendous amount of memory. I don't
        -: 3067:     ** think it's worth it. -- Dave Mack
        -: 3068:     ** (An other alternative might be two passes to avoid depth-first.)
        -: 3069:     */
        -: 3070:    
        -: 3071:    while ((dp = readdir(dirp)) != NULL) {
        -: 3072:
        -: 3073:	if (strequ(dp->d_name,".") || strequ(dp->d_name,"..")) {
        -: 3074:	    continue;
        -: 3075:	}
        -: 3076:	len = strlen(dir);
        -: 3077:	if (len + NLENGTH(dp) + 1 < MAX_PATH_LEN - 1) {
        -: 3078:	    strcpy(nbuf,dir);
        -: 3079:	    if (len != 0 /* dir = "" means current dir on Amiga */
        -: 3080:#ifdef PATH_SEP2
        -: 3081:		&& dir[len-1] != PATH_SEP2
        -: 3082:#endif
        -: 3083:#ifdef PATH_SEP3
        -: 3084:		&& dir[len-1] != PATH_SEP3
        -: 3085:#endif
        -: 3086:	    ) {
        -: 3087:		nbuf[len++] = PATH_SEP;
        -: 3088:	    }
        -: 3089:	    strcpy(nbuf+len, dp->d_name);
        -: 3090:	    treat_file(nbuf);
        -: 3091:	} else {
        -: 3092:	    fprintf(stderr,"%s: %s/%s: pathname too long\n",
        -: 3093:		    progname, dir, dp->d_name);
        -: 3094:	    exit_code = ERROR;
        -: 3095:	}
        -: 3096:    }
        -: 3097:    closedir(dirp);
        -: 3098:}
        -: 3099:#endif /* ? NO_DIR */
        -: 3100:
        -: 3101:/* ========================================================================
        -: 3102: * Free all dynamically allocated variables and exit with the given code.
        -: 3103: */
      211: 3104:local void do_exit(exitcode)
        -: 3105:    int exitcode;
        -: 3106:{
      211: 3107:    if (env != NULL)  free(env),  env  = NULL;
      211: 3108:    if (args != NULL) free((char*)args), args = NULL;
        -: 3109:    FREE(inbuf);
        -: 3110:    FREE(outbuf);
        -: 3111:    FREE(d_buf);
        -: 3112:    FREE(window);
        -: 3113:#ifndef MAXSEG_64K
        -: 3114:    FREE(tab_prefix);
        -: 3115:#else
        -: 3116:    FREE(tab_prefix0);
        -: 3117:    FREE(tab_prefix1);
        -: 3118:#endif
      211: 3119:    exit(exitcode);
        -: 3120:}
        -: 3121:
        -: 3122:/* ========================================================================
        -: 3123: * Signal and error handler.
        -: 3124: */
        1: 3125:RETSIGTYPE abort_gzip()
        -: 3126:{
        1: 3127:   if (remove_ofname) {
    #####: 3128:       close(ofd);
    #####: 3129:       unlink (ofname);
        -: 3130:   }
        1: 3131:   do_exit(ERROR);
    #####: 3132:}
        -: 3133:/* inflate.c -- Not copyrighted 1992 by Mark Adler
        -: 3134:   version c10p1, 10 January 1993 */
        -: 3135:
        -: 3136:/* You can do whatever you like with this source file, though I would
        -: 3137:   prefer that if you modify it and redistribute it that you include
        -: 3138:   comments to that effect with your name and the date.  Thank you.
        -: 3139:   [The history has been moved to the file ChangeLog.]
        -: 3140: */
        -: 3141:
        -: 3142:/*
        -: 3143:   Inflate deflated (PKZIP's method 8 compressed) data.  The compression
        -: 3144:   method searches for as much of the current string of bytes (up to a
        -: 3145:   length of 258) in the previous 32K bytes.  If it doesn't find any
        -: 3146:   matches (of at least length 3), it codes the next byte.  Otherwise, it
        -: 3147:   codes the length of the matched string and its distance backwards from
        -: 3148:   the current position.  There is a single Huffman code that codes both
        -: 3149:   single bytes (called "literals") and match lengths.  A second Huffman
        -: 3150:   code codes the distance information, which follows a length code.  Each
        -: 3151:   length or distance code actually represents a base value and a number
        -: 3152:   of "extra" (sometimes zero) bits to get to add to the base value.  At
        -: 3153:   the end of each deflated block is a special end-of-block (EOB) literal/
        -: 3154:   length code.  The decoding process is basically: get a literal/length
        -: 3155:   code; if EOB then done; if a literal, emit the decoded byte; if a
        -: 3156:   length then get the distance and emit the referred-to bytes from the
        -: 3157:   sliding window of previously emitted data.
        -: 3158:
        -: 3159:   There are (currently) three kinds of inflate blocks: stored, fixed, and
        -: 3160:   dynamic.  The compressor deals with some chunk of data at a time, and
        -: 3161:   decides which method to use on a chunk-by-chunk basis.  A chunk might
        -: 3162:   typically be 32K or 64K.  If the chunk is uncompressible, then the
        -: 3163:   "stored" method is used.  In this case, the bytes are simply stored as
        -: 3164:   is, eight bits per byte, with none of the above coding.  The bytes are
        -: 3165:   preceded by a count, since there is no longer an EOB code.
        -: 3166:
        -: 3167:   If the data is compressible, then either the fixed or dynamic methods
        -: 3168:   are used.  In the dynamic method, the compressed data is preceded by
        -: 3169:   an encoding of the literal/length and distance Huffman codes that are
        -: 3170:   to be used to decode this block.  The representation is itself Huffman
        -: 3171:   coded, and so is preceded by a description of that code.  These code
        -: 3172:   descriptions take up a little space, and so for small blocks, there is
        -: 3173:   a predefined set of codes, called the fixed codes.  The fixed method is
        -: 3174:   used if the block codes up smaller that way (usually for quite small
        -: 3175:   chunks), otherwise the dynamic method is used.  In the latter case, the
        -: 3176:   codes are customized to the probabilities in the current block, and so
        -: 3177:   can code it much better than the pre-determined fixed codes.
        -: 3178: 
        -: 3179:   The Huffman codes themselves are decoded using a mutli-level table
        -: 3180:   lookup, in order to maximize the speed of decoding plus the speed of
        -: 3181:   building the decoding tables.  See the comments below that precede the
        -: 3182:   lbits and dbits tuning parameters.
        -: 3183: */
        -: 3184:
        -: 3185:
        -: 3186:/*
        -: 3187:   Notes beyond the 1.93a appnote.txt:
        -: 3188:
        -: 3189:   1. Distance pointers never point before the beginning of the output
        -: 3190:      stream.
        -: 3191:   2. Distance pointers can point back across blocks, up to 32k away.
        -: 3192:   3. There is an implied maximum of 7 bits for the bit length table and
        -: 3193:      15 bits for the actual data.
        -: 3194:   4. If only one code exists, then it is encoded using one bit.  (Zero
        -: 3195:      would be more efficient, but perhaps a little confusing.)  If two
        -: 3196:      codes exist, they are coded using one bit each (0 and 1).
        -: 3197:   5. There is no way of sending zero distance codes--a dummy must be
        -: 3198:      sent if there are none.  (History: a pre 2.0 version of PKZIP would
        -: 3199:      store blocks with no distance codes, but this was discovered to be
        -: 3200:      too harsh a criterion.)  Valid only for 1.93a.  2.04c does allow
        -: 3201:      zero distance codes, which is sent as one code of zero bits in
        -: 3202:      length.
        -: 3203:   6. There are up to 286 literal/length codes.  Code 256 represents the
        -: 3204:      end-of-block.  Note however that the static length tree defines
        -: 3205:      288 codes just to fill out the Huffman codes.  Codes 286 and 287
        -: 3206:      cannot be used though, since there is no length base or extra bits
        -: 3207:      defined for them.  Similarly, there are up to 30 distance codes.
        -: 3208:      However, static trees define 32 codes (all 5 bits) to fill out the
        -: 3209:      Huffman codes, but the last two had better not show up in the data.
        -: 3210:   7. Unzip can check dynamic Huffman blocks for complete code sets.
        -: 3211:      The exception is that a single code would not be complete (see #4).
        -: 3212:   8. The five bits following the block type is really the number of
        -: 3213:      literal codes sent minus 257.
        -: 3214:   9. Length codes 8,16,16 are interpreted as 13 length codes of 8 bits
        -: 3215:      (1+6+6).  Therefore, to output three times the length, you output
        -: 3216:      three codes (1+1+1), whereas to output four times the same length,
        -: 3217:      you only need two codes (1+3).  Hmm.
        -: 3218:  10. In the tree reconstruction algorithm, Code = Code + Increment
        -: 3219:      only if BitLength(i) is not zero.  (Pretty obvious.)
        -: 3220:  11. Correction: 4 Bits: # of Bit Length codes - 4     (4 - 19)
        -: 3221:  12. Note: length code 284 can represent 227-258, but length code 285
        -: 3222:      really is 258.  The last length deserves its own, short code
        -: 3223:      since it gets used a lot in very redundant files.  The length
        -: 3224:      258 is special since 258 - 3 (the min match length) is 255.
        -: 3225:  13. The literal/length and distance code bit lengths are read as a
        -: 3226:      single stream of lengths.  It is possible (and advantageous) for
        -: 3227:      a repeat code (16, 17, or 18) to go across the boundary between
        -: 3228:      the two sets of lengths.
        -: 3229: */
        -: 3230:
        -: 3231:/*
        -: 3232:#ifndef lint
        -: 3233:static char rcsid[] = "$Id: inflate.c,v 0.13 1993/04/26 14:18:22 jloup Exp $";
        -: 3234:#endif
        -: 3235:*/
        -: 3236:
        -: 3237:#if defined(STDC_HEADERS) || !defined(NO_STDLIB_H)
        -: 3238:#  include <stdlib.h>
        -: 3239:#endif
        -: 3240:
        -: 3241:#define slide window
        -: 3242:
        -: 3243:/* Huffman code lookup table entry--this entry is four bytes for machines
        -: 3244:   that have 16-bit pointers (e.g. PC's in the small or medium model).
        -: 3245:   Valid extra bits are 0..13.  e == 15 is EOB (end of block), e == 16
        -: 3246:   means that v is a literal, 16 < e < 32 means that v is a pointer to
        -: 3247:   the next table, which codes e - 16 bits, and lastly e == 99 indicates
        -: 3248:   an unused code.  If a code with e == 99 is looked up, this implies an
        -: 3249:   error in the data. */
        -: 3250:struct huft {
        -: 3251:  uch e;                /* number of extra bits or operation */
        -: 3252:  uch b;                /* number of bits in this code or subcode */
        -: 3253:  union {
        -: 3254:    ush n;              /* literal, length base, or distance base */
        -: 3255:    struct huft *t;     /* pointer to next level of table */
        -: 3256:  } v;
        -: 3257:};
        -: 3258:
        -: 3259:
        -: 3260:/* Function prototypes */
        -: 3261:int huft_build OF((unsigned *, unsigned, unsigned, ush *, ush *,
        -: 3262:                   struct huft **, int *));
        -: 3263:int huft_free OF((struct huft *));
        -: 3264:int inflate_codes OF((struct huft *, struct huft *, int, int));
        -: 3265:int inflate_stored OF((void));
        -: 3266:int inflate_fixed OF((void));
        -: 3267:int inflate_dynamic OF((void));
        -: 3268:int inflate_block OF((int *));
        -: 3269:int inflate OF((void));
        -: 3270:
        -: 3271:
        -: 3272:/* The inflate algorithm uses a sliding 32K byte window on the uncompressed
        -: 3273:   stream to find repeated byte strings.  This is implemented here as a
        -: 3274:   circular buffer.  The index is updated simply by incrementing and then
        -: 3275:   and'ing with 0x7fff (32K-1). */
        -: 3276:/* It is left to other modules to supply the 32K area.  It is assumed
        -: 3277:   to be usable as if it were declared "uch slide[32768];" or as just
        -: 3278:   "uch *slide;" and then malloc'ed in the latter case.  The definition
        -: 3279:   must be in unzip.h, included above. */
        -: 3280:/* unsigned wp;             current position in slide */
        -: 3281:#define wp outcnt
        -: 3282:#define flush_output(w) (wp=(w),flush_window())
        -: 3283:
        -: 3284:/* Tables for deflate from PKZIP's appnote.txt. */
        -: 3285:static unsigned border[] = {    /* Order of the bit length code lengths */
        -: 3286:        16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
        -: 3287:static ush cplens[] = {         /* Copy lengths for literal codes 257..285 */
        -: 3288:        3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
        -: 3289:        35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0};
        -: 3290:        /* note: see note #13 above about the 258 in this list. */
        -: 3291:static ush cplext[] = {         /* Extra bits for literal codes 257..285 */
        -: 3292:        0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2,
        -: 3293:        3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 99, 99}; /* 99==invalid */
        -: 3294:static ush cpdist[] = {         /* Copy offsets for distance codes 0..29 */
        -: 3295:        1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
        -: 3296:        257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
        -: 3297:        8193, 12289, 16385, 24577};
        -: 3298:static ush cpdext[] = {         /* Extra bits for distance codes */
        -: 3299:        0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6,
        -: 3300:        7, 7, 8, 8, 9, 9, 10, 10, 11, 11,
        -: 3301:        12, 12, 13, 13};
        -: 3302:
        -: 3303:
        -: 3304:
        -: 3305:/* Macros for inflate() bit peeking and grabbing.
        -: 3306:   The usage is:
        -: 3307:   
        -: 3308:        NEEDBITS(j)
        -: 3309:        x = b & mask_bits[j];
        -: 3310:        DUMPBITS(j)
        -: 3311:
        -: 3312:   where NEEDBITS makes sure that b has at least j bits in it, and
        -: 3313:   DUMPBITS removes the bits from b.  The macros use the variable k
        -: 3314:   for the number of bits in b.  Normally, b and k are register
        -: 3315:   variables for speed, and are initialized at the beginning of a
        -: 3316:   routine that uses these macros from a global bit buffer and count.
        -: 3317:
        -: 3318:   If we assume that EOB will be the longest code, then we will never
        -: 3319:   ask for bits with NEEDBITS that are beyond the end of the stream.
        -: 3320:   So, NEEDBITS should not read any more bytes than are needed to
        -: 3321:   meet the request.  Then no bytes need to be "returned" to the buffer
        -: 3322:   at the end of the last block.
        -: 3323:
        -: 3324:   However, this assumption is not true for fixed blocks--the EOB code
        -: 3325:   is 7 bits, but the other literal/length codes can be 8 or 9 bits.
        -: 3326:   (The EOB code is shorter than other codes because fixed blocks are
        -: 3327:   generally short.  So, while a block always has an EOB, many other
        -: 3328:   literal/length codes have a significantly lower probability of
        -: 3329:   showing up at all.)  However, by making the first table have a
        -: 3330:   lookup of seven bits, the EOB code will be found in that first
        -: 3331:   lookup, and so will not require that too many bits be pulled from
        -: 3332:   the stream.
        -: 3333: */
        -: 3334:
        -: 3335:ulg bb;                         /* bit buffer */
        -: 3336:unsigned bk;                    /* bits in bit buffer */
        -: 3337:
        -: 3338:ush mask_bits[] = {
        -: 3339:    0x0000,
        -: 3340:    0x0001, 0x0003, 0x0007, 0x000f, 0x001f, 0x003f, 0x007f, 0x00ff,
        -: 3341:    0x01ff, 0x03ff, 0x07ff, 0x0fff, 0x1fff, 0x3fff, 0x7fff, 0xffff
        -: 3342:};
        -: 3343:
        -: 3344:#ifdef CRYPT
        -: 3345:  uch cc;
        -: 3346:#  define NEXTBYTE() \
        -: 3347:     (decrypt ? (cc = get_byte(), zdecode(cc), cc) : get_byte())
        -: 3348:#else
        -: 3349:#  define NEXTBYTE()  (uch)get_byte()
        -: 3350:#endif
        -: 3351:#define NEEDBITS(n) {while(k<(n)){b|=((ulg)NEXTBYTE())<<k;k+=8;}}
        -: 3352:#define DUMPBITS(n) {b>>=(n);k-=(n);}
        -: 3353:
        -: 3354:
        -: 3355:/*
        -: 3356:   Huffman code decoding is performed using a multi-level table lookup.
        -: 3357:   The fastest way to decode is to simply build a lookup table whose
        -: 3358:   size is determined by the longest code.  However, the time it takes
        -: 3359:   to build this table can also be a factor if the data being decoded
        -: 3360:   is not very long.  The most common codes are necessarily the
        -: 3361:   shortest codes, so those codes dominate the decoding time, and hence
        -: 3362:   the speed.  The idea is you can have a shorter table that decodes the
        -: 3363:   shorter, more probable codes, and then point to subsidiary tables for
        -: 3364:   the longer codes.  The time it costs to decode the longer codes is
        -: 3365:   then traded against the time it takes to make longer tables.
        -: 3366:
        -: 3367:   This results of this trade are in the variables lbits and dbits
        -: 3368:   below.  lbits is the number of bits the first level table for literal/
        -: 3369:   length codes can decode in one step, and dbits is the same thing for
        -: 3370:   the distance codes.  Subsequent tables are also less than or equal to
        -: 3371:   those sizes.  These values may be adjusted either when all of the
        -: 3372:   codes are shorter than that, in which case the longest code length in
        -: 3373:   bits is used, or when the shortest code is *longer* than the requested
        -: 3374:   table size, in which case the length of the shortest code in bits is
        -: 3375:   used.
        -: 3376:
        -: 3377:   There are two different values for the two tables, since they code a
        -: 3378:   different number of possibilities each.  The literal/length table
        -: 3379:   codes 286 possible values, or in a flat code, a little over eight
        -: 3380:   bits.  The distance table codes 30 possible values, or a little less
        -: 3381:   than five bits, flat.  The optimum values for speed end up being
        -: 3382:   about one bit more than those, so lbits is 8+1 and dbits is 5+1.
        -: 3383:   The optimum values may differ though from machine to machine, and
        -: 3384:   possibly even between compilers.  Your mileage may vary.
        -: 3385: */
        -: 3386:
        -: 3387:
        -: 3388:int lbits = 9;          /* bits in base literal/length lookup table */
        -: 3389:int dbits = 6;          /* bits in base distance lookup table */
        -: 3390:
        -: 3391:
        -: 3392:/* If BMAX needs to be larger than 16, then h and x[] should be ulg. */
        -: 3393:#define BMAX 16         /* maximum bit length of any code (16 for explode) */
        -: 3394:#define N_MAX 288       /* maximum number of codes in any set */
        -: 3395:
        -: 3396:
        -: 3397:unsigned hufts;         /* track memory usage */
        -: 3398:
        -: 3399:
       39: 3400:int huft_build(b, n, s, d, e, t, m)
        -: 3401:unsigned *b;            /* code lengths in bits (all assumed <= BMAX) */
        -: 3402:unsigned n;             /* number of codes (assumed <= N_MAX) */
        -: 3403:unsigned s;             /* number of simple-valued codes (0..s-1) */
        -: 3404:ush *d;                 /* list of base values for non-simple codes */
        -: 3405:ush *e;                 /* list of extra bits for non-simple codes */
        -: 3406:struct huft **t;        /* result: starting table */
        -: 3407:int *m;                 /* maximum lookup bits, returns actual */
        -: 3408:/* Given a list of code lengths and a maximum table size, make a set of
        -: 3409:   tables to decode that set of codes.  Return zero on success, one if
        -: 3410:   the given code set is incomplete (the tables are still built in this
        -: 3411:   case), two if the input is invalid (all zero length codes or an
        -: 3412:   oversubscribed set of lengths), and three if not enough memory. */
        -: 3413:{
        -: 3414:  unsigned a;                   /* counter for codes of length k */
        -: 3415:  unsigned c[BMAX+1];           /* bit length count table */
        -: 3416:  unsigned f;                   /* i repeats in table every f entries */
        -: 3417:  int g;                        /* maximum code length */
        -: 3418:  int h;                        /* table level */
        -: 3419:  register unsigned i;          /* counter, current code */
        -: 3420:  register unsigned j;          /* counter */
        -: 3421:  register int k;               /* number of bits in current code */
        -: 3422:  int l;                        /* bits per table (returned in m) */
        -: 3423:  register unsigned *p;         /* pointer into c[], b[], or v[] */
        -: 3424:  register struct huft *q;      /* points to current table */
        -: 3425:  struct huft r;                /* table entry for structure assignment */
        -: 3426:  struct huft *u[BMAX];         /* table stack */
        -: 3427:  unsigned v[N_MAX];            /* values in order of bit length */
        -: 3428:  register int w;               /* bits before this table == (l * h) */
        -: 3429:  unsigned x[BMAX+1];           /* bit offsets, then code stack */
        -: 3430:  unsigned *xp;                 /* pointer into x */
        -: 3431:  int y;                        /* number of dummy codes added */
        -: 3432:  unsigned z;                   /* number of entries in current table */
        -: 3433:
        -: 3434:
        -: 3435:  /* Generate counts for each bit length */
       39: 3436:  memzero(c, sizeof(c));
       39: 3437:  p = b;  i = n;
        -: 3438:  do {
        -: 3439:    Tracecv(*p, (stderr, (n-i >= ' ' && n-i <= '~' ? "%c %d\n" : "0x%x %d\n"), 
        -: 3440:	    n-i, *p));
     4354: 3441:    c[*p++]++;                  /* assume all entries <= BMAX */
     4354: 3442:  } while (--i);
       39: 3443:  if (c[0] == n)                /* null input--all zero length codes */
        -: 3444:  {
    #####: 3445:    *t = (struct huft *)NULL;
    #####: 3446:    *m = 0;
    #####: 3447:    return 0;
        -: 3448:  }
        -: 3449:
        -: 3450:
        -: 3451:  /* Find minimum and maximum length, bound *m by those */
       39: 3452:  l = *m;
      131: 3453:  for (j = 1; j <= BMAX; j++)
      131: 3454:    if (c[j])
       39: 3455:      break;
       39: 3456:  k = j;                        /* minimum code length */
       39: 3457:  if ((unsigned)l < j)
    #####: 3458:    l = j;
      273: 3459:  for (i = BMAX; i; i--)
      273: 3460:    if (c[i])
       39: 3461:      break;
       39: 3462:  g = i;                        /* maximum code length */
       39: 3463:  if ((unsigned)l > i)
       12: 3464:    l = i;
       39: 3465:  *m = l;
        -: 3466:
        -: 3467:
        -: 3468:  /* Adjust last length count to fill out codes, if needed */
      298: 3469:  for (y = 1 << j; j < i; j++, y <<= 1)
      259: 3470:    if ((y -= c[j]) < 0)
    #####: 3471:      return 2;                 /* bad input: more codes than bits */
       39: 3472:  if ((y -= c[i]) < 0)
    #####: 3473:    return 2;
       39: 3474:  c[i] += y;
        -: 3475:
        -: 3476:
        -: 3477:  /* Generate starting offsets into the value table for each length */
       39: 3478:  x[1] = j = 0;
       39: 3479:  p = c + 1;  xp = x + 2;
      429: 3480:  while (--i) {                 /* note that i == g from above */
      351: 3481:    *xp++ = (j += *p++);
        -: 3482:  }
        -: 3483:
        -: 3484:
        -: 3485:  /* Make a table of values in order of bit lengths */
       39: 3486:  p = b;  i = 0;
        -: 3487:  do {
     4354: 3488:    if ((j = *p++) != 0)
     2044: 3489:      v[x[j]++] = i;
     4354: 3490:  } while (++i < n);
        -: 3491:
        -: 3492:
        -: 3493:  /* Generate the Huffman codes and for each, make the table entries */
       39: 3494:  x[0] = i = 0;                 /* first Huffman code is zero */
       39: 3495:  p = v;                        /* grab values in bit order */
       39: 3496:  h = -1;                       /* no tables yet--level -1 */
       39: 3497:  w = -l;                       /* bits decoded == (l * h) */
       39: 3498:  u[0] = (struct huft *)NULL;   /* just to keep compilers happy */
       39: 3499:  q = (struct huft *)NULL;      /* ditto */
       39: 3500:  z = 0;                        /* ditto */
        -: 3501:
        -: 3502:  /* go through the bit lengths (k already is bits in shortest code) */
      337: 3503:  for (; k <= g; k++)
        -: 3504:  {
      298: 3505:    a = c[k];
     2640: 3506:    while (a--)
        -: 3507:    {
        -: 3508:      /* here i is the Huffman code of length k bits for value *p */
        -: 3509:      /* make tables up to required level */
     4270: 3510:      while (k > w + l)
        -: 3511:      {
      182: 3512:        h++;
      182: 3513:        w += l;                 /* previous table always l bits */
        -: 3514:
        -: 3515:        /* compute minimum size table less than or equal to l bits */
      182: 3516:        z = (z = g - w) > (unsigned)l ? l : z;  /* upper limit on table size */
      182: 3517:        if ((f = 1 << (j = k - w)) > a + 1)     /* try a k-w bit table */
        -: 3518:        {                       /* too few codes for k-w bit table */
       77: 3519:          f -= a + 1;           /* deduct codes from patterns left */
       77: 3520:          xp = c + k;
      287: 3521:          while (++j < z)       /* try smaller tables up to z bits */
        -: 3522:          {
      145: 3523:            if ((f <<= 1) <= *++xp)
       12: 3524:              break;            /* enough codes to use up j bits */
      133: 3525:            f -= *xp;           /* else deduct codes from patterns */
        -: 3526:          }
        -: 3527:        }
      182: 3528:        z = 1 << j;             /* table entries for j-bit table */
        -: 3529:
        -: 3530:        /* allocate and link in new table */
      182: 3531:        if ((q = (struct huft *)malloc((z + 1)*sizeof(struct huft))) ==
        -: 3532:            (struct huft *)NULL)
        -: 3533:        {
    #####: 3534:          if (h)
    #####: 3535:            huft_free(u[0]);
    #####: 3536:          return 3;             /* not enough memory */
        -: 3537:        }
      182: 3538:        hufts += z + 1;         /* track memory usage */
      182: 3539:        *t = q + 1;             /* link to list for huft_free() */
      182: 3540:        *(t = &(q->v.t)) = (struct huft *)NULL;
      182: 3541:        u[h] = ++q;             /* table starts after link */
        -: 3542:
        -: 3543:        /* connect to last table, if there is one */
      182: 3544:        if (h)
        -: 3545:        {
      143: 3546:          x[h] = i;             /* save pattern for backing up */
      143: 3547:          r.b = (uch)l;         /* bits to dump before this table */
      143: 3548:          r.e = (uch)(16 + j);  /* bits in this table */
      143: 3549:          r.v.t = q;            /* pointer to this table */
      143: 3550:          j = i >> (w - l);     /* (get around Turbo C bug) */
      143: 3551:          u[h-1][j] = r;        /* connect to last table */
        -: 3552:        }
        -: 3553:      }
        -: 3554:
        -: 3555:      /* set up table entry in r */
     2044: 3556:      r.b = (uch)(k - w);
     2044: 3557:      if (p >= v + n)
    #####: 3558:        r.e = 99;               /* out of values--invalid code */
     2044: 3559:      else if (*p < s)
        -: 3560:      {
     1390: 3561:        r.e = (uch)(*p < 256 ? 16 : 15);    /* 256 is end-of-block code */
     1390: 3562:        r.v.n = (ush)(*p);             /* simple code is just the value */
     1390: 3563:	p++;                           /* one compiler does not like *p++ */
        -: 3564:      }
        -: 3565:      else
        -: 3566:      {
      654: 3567:        r.e = (uch)e[*p - s];   /* non-simple--look up in lists */
      654: 3568:        r.v.n = d[*p++ - s];
        -: 3569:      }
        -: 3570:
        -: 3571:      /* fill code-like entries with r */
     2044: 3572:      f = 1 << (k - w);
    11291: 3573:      for (j = i >> w; j < z; j += f)
     9247: 3574:        q[j] = r;
        -: 3575:
        -: 3576:      /* backwards increment the k-bit code i */
     4049: 3577:      for (j = 1 << (k - 1); i & j; j >>= 1)
     2005: 3578:        i ^= j;
     2044: 3579:      i ^= j;
        -: 3580:
        -: 3581:      /* backup over finished tables */
     4231: 3582:      while ((i & ((1 << w) - 1)) != x[h])
        -: 3583:      {
      143: 3584:        h--;                    /* don't need to update q */
      143: 3585:        w -= l;
        -: 3586:      }
        -: 3587:    }
        -: 3588:  }
        -: 3589:
        -: 3590:
        -: 3591:  /* Return true (1) if we were given an incomplete table */
       39: 3592:  return y != 0 && g != 1;
        -: 3593:}
        -: 3594:
        -: 3595:
        -: 3596:
       39: 3597:int huft_free(t)
        -: 3598:struct huft *t;         /* table to free */
        -: 3599:/* Free the malloc'ed tables built by huft_build(), which makes a linked
        -: 3600:   list of the tables it made, with the links in a dummy first entry of
        -: 3601:   each table. */
        -: 3602:{
        -: 3603:  register struct huft *p, *q;
        -: 3604:
        -: 3605:
        -: 3606:  /* Go through linked list, freeing from the malloced (t[-1]) address. */
       39: 3607:  p = t;
      260: 3608:  while (p != (struct huft *)NULL)
        -: 3609:  {
      182: 3610:    q = (--p)->v.t;
      182: 3611:    free((char*)p);
      182: 3612:    p = q;
        -: 3613:  } 
       39: 3614:  return 0;
        -: 3615:}
        -: 3616:
        -: 3617:
       13: 3618:int inflate_codes(tl, td, bl, bd)
        -: 3619:struct huft *tl, *td;   /* literal/length and distance decoder tables */
        -: 3620:int bl, bd;             /* number of bits decoded by tl[] and td[] */
        -: 3621:/* inflate (decompress) the codes in a deflated (compressed) block.
        -: 3622:   Return an error code or zero if it all goes ok. */
        -: 3623:{
        -: 3624:  register unsigned e;  /* table entry flag/number of extra bits */
        -: 3625:  unsigned n, d;        /* length and index for copy */
        -: 3626:  unsigned w;           /* current window position */
        -: 3627:  struct huft *t;       /* pointer to table entry */
        -: 3628:  unsigned ml, md;      /* masks for bl and bd bits */
        -: 3629:  register ulg b;       /* bit buffer */
        -: 3630:  register unsigned k;  /* number of bits in bit buffer */
        -: 3631:
        -: 3632:
        -: 3633:  /* make local copies of globals */
       13: 3634:  b = bb;                       /* initialize bit buffer */
       13: 3635:  k = bk;
       13: 3636:  w = wp;                       /* initialize window position */
        -: 3637:
        -: 3638:  /* inflate the coded data */
       13: 3639:  ml = mask_bits[bl];           /* precompute masks for speed */
       13: 3640:  md = mask_bits[bd];
        -: 3641:  for (;;)                      /* do until end of block */
        -: 3642:  {
    94857: 3643:    NEEDBITS((unsigned)bl)
    94857: 3644:    if ((e = (t = tl + ((unsigned)b & ml))->e) > 16)
        -: 3645:      do {
     1862: 3646:        if (e == 99)
    #####: 3647:          return 1;
     1862: 3648:        DUMPBITS(t->b)
     1862: 3649:        e -= 16;
     1862: 3650:        NEEDBITS(e)
     1862: 3651:      } while ((e = (t = t->v.t + ((unsigned)b & mask_bits[e]))->e) > 16);
    94857: 3652:    DUMPBITS(t->b)
    94857: 3653:    if (e == 16)                /* then it's a literal */
        -: 3654:    {
    42410: 3655:      slide[w++] = (uch)t->v.n;
        -: 3656:      Tracevv((stderr, "%c", slide[w-1]));
    42410: 3657:      if (w == WSIZE)
        -: 3658:      {
        1: 3659:        flush_output(w);
        1: 3660:        w = 0;
        -: 3661:      }
        -: 3662:    }
        -: 3663:    else                        /* it's an EOB or a length */
        -: 3664:    {
        -: 3665:      /* exit if end of block */
    52447: 3666:      if (e == 15)
       13: 3667:        break;
        -: 3668:
        -: 3669:      /* get length of block to copy */
    52434: 3670:      NEEDBITS(e)
    52434: 3671:      n = t->v.n + ((unsigned)b & mask_bits[e]);
    52434: 3672:      DUMPBITS(e);
        -: 3673:
        -: 3674:      /* decode distance of block to copy */
    52434: 3675:      NEEDBITS((unsigned)bd)
    52434: 3676:      if ((e = (t = td + ((unsigned)b & md))->e) > 16)
        -: 3677:        do {
     1932: 3678:          if (e == 99)
    #####: 3679:            return 1;
     1932: 3680:          DUMPBITS(t->b)
     1932: 3681:          e -= 16;
     1932: 3682:          NEEDBITS(e)
     1932: 3683:        } while ((e = (t = t->v.t + ((unsigned)b & mask_bits[e]))->e) > 16);
    52434: 3684:      DUMPBITS(t->b)
    52434: 3685:      NEEDBITS(e)
    52434: 3686:      d = w - t->v.n - ((unsigned)b & mask_bits[e]);
    52434: 3687:      DUMPBITS(e)
        -: 3688:      Tracevv((stderr,"\\[%d,%d]", w-d, n));
        -: 3689:
        -: 3690:      /* do the copy */
        -: 3691:      do {
    52459: 3692:        n -= (e = (e = WSIZE - ((d &= WSIZE-1) > w ? d : w)) > n ? n : e);
        -: 3693:#if !defined(NOMEMCPY) && !defined(DEBUG)
    52459: 3694:        if (w - d >= e)         /* (this test assumes unsigned comparison) */
        -: 3695:        {
    52242: 3696:          memcpy(slide + w, slide + d, e);
    52242: 3697:          w += e;
    52242: 3698:          d += e;
        -: 3699:        }
        -: 3700:        else                      /* do it slow to avoid memcpy() overlap */
        -: 3701:#endif /* !NOMEMCPY */
        -: 3702:          do {
     9496: 3703:            slide[w++] = slide[d++];
        -: 3704:	    Tracevv((stderr, "%c", slide[w-1]));
     9496: 3705:          } while (--e);
    52459: 3706:        if (w == WSIZE)
        -: 3707:        {
       12: 3708:          flush_output(w);
       12: 3709:          w = 0;
        -: 3710:        }
    52459: 3711:      } while (n);
        -: 3712:    }
    94844: 3713:  }
        -: 3714:
        -: 3715:
        -: 3716:  /* restore the globals from the locals */
       13: 3717:  wp = w;                       /* restore global window pointer */
       13: 3718:  bb = b;                       /* restore global bit buffer */
       13: 3719:  bk = k;
        -: 3720:
        -: 3721:  /* done */
       13: 3722:  return 0;
        -: 3723:}
        -: 3724:
        -: 3725:
        -: 3726:
        2: 3727:int inflate_stored()
        -: 3728:/* "decompress" an inflated type 0 (stored) block. */
        -: 3729:{
        -: 3730:  unsigned n;           /* number of bytes in block */
        -: 3731:  unsigned w;           /* current window position */
        -: 3732:  register ulg b;       /* bit buffer */
        -: 3733:  register unsigned k;  /* number of bits in bit buffer */
        -: 3734:
        -: 3735:
        -: 3736:  /* make local copies of globals */
        2: 3737:  b = bb;                       /* initialize bit buffer */
        2: 3738:  k = bk;
        2: 3739:  w = wp;                       /* initialize window position */
        -: 3740:
        -: 3741:
        -: 3742:  /* go to byte boundary */
        2: 3743:  n = k & 7;
        2: 3744:  DUMPBITS(n);
        -: 3745:
        -: 3746:
        -: 3747:  /* get the length and its complement */
        2: 3748:  NEEDBITS(16)
        2: 3749:  n = ((unsigned)b & 0xffff);
        2: 3750:  DUMPBITS(16)
        2: 3751:  NEEDBITS(16)
        2: 3752:  if (n != (unsigned)((~b) & 0xffff))
    #####: 3753:    return 1;                   /* error in compressed data */
        2: 3754:  DUMPBITS(16)
        -: 3755:
        -: 3756:
        -: 3757:  /* read and output the compressed data */
    34235: 3758:  while (n--)
        -: 3759:  {
    34231: 3760:    NEEDBITS(8)
    34231: 3761:    slide[w++] = (uch)b;
    34231: 3762:    if (w == WSIZE)
        -: 3763:    {
        1: 3764:      flush_output(w);
        1: 3765:      w = 0;
        -: 3766:    }
    34231: 3767:    DUMPBITS(8)
        -: 3768:  }
        -: 3769:
        -: 3770:
        -: 3771:  /* restore the globals from the locals */
        2: 3772:  wp = w;                       /* restore global window pointer */
        2: 3773:  bb = b;                       /* restore global bit buffer */
        2: 3774:  bk = k;
        2: 3775:  return 0;
        -: 3776:}
        -: 3777:
        -: 3778:
        -: 3779:
    #####: 3780:int inflate_fixed()
        -: 3781:/* decompress an inflated type 1 (fixed Huffman codes) block.  We should
        -: 3782:   either replace this with a custom decoder, or at least precompute the
        -: 3783:   Huffman tables. */
        -: 3784:{
        -: 3785:  int i;                /* temporary variable */
        -: 3786:  struct huft *tl;      /* literal/length code table */
        -: 3787:  struct huft *td;      /* distance code table */
        -: 3788:  int bl;               /* lookup bits for tl */
        -: 3789:  int bd;               /* lookup bits for td */
        -: 3790:  unsigned l[288];      /* length list for huft_build */
        -: 3791:
        -: 3792:
        -: 3793:  /* set up literal table */
    #####: 3794:  for (i = 0; i < 144; i++)
    #####: 3795:    l[i] = 8;
    #####: 3796:  for (; i < 256; i++)
    #####: 3797:    l[i] = 9;
    #####: 3798:  for (; i < 280; i++)
    #####: 3799:    l[i] = 7;
    #####: 3800:  for (; i < 288; i++)          /* make a complete, but wrong code set */
    #####: 3801:    l[i] = 8;
    #####: 3802:  bl = 7;
    #####: 3803:  if ((i = huft_build(l, 288, 257, cplens, cplext, &tl, &bl)) != 0)
    #####: 3804:    return i;
        -: 3805:
        -: 3806:
        -: 3807:  /* set up distance table */
    #####: 3808:  for (i = 0; i < 30; i++)      /* make an incomplete code set */
    #####: 3809:    l[i] = 5;
    #####: 3810:  bd = 5;
    #####: 3811:  if ((i = huft_build(l, 30, 0, cpdist, cpdext, &td, &bd)) > 1)
        -: 3812:  {
    #####: 3813:    huft_free(tl);
    #####: 3814:    return i;
        -: 3815:  }
        -: 3816:
        -: 3817:
        -: 3818:  /* decompress until an end-of-block code */
    #####: 3819:  if (inflate_codes(tl, td, bl, bd))
    #####: 3820:    return 1;
        -: 3821:
        -: 3822:
        -: 3823:  /* free the decoding tables, return */
    #####: 3824:  huft_free(tl);
    #####: 3825:  huft_free(td);
    #####: 3826:  return 0;
        -: 3827:}
        -: 3828:
        -: 3829:
        -: 3830:
       13: 3831:int inflate_dynamic()
        -: 3832:/* decompress an inflated type 2 (dynamic Huffman codes) block. */
        -: 3833:{
        -: 3834:  int i;                /* temporary variables */
        -: 3835:  unsigned j;
        -: 3836:  unsigned l;           /* last length */
        -: 3837:  unsigned m;           /* mask for bit lengths table */
        -: 3838:  unsigned n;           /* number of lengths to get */
        -: 3839:  struct huft *tl;      /* literal/length code table */
        -: 3840:  struct huft *td;      /* distance code table */
        -: 3841:  int bl;               /* lookup bits for tl */
        -: 3842:  int bd;               /* lookup bits for td */
        -: 3843:  unsigned nb;          /* number of bit length codes */
        -: 3844:  unsigned nl;          /* number of literal/length codes */
        -: 3845:  unsigned nd;          /* number of distance codes */
        -: 3846:#ifdef PKZIP_BUG_WORKAROUND
        -: 3847:  unsigned ll[288+32];  /* literal/length and distance code lengths */
        -: 3848:#else
        -: 3849:  unsigned ll[286+30];  /* literal/length and distance code lengths */
        -: 3850:#endif
        -: 3851:  register ulg b;       /* bit buffer */
        -: 3852:  register unsigned k;  /* number of bits in bit buffer */
        -: 3853:
        -: 3854:
        -: 3855:  /* make local bit buffer */
       13: 3856:  b = bb;
       13: 3857:  k = bk;
        -: 3858:
        -: 3859:
        -: 3860:  /* read in table lengths */
       13: 3861:  NEEDBITS(5)
       13: 3862:  nl = 257 + ((unsigned)b & 0x1f);      /* number of literal/length codes */
       13: 3863:  DUMPBITS(5)
       13: 3864:  NEEDBITS(5)
       13: 3865:  nd = 1 + ((unsigned)b & 0x1f);        /* number of distance codes */
       13: 3866:  DUMPBITS(5)
       13: 3867:  NEEDBITS(4)
       13: 3868:  nb = 4 + ((unsigned)b & 0xf);         /* number of bit length codes */
       13: 3869:  DUMPBITS(4)
        -: 3870:#ifdef PKZIP_BUG_WORKAROUND
        -: 3871:  if (nl > 288 || nd > 32)
        -: 3872:#else
       13: 3873:  if (nl > 286 || nd > 30)
        -: 3874:#endif
    #####: 3875:    return 1;                   /* bad lengths */
        -: 3876:
        -: 3877:
        -: 3878:  /* read in bit-length-code lengths */
      207: 3879:  for (j = 0; j < nb; j++)
        -: 3880:  {
      194: 3881:    NEEDBITS(3)
      194: 3882:    ll[border[j]] = (unsigned)b & 7;
      194: 3883:    DUMPBITS(3)
        -: 3884:  }
       66: 3885:  for (; j < 19; j++)
       53: 3886:    ll[border[j]] = 0;
        -: 3887:
        -: 3888:
        -: 3889:  /* build decoding table for trees--single level, 7 bit lookup */
       13: 3890:  bl = 7;
       13: 3891:  if ((i = huft_build(ll, 19, 19, NULL, NULL, &tl, &bl)) != 0)
        -: 3892:  {
    #####: 3893:    if (i == 1)
    #####: 3894:      huft_free(tl);
    #####: 3895:    return i;                   /* incomplete code set */
        -: 3896:  }
        -: 3897:
        -: 3898:
        -: 3899:  /* read in literal and distance code lengths */
       13: 3900:  n = nl + nd;
       13: 3901:  m = mask_bits[bl];
       13: 3902:  i = l = 0;
     1928: 3903:  while ((unsigned)i < n)
        -: 3904:  {
     1902: 3905:    NEEDBITS((unsigned)bl)
     1902: 3906:    j = (td = tl + ((unsigned)b & m))->b;
     1902: 3907:    DUMPBITS(j)
     1902: 3908:    j = td->v.n;
     1902: 3909:    if (j < 16)                 /* length of code in bits (0..15) */
     1800: 3910:      ll[i++] = l = j;          /* save last length in l */
      102: 3911:    else if (j == 16)           /* repeat last length 3 to 6 times */
        -: 3912:    {
       41: 3913:      NEEDBITS(2)
       41: 3914:      j = 3 + ((unsigned)b & 3);
       41: 3915:      DUMPBITS(2)
       41: 3916:      if ((unsigned)i + j > n)
    #####: 3917:        return 1;
      246: 3918:      while (j--)
      164: 3919:        ll[i++] = l;
        -: 3920:    }
       61: 3921:    else if (j == 17)           /* 3 to 10 zero length codes */
        -: 3922:    {
       35: 3923:      NEEDBITS(3)
       35: 3924:      j = 3 + ((unsigned)b & 7);
       35: 3925:      DUMPBITS(3)
       35: 3926:      if ((unsigned)i + j > n)
    #####: 3927:        return 1;
      284: 3928:      while (j--)
      214: 3929:        ll[i++] = 0;
       35: 3930:      l = 0;
        -: 3931:    }
        -: 3932:    else                        /* j == 18: 11 to 138 zero length codes */
        -: 3933:    {
       26: 3934:      NEEDBITS(7)
       26: 3935:      j = 11 + ((unsigned)b & 0x7f);
       26: 3936:      DUMPBITS(7)
       26: 3937:      if ((unsigned)i + j > n)
    #####: 3938:        return 1;
     1981: 3939:      while (j--)
     1929: 3940:        ll[i++] = 0;
       26: 3941:      l = 0;
        -: 3942:    }
        -: 3943:  }
        -: 3944:
        -: 3945:
        -: 3946:  /* free decoding table for trees */
       13: 3947:  huft_free(tl);
        -: 3948:
        -: 3949:
        -: 3950:  /* restore the global bit buffer */
       13: 3951:  bb = b;
       13: 3952:  bk = k;
        -: 3953:
        -: 3954:
        -: 3955:  /* build the decoding tables for literal/length and distance codes */
       13: 3956:  bl = lbits;
       13: 3957:  if ((i = huft_build(ll, nl, 257, cplens, cplext, &tl, &bl)) != 0)
        -: 3958:  {
    #####: 3959:    if (i == 1) {
    #####: 3960:      fprintf(stderr, " incomplete literal tree\n");
    #####: 3961:      huft_free(tl);
        -: 3962:    }
    #####: 3963:    return i;                   /* incomplete code set */
        -: 3964:  }
       13: 3965:  bd = dbits;
       13: 3966:  if ((i = huft_build(ll + nl, nd, 0, cpdist, cpdext, &td, &bd)) != 0)
        -: 3967:  {
    #####: 3968:    if (i == 1) {
    #####: 3969:      fprintf(stderr, " incomplete distance tree\n");
        -: 3970:#ifdef PKZIP_BUG_WORKAROUND
        -: 3971:      i = 0;
        -: 3972:    }
        -: 3973:#else
    #####: 3974:      huft_free(td);
        -: 3975:    }
    #####: 3976:    huft_free(tl);
    #####: 3977:    return i;                   /* incomplete code set */
        -: 3978:#endif
        -: 3979:  }
        -: 3980:
        -: 3981:
        -: 3982:  /* decompress until an end-of-block code */
       13: 3983:  if (inflate_codes(tl, td, bl, bd))
    #####: 3984:    return 1;
        -: 3985:
        -: 3986:
        -: 3987:  /* free the decoding tables, return */
       13: 3988:  huft_free(tl);
       13: 3989:  huft_free(td);
       13: 3990:  return 0;
        -: 3991:}
        -: 3992:
        -: 3993:
        -: 3994:
       15: 3995:int inflate_block(e)
        -: 3996:int *e;                 /* last block flag */
        -: 3997:/* decompress an inflated block */
        -: 3998:{
        -: 3999:  unsigned t;           /* block type */
        -: 4000:  register ulg b;       /* bit buffer */
        -: 4001:  register unsigned k;  /* number of bits in bit buffer */
        -: 4002:
        -: 4003:
        -: 4004:  /* make local bit buffer */
       15: 4005:  b = bb;
       15: 4006:  k = bk;
        -: 4007:
        -: 4008:
        -: 4009:  /* read in last block bit */
       15: 4010:  NEEDBITS(1)
       15: 4011:  *e = (int)b & 1;
       15: 4012:  DUMPBITS(1)
        -: 4013:
        -: 4014:
        -: 4015:  /* read in block type */
       15: 4016:  NEEDBITS(2)
       15: 4017:  t = (unsigned)b & 3;
       15: 4018:  DUMPBITS(2)
        -: 4019:
        -: 4020:
        -: 4021:  /* restore the global bit buffer */
       15: 4022:  bb = b;
       15: 4023:  bk = k;
        -: 4024:
        -: 4025:
        -: 4026:  /* inflate that block type */
       15: 4027:  if (t == 2)
       13: 4028:    return inflate_dynamic();
        2: 4029:  if (t == 0)
        2: 4030:    return inflate_stored();
    #####: 4031:  if (t == 1)
    #####: 4032:    return inflate_fixed();
        -: 4033:
        -: 4034:
        -: 4035:  /* bad block type */
    #####: 4036:  return 2;
        -: 4037:}
        -: 4038:
        -: 4039:
        -: 4040:
       13: 4041:int inflate()
        -: 4042:/* decompress an inflated entry */
        -: 4043:{
        -: 4044:  int e;                /* last block flag */
        -: 4045:  int r;                /* result code */
        -: 4046:  unsigned h;           /* maximum struct huft's malloc'ed */
        -: 4047:
        -: 4048:
        -: 4049:  /* initialize window, bit buffer */
       13: 4050:  wp = 0;
       13: 4051:  bk = 0;
       13: 4052:  bb = 0;
        -: 4053:
        -: 4054:
        -: 4055:  /* decompress until the last block */
       13: 4056:  h = 0;
        -: 4057:  do {
       15: 4058:    hufts = 0;
       15: 4059:    if ((r = inflate_block(&e)) != 0)
    #####: 4060:      return r;
       15: 4061:    if (hufts > h)
       13: 4062:      h = hufts;
       15: 4063:  } while (!e);
        -: 4064:
        -: 4065:  /* Undo too much lookahead. The next read will be byte aligned so we
        -: 4066:   * can discard unused bits in the last meaningful byte.
        -: 4067:   */
       26: 4068:  while (bk >= 8) {
    #####: 4069:    bk -= 8;
    #####: 4070:    inptr--;
        -: 4071:  }
        -: 4072:
        -: 4073:  /* flush out slide */
       13: 4074:  flush_output(wp);
        -: 4075:
        -: 4076:
        -: 4077:  /* return success */
        -: 4078:#ifdef DEBUG
        -: 4079:  fprintf(stderr, "<%u> ", h);
        -: 4080:#endif /* DEBUG */
       13: 4081:  return 0;
        -: 4082:}
        -: 4083:/* lzw.c -- compress files in LZW format.
        -: 4084: * This is a dummy version avoiding patent problems.
        -: 4085: */
        -: 4086:
        -: 4087:/*
        -: 4088:#ifndef lint
        -: 4089:static char rcsid[] = "$Id: lzw.c,v 0.8 1993/04/25 08:09:58 jloup Exp $";
        -: 4090:#endif
        -: 4091:*/
        -: 4092:
        -: 4093:static int msg_done = 0;
        -: 4094:
        -: 4095:/* Compress in to out with lzw method. */
    #####: 4096:int lzw(in, out)
        -: 4097:    int in, out;
        -: 4098:{
    #####: 4099:    if (msg_done) return ERROR;
    #####: 4100:    if(!msg_done) msg_done = 1;
    #####: 4101:    fprintf(stderr,"output in compress .Z format not supported\n");
    #####: 4102:    in++, out++; /* avoid warnings on unused variables */
    #####: 4103:    exit_code = ERROR;
    #####: 4104:    return ERROR;
        -: 4105:}
        -: 4106:/* trees.c -- output deflated data using Huffman coding
        -: 4107: * Copyright (C) 1992-1993 Jean-loup Gailly
        -: 4108: * This is free software; you can redistribute it and/or modify it under the
        -: 4109: * terms of the GNU General Public License, see the file COPYING.
        -: 4110: */
        -: 4111:
        -: 4112:/*
        -: 4113: *  PURPOSE
        -: 4114: *
        -: 4115: *      Encode various sets of source values using variable-length
        -: 4116: *      binary code trees.
        -: 4117: *
        -: 4118: *  DISCUSSION
        -: 4119: *
        -: 4120: *      The PKZIP "deflation" process uses several Huffman trees. The more
        -: 4121: *      common source values are represented by shorter bit sequences.
        -: 4122: *
        -: 4123: *      Each code tree is stored in the ZIP file in a compressed form
        -: 4124: *      which is itself a Huffman encoding of the lengths of
        -: 4125: *      all the code strings (in ascending order by source values).
        -: 4126: *      The actual code strings are reconstructed from the lengths in
        -: 4127: *      the UNZIP process, as described in the "application note"
        -: 4128: *      (APPNOTE.TXT) distributed as part of PKWARE's PKZIP program.
        -: 4129: *
        -: 4130: *  REFERENCES
        -: 4131: *
        -: 4132: *      Lynch, Thomas J.
        -: 4133: *          Data Compression:  Techniques and Applications, pp. 53-55.
        -: 4134: *          Lifetime Learning Publications, 1985.  ISBN 0-534-03418-7.
        -: 4135: *
        -: 4136: *      Storer, James A.
        -: 4137: *          Data Compression:  Methods and Theory, pp. 49-50.
        -: 4138: *          Computer Science Press, 1988.  ISBN 0-7167-8156-5.
        -: 4139: *
        -: 4140: *      Sedgewick, R.
        -: 4141: *          Algorithms, p290.
        -: 4142: *          Addison-Wesley, 1983. ISBN 0-201-06672-6.
        -: 4143: *
        -: 4144: *  INTERFACE
        -: 4145: *
        -: 4146: *      void ct_init (ush *attr, int *methodp)
        -: 4147: *          Allocate the match buffer, initialize the various tables and save
        -: 4148: *          the location of the internal file attribute (ascii/binary) and
        -: 4149: *          method (DEFLATE/STORE)
        -: 4150: *
        -: 4151: *      void ct_tally (int dist, int lc);
        -: 4152: *          Save the match info and tally the frequency counts.
        -: 4153: *
        -: 4154: *      long flush_block (char *buf, ulg stored_len, int eof)
        -: 4155: *          Determine the best encoding for the current block: dynamic trees,
        -: 4156: *          static trees or store, and output the encoded block to the zip
        -: 4157: *          file. Returns the total compressed length for the file so far.
        -: 4158: *
        -: 4159: */
        -: 4160:
        -: 4161:/*
        -: 4162:#ifndef lint
        -: 4163:static char rcsid[] = "$Id: trees.c,v 0.11 1993/03/26 14:55:43 jloup Exp $";
        -: 4164:#endif
        -: 4165:*/
        -: 4166:
        -: 4167:/* ===========================================================================
        -: 4168: * Constants
        -: 4169: */
        -: 4170:
        -: 4171:#define MAX_BITS 15
        -: 4172:/* All codes must not exceed MAX_BITS bits */
        -: 4173:
        -: 4174:#define MAX_BL_BITS 7
        -: 4175:/* Bit length codes must not exceed MAX_BL_BITS bits */
        -: 4176:
        -: 4177:#define LENGTH_CODES 29
        -: 4178:/* number of length codes, not counting the special END_BLOCK code */
        -: 4179:
        -: 4180:#define LITERALS  256
        -: 4181:/* number of literal bytes 0..255 */
        -: 4182:
        -: 4183:#define END_BLOCK 256
        -: 4184:/* end of block literal code */
        -: 4185:
        -: 4186:#define L_CODES (LITERALS+1+LENGTH_CODES)
        -: 4187:/* number of Literal or Length codes, including the END_BLOCK code */
        -: 4188:
        -: 4189:#define D_CODES   30
        -: 4190:/* number of distance codes */
        -: 4191:
        -: 4192:#define BL_CODES  19
        -: 4193:/* number of codes used to transfer the bit lengths */
        -: 4194:
        -: 4195:
        -: 4196:local int near extra_lbits[LENGTH_CODES] /* extra bits for each length code */
        -: 4197:   = {0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0};
        -: 4198:
        -: 4199:local int near extra_dbits[D_CODES] /* extra bits for each distance code */
        -: 4200:   = {0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13};
        -: 4201:
        -: 4202:local int near extra_blbits[BL_CODES]/* extra bits for each bit length code */
        -: 4203:   = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7};
        -: 4204:
        -: 4205:#define STORED_BLOCK 0
        -: 4206:#define STATIC_TREES 1
        -: 4207:#define DYN_TREES    2
        -: 4208:/* The three kinds of block type */
        -: 4209:
        -: 4210:#ifndef LIT_BUFSIZE
        -: 4211:#  ifdef SMALL_MEM
        -: 4212:#    define LIT_BUFSIZE  0x2000
        -: 4213:#  else
        -: 4214:#  ifdef MEDIUM_MEM
        -: 4215:#    define LIT_BUFSIZE  0x4000
        -: 4216:#  else
        -: 4217:#    define LIT_BUFSIZE  0x8000
        -: 4218:#  endif
        -: 4219:#  endif
        -: 4220:#endif
        -: 4221:#ifndef DIST_BUFSIZE
        -: 4222:#  define DIST_BUFSIZE  LIT_BUFSIZE
        -: 4223:#endif
        -: 4224:/* Sizes of match buffers for literals/lengths and distances.  There are
        -: 4225: * 4 reasons for limiting LIT_BUFSIZE to 64K:
        -: 4226: *   - frequencies can be kept in 16 bit counters
        -: 4227: *   - if compression is not successful for the first block, all input data is
        -: 4228: *     still in the window so we can still emit a stored block even when input
        -: 4229: *     comes from standard input.  (This can also be done for all blocks if
        -: 4230: *     LIT_BUFSIZE is not greater than 32K.)
        -: 4231: *   - if compression is not successful for a file smaller than 64K, we can
        -: 4232: *     even emit a stored file instead of a stored block (saving 5 bytes).
        -: 4233: *   - creating new Huffman trees less frequently may not provide fast
        -: 4234: *     adaptation to changes in the input data statistics. (Take for
        -: 4235: *     example a binary file with poorly compressible code followed by
        -: 4236: *     a highly compressible string table.) Smaller buffer sizes give
        -: 4237: *     fast adaptation but have of course the overhead of transmitting trees
        -: 4238: *     more frequently.
        -: 4239: *   - I can't count above 4
        -: 4240: * The current code is general and allows DIST_BUFSIZE < LIT_BUFSIZE (to save
        -: 4241: * memory at the expense of compression). Some optimizations would be possible
        -: 4242: * if we rely on DIST_BUFSIZE == LIT_BUFSIZE.
        -: 4243: */
        -: 4244:#if LIT_BUFSIZE > INBUFSIZ
        -: 4245:    error cannot overlay l_buf and inbuf
        -: 4246:#endif
        -: 4247:
        -: 4248:#define REP_3_6      16
        -: 4249:/* repeat previous bit length 3-6 times (2 bits of repeat count) */
        -: 4250:
        -: 4251:#define REPZ_3_10    17
        -: 4252:/* repeat a zero length 3-10 times  (3 bits of repeat count) */
        -: 4253:
        -: 4254:#define REPZ_11_138  18
        -: 4255:/* repeat a zero length 11-138 times  (7 bits of repeat count) */
        -: 4256:
        -: 4257:/* ===========================================================================
        -: 4258: * Local data
        -: 4259: */
        -: 4260:
        -: 4261:/* Data structure describing a single value and its code string. */
        -: 4262:typedef struct ct_data {
        -: 4263:    union {
        -: 4264:        ush  freq;       /* frequency count */
        -: 4265:        ush  code;       /* bit string */
        -: 4266:    } fc;
        -: 4267:    union {
        -: 4268:        ush  dad;        /* father node in Huffman tree */
        -: 4269:        ush  len;        /* length of bit string */
        -: 4270:    } dl;
        -: 4271:} ct_data;
        -: 4272:
        -: 4273:#define Freq fc.freq
        -: 4274:#define Code fc.code
        -: 4275:#define Dad  dl.dad
        -: 4276:#define Len  dl.len
        -: 4277:
        -: 4278:#define HEAP_SIZE (2*L_CODES+1)
        -: 4279:/* maximum heap size */
        -: 4280:
        -: 4281:local ct_data near dyn_ltree[HEAP_SIZE];   /* literal and length tree */
        -: 4282:local ct_data near dyn_dtree[2*D_CODES+1]; /* distance tree */
        -: 4283:
        -: 4284:local ct_data near static_ltree[L_CODES+2];
        -: 4285:/* The static literal tree. Since the bit lengths are imposed, there is no
        -: 4286: * need for the L_CODES extra codes used during heap construction. However
        -: 4287: * The codes 286 and 287 are needed to build a canonical tree (see ct_init
        -: 4288: * below).
        -: 4289: */
        -: 4290:
        -: 4291:local ct_data near static_dtree[D_CODES];
        -: 4292:/* The static distance tree. (Actually a trivial tree since all codes use
        -: 4293: * 5 bits.)
        -: 4294: */
        -: 4295:
        -: 4296:local ct_data near bl_tree[2*BL_CODES+1];
        -: 4297:/* Huffman tree for the bit lengths */
        -: 4298:
        -: 4299:typedef struct tree_desc {
        -: 4300:    ct_data near *dyn_tree;      /* the dynamic tree */
        -: 4301:    ct_data near *static_tree;   /* corresponding static tree or NULL */
        -: 4302:    int     near *extra_bits;    /* extra bits for each code or NULL */
        -: 4303:    int     extra_base;          /* base index for extra_bits */
        -: 4304:    int     elems;               /* max number of elements in the tree */
        -: 4305:    int     max_length;          /* max bit length for the codes */
        -: 4306:    int     max_code;            /* largest code with non zero frequency */
        -: 4307:} tree_desc;
        -: 4308:
        -: 4309:local tree_desc near l_desc =
        -: 4310:{dyn_ltree, static_ltree, extra_lbits, LITERALS+1, L_CODES, MAX_BITS, 0};
        -: 4311:
        -: 4312:local tree_desc near d_desc =
        -: 4313:{dyn_dtree, static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS, 0};
        -: 4314:
        -: 4315:local tree_desc near bl_desc =
        -: 4316:{bl_tree, (ct_data near *)0, extra_blbits, 0,      BL_CODES, MAX_BL_BITS, 0};
        -: 4317:
        -: 4318:
        -: 4319:local ush near bl_count[MAX_BITS+1];
        -: 4320:/* number of codes at each bit length for an optimal tree */
        -: 4321:
        -: 4322:local uch near bl_order[BL_CODES]
        -: 4323:   = {16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15};
        -: 4324:/* The lengths of the bit length codes are sent in order of decreasing
        -: 4325: * probability, to avoid transmitting the lengths for unused bit length codes.
        -: 4326: */
        -: 4327:
        -: 4328:local int near heap[2*L_CODES+1]; /* heap used to build the Huffman trees */
        -: 4329:local int heap_len;               /* number of elements in the heap */
        -: 4330:local int heap_max;               /* element of largest frequency */
        -: 4331:/* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
        -: 4332: * The same heap array is used to build all trees.
        -: 4333: */
        -: 4334:
        -: 4335:local uch near depth[2*L_CODES+1];
        -: 4336:/* Depth of each subtree used as tie breaker for trees of equal frequency */
        -: 4337:
        -: 4338:local uch length_code[MAX_MATCH-MIN_MATCH+1];
        -: 4339:/* length code for each normalized match length (0 == MIN_MATCH) */
        -: 4340:
        -: 4341:local uch dist_code[512];
        -: 4342:/* distance codes. The first 256 values correspond to the distances
        -: 4343: * 3 .. 258, the last 256 values correspond to the top 8 bits of
        -: 4344: * the 15 bit distances.
        -: 4345: */
        -: 4346:
        -: 4347:local int near base_length[LENGTH_CODES];
        -: 4348:/* First normalized length for each code (0 = MIN_MATCH) */
        -: 4349:
        -: 4350:local int near base_dist[D_CODES];
        -: 4351:/* First normalized distance for each code (0 = distance of 1) */
        -: 4352:
        -: 4353:#define l_buf inbuf
        -: 4354:/* DECLARE(uch, l_buf, LIT_BUFSIZE);  buffer for literals or lengths */
        -: 4355:
        -: 4356:/* DECLARE(ush, d_buf, DIST_BUFSIZE); buffer for distances */
        -: 4357:
        -: 4358:local uch near flag_buf[(LIT_BUFSIZE/8)];
        -: 4359:/* flag_buf is a bit array distinguishing literals from lengths in
        -: 4360: * l_buf, thus indicating the presence or absence of a distance.
        -: 4361: */
        -: 4362:
        -: 4363:local unsigned last_lit;    /* running index in l_buf */
        -: 4364:local unsigned last_dist;   /* running index in d_buf */
        -: 4365:local unsigned last_flags;  /* running index in flag_buf */
        -: 4366:local uch flags;            /* current flags not yet saved in flag_buf */
        -: 4367:local uch flag_bit;         /* current bit used in flags */
        -: 4368:/* bits are filled in flags starting at bit 0 (least significant).
        -: 4369: * Note: these flags are overkill in the current code since we don't
        -: 4370: * take advantage of DIST_BUFSIZE == LIT_BUFSIZE.
        -: 4371: */
        -: 4372:
        -: 4373:local ulg opt_len;        /* bit length of current block with optimal trees */
        -: 4374:local ulg static_len;     /* bit length of current block with static trees */
        -: 4375:
        -: 4376:local ulg compressed_len; /* total bit length of compressed file */
        -: 4377:
        -: 4378:local ulg input_len;      /* total byte length of input file */
        -: 4379:/* input_len is for debugging only since we can get it by other means. */
        -: 4380:
        -: 4381:ush *file_type;        /* pointer to UNKNOWN, BINARY or ASCII */
        -: 4382:int *file_method;      /* pointer to DEFLATE or STORE */
        -: 4383:
        -: 4384:#ifdef DEBUG
        -: 4385:extern ulg bits_sent;  /* bit length of the compressed data */
        -: 4386:extern long isize;     /* byte length of input file */
        -: 4387:#endif
        -: 4388:
        -: 4389:extern long block_start;       /* window offset of current block */
        -: 4390:extern unsigned near strstart; /* window offset of current string */
        -: 4391:
        -: 4392:/* ===========================================================================
        -: 4393: * Local (static) routines in this file.
        -: 4394: */
        -: 4395:
        -: 4396:local void init_block     OF((void));
        -: 4397:local void pqdownheap     OF((ct_data near *tree, int k));
        -: 4398:local void gen_bitlen     OF((tree_desc near *desc));
        -: 4399:local void gen_codes      OF((ct_data near *tree, int max_code));
        -: 4400:local void build_tree     OF((tree_desc near *desc));
        -: 4401:local void scan_tree      OF((ct_data near *tree, int max_code));
        -: 4402:local void send_tree      OF((ct_data near *tree, int max_code));
        -: 4403:local int  build_bl_tree  OF((void));
        -: 4404:local void send_all_trees OF((int lcodes, int dcodes, int blcodes));
        -: 4405:local void compress_block OF((ct_data near *ltree, ct_data near *dtree));
        -: 4406:local void set_file_type  OF((void));
        -: 4407:
        -: 4408:
        -: 4409:#ifndef DEBUG
        -: 4410:#  define send_code(c, tree) send_bits(tree[c].Code, tree[c].Len)
        -: 4411:   /* Send a code of the given tree. c and tree must not have side effects */
        -: 4412:
        -: 4413:#else /* DEBUG */
        -: 4414:#  define send_code(c, tree) \
        -: 4415:     { if (verbose>1) fprintf(stderr,"\ncd %3d ",(c)); \
        -: 4416:       send_bits(tree[c].Code, tree[c].Len); }
        -: 4417:#endif
        -: 4418:
        -: 4419:#define d_code(dist) \
        -: 4420:   ((dist) < 256 ? dist_code[dist] : dist_code[256+((dist)>>7)])
        -: 4421:/* Mapping from a distance to a distance code. dist is the distance - 1 and
        -: 4422: * must not have side effects. dist_code[256] and dist_code[257] are never
        -: 4423: * used.
        -: 4424: */
        -: 4425:
        -: 4426:#define MAX(a,b) (a >= b ? a : b)
        -: 4427:/* the arguments must not have side effects */
        -: 4428:
        -: 4429:/* ===========================================================================
        -: 4430: * Allocate the match buffer, initialize the various tables and save the
        -: 4431: * location of the internal file attribute (ascii/binary) and method
        -: 4432: * (DEFLATE/STORE).
        -: 4433: */
      106: 4434:void ct_init(attr, methodp)
        -: 4435:    ush  *attr;   /* pointer to internal file attribute */
        -: 4436:    int  *methodp; /* pointer to compression method */
        -: 4437:{
        -: 4438:    int n;        /* iterates over tree elements */
        -: 4439:    int bits;     /* bit counter */
        -: 4440:    int length;   /* length value */
        -: 4441:    int code;     /* code value */
        -: 4442:    int dist;     /* distance index */
        -: 4443:
      106: 4444:    file_type = attr;
      106: 4445:    file_method = methodp;
      106: 4446:    compressed_len = input_len = 0L;
        -: 4447:        
      106: 4448:    if (static_dtree[0].Len != 0) return; /* ct_init already called */
        -: 4449:
        -: 4450:    /* Initialize the mapping length (0..255) -> length code (0..28) */
      106: 4451:    length = 0;
     3074: 4452:    for (code = 0; code < LENGTH_CODES-1; code++) {
     2968: 4453:        base_length[code] = length;
    30104: 4454:        for (n = 0; n < (1<<extra_lbits[code]); n++) {
    27136: 4455:            length_code[length++] = (uch)code;
        -: 4456:        }
        -: 4457:    }
        -: 4458:    Assert (length == 256, "ct_init: length != 256");
        -: 4459:    /* Note that the length 255 (match length 258) can be represented
        -: 4460:     * in two different ways: code 284 + 5 bits or code 285, so we
        -: 4461:     * overwrite length_code[255] to use the best encoding:
        -: 4462:     */
      106: 4463:    length_code[length-1] = (uch)code;
        -: 4464:
        -: 4465:    /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
      106: 4466:    dist = 0;
     1802: 4467:    for (code = 0 ; code < 16; code++) {
     1696: 4468:        base_dist[code] = dist;
    28832: 4469:        for (n = 0; n < (1<<extra_dbits[code]); n++) {
    27136: 4470:            dist_code[dist++] = (uch)code;
        -: 4471:        }
        -: 4472:    }
        -: 4473:    Assert (dist == 256, "ct_init: dist != 256");
      106: 4474:    dist >>= 7; /* from now on, all distances are divided by 128 */
     1590: 4475:    for ( ; code < D_CODES; code++) {
     1484: 4476:        base_dist[code] = dist << 7;
    28408: 4477:        for (n = 0; n < (1<<(extra_dbits[code]-7)); n++) {
    26924: 4478:            dist_code[256 + dist++] = (uch)code;
        -: 4479:        }
        -: 4480:    }
        -: 4481:    Assert (dist == 256, "ct_init: 256+dist != 512");
        -: 4482:
        -: 4483:    /* Construct the codes of the static literal tree */
      106: 4484:    for (bits = 0; bits <= MAX_BITS; bits++) bl_count[bits] = 0;
      106: 4485:    n = 0;
      106: 4486:    while (n <= 143) static_ltree[n++].Len = 8, bl_count[8]++;
      106: 4487:    while (n <= 255) static_ltree[n++].Len = 9, bl_count[9]++;
      106: 4488:    while (n <= 279) static_ltree[n++].Len = 7, bl_count[7]++;
      106: 4489:    while (n <= 287) static_ltree[n++].Len = 8, bl_count[8]++;
        -: 4490:    /* Codes 286 and 287 do not exist, but we must include them in the
        -: 4491:     * tree construction to get a canonical Huffman tree (longest code
        -: 4492:     * all ones)
        -: 4493:     */
      106: 4494:    gen_codes((ct_data near *)static_ltree, L_CODES+1);
        -: 4495:
        -: 4496:    /* The static distance tree is trivial: */
     3286: 4497:    for (n = 0; n < D_CODES; n++) {
     3180: 4498:        static_dtree[n].Len = 5;
     3180: 4499:        static_dtree[n].Code = bi_reverse(n, 5);
        -: 4500:    }
        -: 4501:
        -: 4502:    /* Initialize the first block of the first file: */
      106: 4503:    init_block();
        -: 4504:}
        -: 4505:
        -: 4506:/* ===========================================================================
        -: 4507: * Initialize a new block.
        -: 4508: */
      220: 4509:local void init_block()
        -: 4510:{
        -: 4511:    int n; /* iterates over tree elements */
        -: 4512:
        -: 4513:    /* Initialize the trees. */
      220: 4514:    for (n = 0; n < L_CODES;  n++) dyn_ltree[n].Freq = 0;
      220: 4515:    for (n = 0; n < D_CODES;  n++) dyn_dtree[n].Freq = 0;
      220: 4516:    for (n = 0; n < BL_CODES; n++) bl_tree[n].Freq = 0;
        -: 4517:
      220: 4518:    dyn_ltree[END_BLOCK].Freq = 1;
      220: 4519:    opt_len = static_len = 0L;
      220: 4520:    last_lit = last_dist = last_flags = 0;
      220: 4521:    flags = 0; flag_bit = 1;
      220: 4522:}
        -: 4523:
        -: 4524:#define SMALLEST 1
        -: 4525:/* Index within the heap array of least frequent node in the Huffman tree */
        -: 4526:
        -: 4527:
        -: 4528:/* ===========================================================================
        -: 4529: * Remove the smallest element from the heap and recreate the heap with
        -: 4530: * one less element. Updates heap and heap_len.
        -: 4531: */
        -: 4532:#define pqremove(tree, top) \
        -: 4533:{\
        -: 4534:    top = heap[SMALLEST]; \
        -: 4535:    heap[SMALLEST] = heap[heap_len--]; \
        -: 4536:    pqdownheap(tree, SMALLEST); \
        -: 4537:}
        -: 4538:
        -: 4539:/* ===========================================================================
        -: 4540: * Compares to subtrees, using the tree depth as tie breaker when
        -: 4541: * the subtrees have equal frequency. This minimizes the worst case length.
        -: 4542: */
        -: 4543:#define smaller(tree, n, m) \
        -: 4544:   (tree[n].Freq < tree[m].Freq || \
        -: 4545:   (tree[n].Freq == tree[m].Freq && depth[n] <= depth[m]))
        -: 4546:
        -: 4547:/* ===========================================================================
        -: 4548: * Restore the heap property by moving down the tree starting at node k,
        -: 4549: * exchanging a node with the smallest of its two sons if necessary, stopping
        -: 4550: * when the heap property is re-established (each father smaller than its
        -: 4551: * two sons).
        -: 4552: */
    45848: 4553:local void pqdownheap(tree, k)
        -: 4554:    ct_data near *tree;  /* the tree to restore */
        -: 4555:    int k;               /* node to move down */
        -: 4556:{
    45848: 4557:    int v = heap[k];
    45848: 4558:    int j = k << 1;  /* left son of k */
   237991: 4559:    while (j <= heap_len) {
        -: 4560:        /* Set j to the smallest of the two sons: */
   161807: 4561:        if (j < heap_len && smaller(tree, heap[j+1], heap[j])) j++;
        -: 4562:
        -: 4563:        /* Exit if v is smaller than both sons */
   161807: 4564:        if (smaller(tree, v, heap[j])) break;
        -: 4565:
        -: 4566:        /* Exchange v with the smallest son */
   146295: 4567:        heap[k] = heap[j];  k = j;
        -: 4568:
        -: 4569:        /* And continue down the tree, setting j to the left son of k */
   146295: 4570:        j <<= 1;
        -: 4571:    }
    45848: 4572:    heap[k] = v;
    45848: 4573:}
        -: 4574:
        -: 4575:/* ===========================================================================
        -: 4576: * Compute the optimal bit lengths for a tree and update the total bit length
        -: 4577: * for the current block.
        -: 4578: * IN assertion: the fields freq and dad are set, heap[heap_max] and
        -: 4579: *    above are the tree nodes sorted by increasing frequency.
        -: 4580: * OUT assertions: the field len is set to the optimal bit length, the
        -: 4581: *     array bl_count contains the frequencies for each bit length.
        -: 4582: *     The length opt_len is updated; static_len is also updated if stree is
        -: 4583: *     not null.
        -: 4584: */
      342: 4585:local void gen_bitlen(desc)
        -: 4586:    tree_desc near *desc; /* the tree descriptor */
        -: 4587:{
      342: 4588:    ct_data near *tree  = desc->dyn_tree;
      342: 4589:    int near *extra     = desc->extra_bits;
      342: 4590:    int base            = desc->extra_base;
      342: 4591:    int max_code        = desc->max_code;
      342: 4592:    int max_length      = desc->max_length;
      342: 4593:    ct_data near *stree = desc->static_tree;
        -: 4594:    int h;              /* heap index */
        -: 4595:    int n, m;           /* iterate over the tree elements */
        -: 4596:    int bits;           /* bit length */
        -: 4597:    int xbits;          /* extra bits */
        -: 4598:    ush f;              /* frequency */
      342: 4599:    int overflow = 0;   /* number of elements with bit length too large */
        -: 4600:
      342: 4601:    for (bits = 0; bits <= MAX_BITS; bits++) bl_count[bits] = 0;
        -: 4602:
        -: 4603:    /* In a first pass, compute the optimal bit lengths (which may
        -: 4604:     * overflow in the case of the bit length tree).
        -: 4605:     */
      342: 4606:    tree[heap[heap_max]].Len = 0; /* root of the heap */
        -: 4607:
    36954: 4608:    for (h = heap_max+1; h < HEAP_SIZE; h++) {
    36612: 4609:        n = heap[h];
    36612: 4610:        bits = tree[tree[n].Dad].Len + 1;
    36612: 4611:        if (bits > max_length) bits = max_length, overflow++;
    36612: 4612:        tree[n].Len = (ush)bits;
        -: 4613:        /* We overwrite tree[n].Dad which is no longer needed */
        -: 4614:
    36612: 4615:        if (n > max_code) continue; /* not a leaf node */
        -: 4616:
    18648: 4617:        bl_count[bits]++;
    18648: 4618:        xbits = 0;
    18648: 4619:        if (n >= base) xbits = extra[n-base];
    18648: 4620:        f = tree[n].Freq;
    18648: 4621:        opt_len += (ulg)f * (bits + xbits);
    18648: 4622:        if (stree) static_len += (ulg)f * (stree[n].Len + xbits);
        -: 4623:    }
      342: 4624:    if (overflow == 0) return;
        -: 4625:
        -: 4626:    Trace((stderr,"\nbit length overflow\n"));
        -: 4627:    /* This happens for example on obj2 and pic of the Calgary corpus */
        -: 4628:
        -: 4629:    /* Find the first bit length which could increase: */
        -: 4630:    do {
        3: 4631:        bits = max_length-1;
        3: 4632:        while (bl_count[bits] == 0) bits--;
        3: 4633:        bl_count[bits]--;      /* move one leaf down the tree */
        3: 4634:        bl_count[bits+1] += 2; /* move one overflow item as its brother */
        3: 4635:        bl_count[max_length]--;
        -: 4636:        /* The brother of the overflow item also moves one step up,
        -: 4637:         * but this does not affect bl_count[max_length]
        -: 4638:         */
        3: 4639:        overflow -= 2;
        3: 4640:    } while (overflow > 0);
        -: 4641:
        -: 4642:    /* Now recompute all bit lengths, scanning in increasing frequency.
        -: 4643:     * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
        -: 4644:     * lengths instead of fixing only the wrong ones. This idea is taken
        -: 4645:     * from 'ar' written by Haruhiko Okumura.)
        -: 4646:     */
       24: 4647:    for (bits = max_length; bits != 0; bits--) {
       21: 4648:        n = bl_count[bits];
      105: 4649:        while (n != 0) {
       63: 4650:            m = heap[--h];
       63: 4651:            if (m > max_code) continue;
       39: 4652:            if (tree[m].Len != (unsigned) bits) {
        -: 4653:                Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
        3: 4654:                opt_len += ((long)bits-(long)tree[m].Len)*(long)tree[m].Freq;
        3: 4655:                tree[m].Len = (ush)bits;
        -: 4656:            }
       39: 4657:            n--;
        -: 4658:        }
        -: 4659:    }
        -: 4660:}
        -: 4661:
        -: 4662:/* ===========================================================================
        -: 4663: * Generate the codes for a given tree and bit counts (which need not be
        -: 4664: * optimal).
        -: 4665: * IN assertion: the array bl_count contains the bit length statistics for
        -: 4666: * the given tree and the field len is set for all tree elements.
        -: 4667: * OUT assertion: the field code is set for all tree elements of non
        -: 4668: *     zero code length.
        -: 4669: */
      448: 4670:local void gen_codes (tree, max_code)
        -: 4671:    ct_data near *tree;        /* the tree to decorate */
        -: 4672:    int max_code;              /* largest code with non zero frequency */
        -: 4673:{
        -: 4674:    ush next_code[MAX_BITS+1]; /* next code value for each bit length */
      448: 4675:    ush code = 0;              /* running code value */
        -: 4676:    int bits;                  /* bit index */
        -: 4677:    int n;                     /* code index */
        -: 4678:
        -: 4679:    /* The distribution counts are first used to generate the code values
        -: 4680:     * without bit reversal.
        -: 4681:     */
     7168: 4682:    for (bits = 1; bits <= MAX_BITS; bits++) {
     6720: 4683:        next_code[bits] = code = (code + bl_count[bits-1]) << 1;
        -: 4684:    }
        -: 4685:    /* Check that the bit counts in bl_count are consistent. The last code
        -: 4686:     * must be all ones.
        -: 4687:     */
        -: 4688:    Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
        -: 4689:            "inconsistent bit counts");
        -: 4690:    Tracev((stderr,"\ngen_codes: max_code %d ", max_code));
        -: 4691:
    68935: 4692:    for (n = 0;  n <= max_code; n++) {
    68487: 4693:        int len = tree[n].Len;
    68487: 4694:        if (len == 0) continue;
        -: 4695:        /* Now reverse the bits */
    49176: 4696:        tree[n].Code = bi_reverse(next_code[len]++, len);
        -: 4697:
        -: 4698:        Tracec(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
        -: 4699:             n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
        -: 4700:    }
      448: 4701:}
        -: 4702:
        -: 4703:/* ===========================================================================
        -: 4704: * Construct one Huffman tree and assigns the code bit strings and lengths.
        -: 4705: * Update the total bit length for the current block.
        -: 4706: * IN assertion: the field freq is set for all tree elements.
        -: 4707: * OUT assertions: the fields len and code are set to the optimal bit length
        -: 4708: *     and corresponding code. The length opt_len is updated; static_len is
        -: 4709: *     also updated if stree is not null. The field max_code is set.
        -: 4710: */
      342: 4711:local void build_tree(desc)
        -: 4712:    tree_desc near *desc; /* the tree descriptor */
        -: 4713:{
      342: 4714:    ct_data near *tree   = desc->dyn_tree;
      342: 4715:    ct_data near *stree  = desc->static_tree;
      342: 4716:    int elems            = desc->elems;
        -: 4717:    int n, m;          /* iterate over heap elements */
      342: 4718:    int max_code = -1; /* largest code with non zero frequency */
      342: 4719:    int node = elems;  /* next internal node of the tree */
        -: 4720:
        -: 4721:    /* Construct the initial heap, with least frequent element in
        -: 4722:     * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
        -: 4723:     * heap[0] is not used.
        -: 4724:     */
      342: 4725:    heap_len = 0, heap_max = HEAP_SIZE;
        -: 4726:
    38532: 4727:    for (n = 0; n < elems; n++) {
    38190: 4728:        if (tree[n].Freq != 0) {
    18641: 4729:            heap[++heap_len] = max_code = n;
    18641: 4730:            depth[n] = 0;
        -: 4731:        } else {
    19549: 4732:            tree[n].Len = 0;
        -: 4733:        }
        -: 4734:    }
        -: 4735:
        -: 4736:    /* The pkzip format requires that at least one distance code exists,
        -: 4737:     * and that at least one bit should be sent even if there is only one
        -: 4738:     * possible code. So to avoid special checks later on we force at least
        -: 4739:     * two codes of non zero frequency.
        -: 4740:     */
      691: 4741:    while (heap_len < 2) {
        7: 4742:        int new = heap[++heap_len] = (max_code < 2 ? ++max_code : 0);
        7: 4743:        tree[new].Freq = 1;
        7: 4744:        depth[new] = 0;
        7: 4745:        opt_len--; if (stree) static_len -= stree[new].Len;
        -: 4746:        /* new is 0 or 1 so it does not have extra bits */
        -: 4747:    }
      342: 4748:    desc->max_code = max_code;
        -: 4749:
        -: 4750:    /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
        -: 4751:     * establish sub-heaps of increasing lengths:
        -: 4752:     */
      342: 4753:    for (n = heap_len/2; n >= 1; n--) pqdownheap(tree, n);
        -: 4754:
        -: 4755:    /* Construct the Huffman tree by repeatedly combining the least two
        -: 4756:     * frequent nodes.
        -: 4757:     */
        -: 4758:    do {
    18306: 4759:        pqremove(tree, n);   /* n = node of least frequency */
    18306: 4760:        m = heap[SMALLEST];  /* m = node of next least frequency */
        -: 4761:
    18306: 4762:        heap[--heap_max] = n; /* keep the nodes sorted by frequency */
    18306: 4763:        heap[--heap_max] = m;
        -: 4764:
        -: 4765:        /* Create a new node father of n and m */
    18306: 4766:        tree[node].Freq = tree[n].Freq + tree[m].Freq;
    18306: 4767:        depth[node] = (uch) (MAX(depth[n], depth[m]) + 1);
    18306: 4768:        tree[n].Dad = tree[m].Dad = (ush)node;
        -: 4769:#ifdef DUMP_BL_TREE
        -: 4770:        if (tree == bl_tree) {
        -: 4771:            fprintf(stderr,"\nnode %d(%d), sons %d(%d) %d(%d)",
        -: 4772:                    node, tree[node].Freq, n, tree[n].Freq, m, tree[m].Freq);
        -: 4773:        }
        -: 4774:#endif
        -: 4775:        /* and insert the new node in the heap */
    18306: 4776:        heap[SMALLEST] = node++;
    18306: 4777:        pqdownheap(tree, SMALLEST);
        -: 4778:
    18306: 4779:    } while (heap_len >= 2);
        -: 4780:
      342: 4781:    heap[--heap_max] = heap[SMALLEST];
        -: 4782:
        -: 4783:    /* At this point, the fields freq and dad are set. We can now
        -: 4784:     * generate the bit lengths.
        -: 4785:     */
      342: 4786:    gen_bitlen((tree_desc near *)desc);
        -: 4787:
        -: 4788:    /* The field len is now set, we can generate the bit codes */
      342: 4789:    gen_codes ((ct_data near *)tree, max_code);
      342: 4790:}
        -: 4791:
        -: 4792:/* ===========================================================================
        -: 4793: * Scan a literal or distance tree to determine the frequencies of the codes
        -: 4794: * in the bit length tree. Updates opt_len to take into account the repeat
        -: 4795: * counts. (The contribution of the bit length codes will be added later
        -: 4796: * during the construction of bl_tree.)
        -: 4797: */
      228: 4798:local void scan_tree (tree, max_code)
        -: 4799:    ct_data near *tree; /* the tree to be scanned */
        -: 4800:    int max_code;       /* and its largest code of non zero frequency */
        -: 4801:{
        -: 4802:    int n;                     /* iterates over all tree elements */
      228: 4803:    int prevlen = -1;          /* last emitted length */
        -: 4804:    int curlen;                /* length of current code */
      228: 4805:    int nextlen = tree[0].Len; /* length of next code */
      228: 4806:    int count = 0;             /* repeat count of the current code */
      228: 4807:    int max_count = 7;         /* max repeat count */
      228: 4808:    int min_count = 4;         /* min repeat count */
        -: 4809:
      228: 4810:    if (nextlen == 0) max_count = 138, min_count = 3;
      228: 4811:    tree[max_code+1].Len = (ush)0xffff; /* guard */
        -: 4812:
    36034: 4813:    for (n = 0; n <= max_code; n++) {
    35806: 4814:        curlen = nextlen; nextlen = tree[n+1].Len;
    35806: 4815:        if (++count < max_count && curlen == nextlen) {
    22796: 4816:            continue;
    13010: 4817:        } else if (count < min_count) {
    12018: 4818:            bl_tree[curlen].Freq += count;
      992: 4819:        } else if (curlen != 0) {
      474: 4820:            if (curlen != prevlen) bl_tree[curlen].Freq++;
      474: 4821:            bl_tree[REP_3_6].Freq++;
      518: 4822:        } else if (count <= 10) {
      306: 4823:            bl_tree[REPZ_3_10].Freq++;
        -: 4824:        } else {
      212: 4825:            bl_tree[REPZ_11_138].Freq++;
        -: 4826:        }
    13010: 4827:        count = 0; prevlen = curlen;
    13010: 4828:        if (nextlen == 0) {
     1321: 4829:            max_count = 138, min_count = 3;
    11689: 4830:        } else if (curlen == nextlen) {
      143: 4831:            max_count = 6, min_count = 3;
        -: 4832:        } else {
    11546: 4833:            max_count = 7, min_count = 4;
        -: 4834:        }
        -: 4835:    }
      228: 4836:}
        -: 4837:
        -: 4838:/* ===========================================================================
        -: 4839: * Send a literal or distance tree in compressed form, using the codes in
        -: 4840: * bl_tree.
        -: 4841: */
      220: 4842:local void send_tree (tree, max_code)
        -: 4843:    ct_data near *tree; /* the tree to be scanned */
        -: 4844:    int max_code;       /* and its largest code of non zero frequency */
        -: 4845:{
        -: 4846:    int n;                     /* iterates over all tree elements */
      220: 4847:    int prevlen = -1;          /* last emitted length */
        -: 4848:    int curlen;                /* length of current code */
      220: 4849:    int nextlen = tree[0].Len; /* length of next code */
      220: 4850:    int count = 0;             /* repeat count of the current code */
      220: 4851:    int max_count = 7;         /* max repeat count */
      220: 4852:    int min_count = 4;         /* min repeat count */
        -: 4853:
        -: 4854:    /* tree[max_code+1].Len = -1; */  /* guard already set */
      220: 4855:    if (nextlen == 0) max_count = 138, min_count = 3;
        -: 4856:
    34940: 4857:    for (n = 0; n <= max_code; n++) {
    34720: 4858:        curlen = nextlen; nextlen = tree[n+1].Len;
    34720: 4859:        if (++count < max_count && curlen == nextlen) {
    21785: 4860:            continue;
    12935: 4861:        } else if (count < min_count) {
    15536: 4862:            do { send_code(curlen, bl_tree); } while (--count != 0);
        -: 4863:
      943: 4864:        } else if (curlen != 0) {
      433: 4865:            if (curlen != prevlen) {
      408: 4866:                send_code(curlen, bl_tree); count--;
        -: 4867:            }
        -: 4868:            Assert(count >= 3 && count <= 6, " 3_6?");
      433: 4869:            send_code(REP_3_6, bl_tree); send_bits(count-3, 2);
        -: 4870:
      510: 4871:        } else if (count <= 10) {
      306: 4872:            send_code(REPZ_3_10, bl_tree); send_bits(count-3, 3);
        -: 4873:
        -: 4874:        } else {
      204: 4875:            send_code(REPZ_11_138, bl_tree); send_bits(count-11, 7);
        -: 4876:        }
    12935: 4877:        count = 0; prevlen = curlen;
    12935: 4878:        if (nextlen == 0) {
     1313: 4879:            max_count = 138, min_count = 3;
    11622: 4880:        } else if (curlen == nextlen) {
      109: 4881:            max_count = 6, min_count = 3;
        -: 4882:        } else {
    11513: 4883:            max_count = 7, min_count = 4;
        -: 4884:        }
        -: 4885:    }
      220: 4886:}
        -: 4887:
        -: 4888:/* ===========================================================================
        -: 4889: * Construct the Huffman tree for the bit lengths and return the index in
        -: 4890: * bl_order of the last bit length code to send.
        -: 4891: */
      114: 4892:local int build_bl_tree()
        -: 4893:{
        -: 4894:    int max_blindex;  /* index of last bit length code of non zero freq */
        -: 4895:
        -: 4896:    /* Determine the bit length frequencies for literal and distance trees */
      114: 4897:    scan_tree((ct_data near *)dyn_ltree, l_desc.max_code);
      114: 4898:    scan_tree((ct_data near *)dyn_dtree, d_desc.max_code);
        -: 4899:
        -: 4900:    /* Build the bit length tree: */
      114: 4901:    build_tree((tree_desc near *)(&bl_desc));
        -: 4902:    /* opt_len now includes the length of the tree representations, except
        -: 4903:     * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
        -: 4904:     */
        -: 4905:
        -: 4906:    /* Determine the number of bit length codes to send. The pkzip format
        -: 4907:     * requires that at least 4 bit length codes be sent. (appnote.txt says
        -: 4908:     * 3 but the actual value used is 4.)
        -: 4909:     */
      557: 4910:    for (max_blindex = BL_CODES-1; max_blindex >= 3; max_blindex--) {
      557: 4911:        if (bl_tree[bl_order[max_blindex]].Len != 0) break;
        -: 4912:    }
        -: 4913:    /* Update opt_len to include the bit length tree and counts */
      114: 4914:    opt_len += 3*(max_blindex+1) + 5+5+4;
        -: 4915:    Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld", opt_len, static_len));
        -: 4916:
      114: 4917:    return max_blindex;
        -: 4918:}
        -: 4919:
        -: 4920:/* ===========================================================================
        -: 4921: * Send the header for a block using dynamic Huffman trees: the counts, the
        -: 4922: * lengths of the bit length codes, the literal tree and the distance tree.
        -: 4923: * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
        -: 4924: */
      110: 4925:local void send_all_trees(lcodes, dcodes, blcodes)
        -: 4926:    int lcodes, dcodes, blcodes; /* number of codes for each tree */
        -: 4927:{
        -: 4928:    int rank;                    /* index in bl_order */
        -: 4929:
        -: 4930:    Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
        -: 4931:    Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
        -: 4932:            "too many codes");
        -: 4933:    Tracev((stderr, "\nbl counts: "));
      110: 4934:    send_bits(lcodes-257, 5); /* not +255 as stated in appnote.txt */
      110: 4935:    send_bits(dcodes-1,   5);
      110: 4936:    send_bits(blcodes-4,  4); /* not -3 as stated in appnote.txt */
     1761: 4937:    for (rank = 0; rank < blcodes; rank++) {
        -: 4938:        Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
     1651: 4939:        send_bits(bl_tree[bl_order[rank]].Len, 3);
        -: 4940:    }
        -: 4941:    Tracev((stderr, "\nbl tree: sent %ld", bits_sent));
        -: 4942:
      110: 4943:    send_tree((ct_data near *)dyn_ltree, lcodes-1); /* send the literal tree */
        -: 4944:    Tracev((stderr, "\nlit tree: sent %ld", bits_sent));
        -: 4945:
      110: 4946:    send_tree((ct_data near *)dyn_dtree, dcodes-1); /* send the distance tree */
        -: 4947:    Tracev((stderr, "\ndist tree: sent %ld", bits_sent));
      110: 4948:}
        -: 4949:
        -: 4950:/* ===========================================================================
        -: 4951: * Determine the best encoding for the current block: dynamic trees, static
        -: 4952: * trees or store, and output the encoded block to the zip file. This function
        -: 4953: * returns the total compressed length for the file so far.
        -: 4954: */
      114: 4955:ulg flush_block(buf, stored_len, eof)
        -: 4956:    char *buf;        /* input block, or NULL if too old */
        -: 4957:    ulg stored_len;   /* length of input block */
        -: 4958:    int eof;          /* true if this is the last block for a file */
        -: 4959:{
        -: 4960:    ulg opt_lenb, static_lenb; /* opt_len and static_len in bytes */
        -: 4961:    int max_blindex;  /* index of last bit length code of non zero freq */
        -: 4962:
      114: 4963:    flag_buf[last_flags] = flags; /* Save the flags for the last 8 items */
        -: 4964:
        -: 4965:     /* Check if the file is ascii or binary */
      114: 4966:    if (*file_type == (ush)UNKNOWN) set_file_type();
        -: 4967:
        -: 4968:    /* Construct the literal and distance trees */
      114: 4969:    build_tree((tree_desc near *)(&l_desc));
        -: 4970:    Tracev((stderr, "\nlit data: dyn %ld, stat %ld", opt_len, static_len));
        -: 4971:
      114: 4972:    build_tree((tree_desc near *)(&d_desc));
        -: 4973:    Tracev((stderr, "\ndist data: dyn %ld, stat %ld", opt_len, static_len));
        -: 4974:    /* At this point, opt_len and static_len are the total bit lengths of
        -: 4975:     * the compressed block data, excluding the tree representations.
        -: 4976:     */
        -: 4977:
        -: 4978:    /* Build the bit length tree for the above two trees, and get the index
        -: 4979:     * in bl_order of the last bit length code to send.
        -: 4980:     */
      114: 4981:    max_blindex = build_bl_tree();
        -: 4982:
        -: 4983:    /* Determine the best encoding. Compute first the block length in bytes */
      114: 4984:    opt_lenb = (opt_len+3+7)>>3;
      114: 4985:    static_lenb = (static_len+3+7)>>3;
      114: 4986:    input_len += stored_len; /* for debugging only */
        -: 4987:
        -: 4988:    Trace((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u dist %u ",
        -: 4989:            opt_lenb, opt_len, static_lenb, static_len, stored_len,
        -: 4990:            last_lit, last_dist));
        -: 4991:
      114: 4992:    if (static_lenb <= opt_lenb) opt_lenb = static_lenb;
        -: 4993:
        -: 4994:    /* If compression failed and this is the first and last block,
        -: 4995:     * and if the zip file can be seeked (to rewrite the local header),
        -: 4996:     * the whole file is transformed into a stored file:
        -: 4997:     */
        -: 4998:#ifdef FORCE_METHOD
        -: 4999:    if (level == 1 && eof && compressed_len == 0L) { /* force stored file */
        -: 5000:#else
        -: 5001:    if (stored_len <= opt_lenb && eof && compressed_len == 0L && seekable()) {
        -: 5002:#endif
        -: 5003:        /* Since LIT_BUFSIZE <= 2*WSIZE, the input data must be there: */
        -: 5004:        if (buf == (char*)0) error ("block vanished");
        -: 5005:
        -: 5006:        copy_block(buf, (unsigned)stored_len, 0); /* without header */
        -: 5007:        compressed_len = stored_len << 3;
        -: 5008:        *file_method = STORED;
        -: 5009:
        -: 5010:#ifdef FORCE_METHOD
        -: 5011:    } else if (level == 2 && buf != (char*)0) { /* force stored block */
        -: 5012:#else
      114: 5013:    } else if (stored_len+4 <= opt_lenb && buf != (char*)0) {
        -: 5014:                       /* 4: two words for the lengths */
        -: 5015:#endif
        -: 5016:        /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
        -: 5017:         * Otherwise we can't have processed more than WSIZE input bytes since
        -: 5018:         * the last block flush, because compression would have been
        -: 5019:         * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
        -: 5020:         * transform a block into a stored block.
        -: 5021:         */
        1: 5022:        send_bits((STORED_BLOCK<<1)+eof, 3);  /* send block type */
        1: 5023:        compressed_len = (compressed_len + 3 + 7) & ~7L;
        1: 5024:        compressed_len += (stored_len + 4) << 3;
        -: 5025:
        1: 5026:        copy_block(buf, (unsigned)stored_len, 1); /* with header */
        -: 5027:
        -: 5028:#ifdef FORCE_METHOD
        -: 5029:    } else if (level == 3) { /* force static trees */
        -: 5030:#else
      113: 5031:    } else if (static_lenb == opt_lenb) {
        -: 5032:#endif
        3: 5033:        send_bits((STATIC_TREES<<1)+eof, 3);
        3: 5034:        compress_block((ct_data near *)static_ltree, (ct_data near *)static_dtree);
        3: 5035:        compressed_len += 3 + static_len;
        -: 5036:    } else {
      110: 5037:        send_bits((DYN_TREES<<1)+eof, 3);
      110: 5038:        send_all_trees(l_desc.max_code+1, d_desc.max_code+1, max_blindex+1);
      110: 5039:        compress_block((ct_data near *)dyn_ltree, (ct_data near *)dyn_dtree);
      110: 5040:        compressed_len += 3 + opt_len;
        -: 5041:    }
        -: 5042:    Assert (compressed_len == bits_sent, "bad compressed size");
      114: 5043:    init_block();
        -: 5044:
      114: 5045:    if (eof) {
        -: 5046:        Assert (input_len == isize, "bad input size");
      106: 5047:        bi_windup();
      106: 5048:        compressed_len += 7;  /* align on byte boundary */
        -: 5049:    }
        -: 5050:    Tracev((stderr,"\ncomprlen %lu(%lu) ", compressed_len>>3,
        -: 5051:           compressed_len-7*eof));
        -: 5052:
      114: 5053:    return compressed_len >> 3;
        -: 5054:}
        -: 5055:
        -: 5056:/* ===========================================================================
        -: 5057: * Save the match info and tally the frequency counts. Return true if
        -: 5058: * the current block must be flushed.
        -: 5059: */
   881453: 5060:int ct_tally (dist, lc)
        -: 5061:    int dist;  /* distance of matched string */
        -: 5062:    int lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */
        -: 5063:{
   881453: 5064:    l_buf[last_lit++] = (uch)lc;
   881453: 5065:    if (dist == 0) {
        -: 5066:        /* lc is the unmatched char */
   393430: 5067:        dyn_ltree[lc].Freq++;
        -: 5068:    } else {
        -: 5069:        /* Here, lc is the match length - MIN_MATCH */
   488023: 5070:        dist--;             /* dist = match distance - 1 */
        -: 5071:        Assert((ush)dist < (ush)MAX_DIST &&
        -: 5072:               (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
        -: 5073:               (ush)d_code(dist) < (ush)D_CODES,  "ct_tally: bad match");
        -: 5074:
   488023: 5075:        dyn_ltree[length_code[lc]+LITERALS+1].Freq++;
   488023: 5076:        dyn_dtree[d_code(dist)].Freq++;
        -: 5077:
   488023: 5078:        d_buf[last_dist++] = (ush)dist;
   488023: 5079:        flags |= flag_bit;
        -: 5080:    }
   881453: 5081:    flag_bit <<= 1;
        -: 5082:
        -: 5083:    /* Output the flags if they fill a byte: */
   881453: 5084:    if ((last_lit & 7) == 0) {
   110147: 5085:        flag_buf[last_flags++] = flags;
   110147: 5086:        flags = 0, flag_bit = 1;
        -: 5087:    }
        -: 5088:    /* Try to guess if it is profitable to stop the current block here */
   881453: 5089:    if (level > 2 && (last_lit & 0xfff) == 0) {
        -: 5090:        /* Compute an upper bound for the compressed length */
      111: 5091:        ulg out_length = (ulg)last_lit*8L;
      111: 5092:        ulg in_length = (ulg)strstart-block_start;
        -: 5093:        int dcode;
     3441: 5094:        for (dcode = 0; dcode < D_CODES; dcode++) {
     3330: 5095:            out_length += (ulg)dyn_dtree[dcode].Freq*(5L+extra_dbits[dcode]);
        -: 5096:        }
      111: 5097:        out_length >>= 3;
        -: 5098:        Trace((stderr,"\nlast_lit %u, last_dist %u, in %ld, out ~%ld(%ld%%) ",
        -: 5099:               last_lit, last_dist, in_length, out_length,
        -: 5100:               100L - out_length*100L/in_length));
      111: 5101:        if (last_dist < last_lit/2 && out_length < in_length/2) return 1;
        -: 5102:    }
   881447: 5103:    return (last_lit == LIT_BUFSIZE-1 || last_dist == DIST_BUFSIZE);
        -: 5104:    /* We avoid equality with LIT_BUFSIZE because of wraparound at 64K
        -: 5105:     * on 16 bit machines and because stored blocks are restricted to
        -: 5106:     * 64K-1 bytes.
        -: 5107:     */
        -: 5108:}
        -: 5109:
        -: 5110:/* ===========================================================================
        -: 5111: * Send the block data compressed using the given Huffman trees
        -: 5112: */
      113: 5113:local void compress_block(ltree, dtree)
        -: 5114:    ct_data near *ltree; /* literal tree */
        -: 5115:    ct_data near *dtree; /* distance tree */
        -: 5116:{
        -: 5117:    unsigned dist;      /* distance of matched string */
        -: 5118:    int lc;             /* match length or unmatched char (if dist == 0) */
      113: 5119:    unsigned lx = 0;    /* running index in l_buf */
      113: 5120:    unsigned dx = 0;    /* running index in d_buf */
      113: 5121:    unsigned fx = 0;    /* running index in flag_buf */
      113: 5122:    uch flag = 0;       /* current flags */
        -: 5123:    unsigned code;      /* the code to send */
        -: 5124:    int extra;          /* number of extra bits to send */
        -: 5125:
      113: 5126:    if (last_lit != 0) do {
   869415: 5127:        if ((lx & 7) == 0) flag = flag_buf[fx++];
   869415: 5128:        lc = l_buf[lx++];
   869415: 5129:        if ((flag & 1) == 0) {
   381396: 5130:            send_code(lc, ltree); /* send a literal byte */
        -: 5131:            Tracecv(isgraph(lc), (stderr," '%c' ", lc));
        -: 5132:        } else {
        -: 5133:            /* Here, lc is the match length - MIN_MATCH */
   488019: 5134:            code = length_code[lc];
   488019: 5135:            send_code(code+LITERALS+1, ltree); /* send the length code */
   488019: 5136:            extra = extra_lbits[code];
   488019: 5137:            if (extra != 0) {
    82749: 5138:                lc -= base_length[code];
    82749: 5139:                send_bits(lc, extra);        /* send the extra length bits */
        -: 5140:            }
   488019: 5141:            dist = d_buf[dx++];
        -: 5142:            /* Here, dist is the match distance - 1 */
   488019: 5143:            code = d_code(dist);
        -: 5144:            Assert (code < D_CODES, "bad d_code");
        -: 5145:
   488019: 5146:            send_code(code, dtree);       /* send the distance code */
   488019: 5147:            extra = extra_dbits[code];
   488019: 5148:            if (extra != 0) {
   485669: 5149:                dist -= base_dist[code];
   485669: 5150:                send_bits(dist, extra);   /* send the extra distance bits */
        -: 5151:            }
        -: 5152:        } /* literal or match pair ? */
   869415: 5153:        flag >>= 1;
   869415: 5154:    } while (lx < last_lit);
        -: 5155:
      113: 5156:    send_code(END_BLOCK, ltree);
      113: 5157:}
        -: 5158:
        -: 5159:/* ===========================================================================
        -: 5160: * Set the file type to ASCII or BINARY, using a crude approximation:
        -: 5161: * binary if more than 20% of the bytes are <= 6 or >= 128, ascii otherwise.
        -: 5162: * IN assertion: the fields freq of dyn_ltree are set and the total of all
        -: 5163: * frequencies does not exceed 64K (to fit in an int on 16 bit machines).
        -: 5164: */
    #####: 5165:local void set_file_type()
        -: 5166:{
    #####: 5167:    int n = 0;
    #####: 5168:    unsigned ascii_freq = 0;
    #####: 5169:    unsigned bin_freq = 0;
    #####: 5170:    while (n < 7)        bin_freq += dyn_ltree[n++].Freq;
    #####: 5171:    while (n < 128)    ascii_freq += dyn_ltree[n++].Freq;
    #####: 5172:    while (n < LITERALS) bin_freq += dyn_ltree[n++].Freq;
    #####: 5173:    *file_type = bin_freq > (ascii_freq >> 2) ? BINARY : ASCII;
        -: 5174:    if (*file_type == BINARY && translate_eol) {
        -: 5175:        warn("-l used on binary file", "");
        -: 5176:    }
    #####: 5177:}
        -: 5178:/* unlzw.c -- decompress files in LZW format.
        -: 5179: * The code in this file is directly derived from the public domain 'compress'
        -: 5180: * written by Spencer Thomas, Joe Orost, James Woods, Jim McKie, Steve Davies,
        -: 5181: * Ken Turkowski, Dave Mack and Peter Jannesen.
        -: 5182: *
        -: 5183: * This is a temporary version which will be rewritten in some future version
        -: 5184: * to accommodate in-memory decompression.
        -: 5185: */
        -: 5186:
        -: 5187:/*
        -: 5188:#ifndef lint
        -: 5189:static char rcsid[] = "$Id: unlzw.c,v 0.13 1993/05/27 10:32:55 jloup Exp $";
        -: 5190:#endif
        -: 5191:*/
        -: 5192:
        -: 5193:#ifdef HAVE_UNISTD_H
        -: 5194:#  include <unistd.h>
        -: 5195:#endif
        -: 5196:#ifndef NO_FCNTL_H
        -: 5197:#  include <fcntl.h>
        -: 5198:#endif
        -: 5199:
        -: 5200:typedef	unsigned char	char_type;
        -: 5201:typedef          long   code_int;
        -: 5202:typedef unsigned long 	count_int;
        -: 5203:typedef unsigned short	count_short;
        -: 5204:typedef unsigned long 	cmp_code_int;
        -: 5205:
        -: 5206:#define MAXCODE(n)	(1L << (n))
        -: 5207:    
        -: 5208:#ifndef	REGISTERS
        -: 5209:#	define	REGISTERS	2
        -: 5210:#endif
        -: 5211:#define	REG1	
        -: 5212:#define	REG2	
        -: 5213:#define	REG3	
        -: 5214:#define	REG4	
        -: 5215:#define	REG5	
        -: 5216:#define	REG6	
        -: 5217:#define	REG7	
        -: 5218:#define	REG8	
        -: 5219:#define	REG9	
        -: 5220:#define	REG10
        -: 5221:#define	REG11	
        -: 5222:#define	REG12	
        -: 5223:#define	REG13
        -: 5224:#define	REG14
        -: 5225:#define	REG15
        -: 5226:#define	REG16
        -: 5227:#if REGISTERS >= 1
        -: 5228:#	undef	REG1
        -: 5229:#	define	REG1	register
        -: 5230:#endif
        -: 5231:#if REGISTERS >= 2
        -: 5232:#	undef	REG2
        -: 5233:#	define	REG2	register
        -: 5234:#endif
        -: 5235:#if REGISTERS >= 3
        -: 5236:#	undef	REG3
        -: 5237:#	define	REG3	register
        -: 5238:#endif
        -: 5239:#if REGISTERS >= 4
        -: 5240:#	undef	REG4
        -: 5241:#	define	REG4	register
        -: 5242:#endif
        -: 5243:#if REGISTERS >= 5
        -: 5244:#	undef	REG5
        -: 5245:#	define	REG5	register
        -: 5246:#endif
        -: 5247:#if REGISTERS >= 6
        -: 5248:#	undef	REG6
        -: 5249:#	define	REG6	register
        -: 5250:#endif
        -: 5251:#if REGISTERS >= 7
        -: 5252:#	undef	REG7
        -: 5253:#	define	REG7	register
        -: 5254:#endif
        -: 5255:#if REGISTERS >= 8
        -: 5256:#	undef	REG8
        -: 5257:#	define	REG8	register
        -: 5258:#endif
        -: 5259:#if REGISTERS >= 9
        -: 5260:#	undef	REG9
        -: 5261:#	define	REG9	register
        -: 5262:#endif
        -: 5263:#if REGISTERS >= 10
        -: 5264:#	undef	REG10
        -: 5265:#	define	REG10	register
        -: 5266:#endif
        -: 5267:#if REGISTERS >= 11
        -: 5268:#	undef	REG11
        -: 5269:#	define	REG11	register
        -: 5270:#endif
        -: 5271:#if REGISTERS >= 12
        -: 5272:#	undef	REG12
        -: 5273:#	define	REG12	register
        -: 5274:#endif
        -: 5275:#if REGISTERS >= 13
        -: 5276:#	undef	REG13
        -: 5277:#	define	REG13	register
        -: 5278:#endif
        -: 5279:#if REGISTERS >= 14
        -: 5280:#	undef	REG14
        -: 5281:#	define	REG14	register
        -: 5282:#endif
        -: 5283:#if REGISTERS >= 15
        -: 5284:#	undef	REG15
        -: 5285:#	define	REG15	register
        -: 5286:#endif
        -: 5287:#if REGISTERS >= 16
        -: 5288:#	undef	REG16
        -: 5289:#	define	REG16	register
        -: 5290:#endif
        -: 5291:    
        -: 5292:#ifndef	BYTEORDER
        -: 5293:#	define	BYTEORDER	0000
        -: 5294:#endif
        -: 5295:	
        -: 5296:#ifndef	NOALLIGN
        -: 5297:#	define	NOALLIGN	0
        -: 5298:#endif
        -: 5299:
        -: 5300:
        -: 5301:union	bytes {
        -: 5302:    long  word;
        -: 5303:    struct {
        -: 5304:#if BYTEORDER == 4321
        -: 5305:	char_type	b1;
        -: 5306:	char_type	b2;
        -: 5307:	char_type	b3;
        -: 5308:	char_type	b4;
        -: 5309:#else
        -: 5310:#if BYTEORDER == 1234
        -: 5311:	char_type	b4;
        -: 5312:	char_type	b3;
        -: 5313:	char_type	b2;
        -: 5314:	char_type	b1;
        -: 5315:#else
        -: 5316:#	undef	BYTEORDER
        -: 5317:	int  dummy;
        -: 5318:#endif
        -: 5319:#endif
        -: 5320:    } bytes;
        -: 5321:};
        -: 5322:
        -: 5323:#if BYTEORDER == 4321 && NOALLIGN == 1
        -: 5324:#  define input(b,o,c,n,m){ \
        -: 5325:     (c) = (*(long *)(&(b)[(o)>>3])>>((o)&0x7))&(m); \
        -: 5326:     (o) += (n); \
        -: 5327:   }
        -: 5328:#else
        -: 5329:#  define input(b,o,c,n,m){ \
        -: 5330:     REG1 char_type *p = &(b)[(o)>>3]; \
        -: 5331:     (c) = ((((long)(p[0]))|((long)(p[1])<<8)| \
        -: 5332:     ((long)(p[2])<<16))>>((o)&0x7))&(m); \
        -: 5333:     (o) += (n); \
        -: 5334:   }
        -: 5335:#endif
        -: 5336:
        -: 5337:#ifndef MAXSEG_64K
        -: 5338:   /* DECLARE(ush, tab_prefix, (1<<BITS)); -- prefix code */
        -: 5339:#  define tab_prefixof(i) tab_prefix[i]
        -: 5340:#  define clear_tab_prefixof()	memzero(tab_prefix, 256);
        -: 5341:#else
        -: 5342:   /* DECLARE(ush, tab_prefix0, (1<<(BITS-1)); -- prefix for even codes */
        -: 5343:   /* DECLARE(ush, tab_prefix1, (1<<(BITS-1)); -- prefix for odd  codes */
        -: 5344:   ush *tab_prefix[2];
        -: 5345:#  define tab_prefixof(i) tab_prefix[(i)&1][(i)>>1]
        -: 5346:#  define clear_tab_prefixof()	\
        -: 5347:      memzero(tab_prefix0, 128), \
        -: 5348:      memzero(tab_prefix1, 128);
        -: 5349:#endif
        -: 5350:#define de_stack        ((char_type *)(&d_buf[DIST_BUFSIZE-1]))
        -: 5351:#define tab_suffixof(i) tab_suffix[i]
        -: 5352:
        -: 5353:int block_mode = BLOCK_MODE; /* block compress mode -C compatible with 2.0 */
        -: 5354:
        -: 5355:/* ============================================================================
        -: 5356: * Decompress in to out.  This routine adapts to the codes in the
        -: 5357: * file building the "string" table on-the-fly; requiring no table to
        -: 5358: * be stored in the compressed file.
        -: 5359: * IN assertions: the buffer inbuf contains already the beginning of
        -: 5360: *   the compressed data, from offsets iptr to insize-1 included.
        -: 5361: *   The magic header has already been checked and skipped.
        -: 5362: *   bytes_in and bytes_out have been initialized.
        -: 5363: */
        1: 5364:int unlzw(in, out) 
        -: 5365:    int in, out;    /* input and output file descriptors */
        -: 5366:{
        -: 5367:    REG2   char_type  *stackp;
        -: 5368:    REG3   code_int   code;
        -: 5369:    REG4   int        finchar;
        -: 5370:    REG5   code_int   oldcode;
        -: 5371:    REG6   code_int   incode;
        -: 5372:    REG7   long       inbits;
        -: 5373:    REG8   long       posbits;
        -: 5374:    REG9   int        outpos;
        -: 5375:/*  REG10  int        insize; (global) */
        -: 5376:    REG11  unsigned   bitmask;
        -: 5377:    REG12  code_int   free_ent;
        -: 5378:    REG13  code_int   maxcode;
        -: 5379:    REG14  code_int   maxmaxcode;
        -: 5380:    REG15  int        n_bits;
        -: 5381:    REG16  int        rsize;
        -: 5382:    
        -: 5383:#ifdef MAXSEG_64K
        -: 5384:    tab_prefix[0] = tab_prefix0;
        -: 5385:    tab_prefix[1] = tab_prefix1;
        -: 5386:#endif
        1: 5387:    maxbits = get_byte();
        1: 5388:    block_mode = maxbits & BLOCK_MODE;
        1: 5389:    if ((maxbits & LZW_RESERVED) != 0) {
    #####: 5390:	WARN((stderr, "\n%s: %s: warning, unknown flags 0x%x\n",
        -: 5391:	      progname, ifname, maxbits & LZW_RESERVED));
        -: 5392:    }
        1: 5393:    maxbits &= BIT_MASK;
        1: 5394:    maxmaxcode = MAXCODE(maxbits);
        -: 5395:    
        1: 5396:    if (maxbits > BITS) {
    #####: 5397:	fprintf(stderr,
        -: 5398:		"\n%s: %s: compressed with %d bits, can only handle %d bits\n",
        -: 5399:		progname, ifname, maxbits, BITS);
    #####: 5400:	exit_code = ERROR;
    #####: 5401:	return ERROR;
        -: 5402:    }
        1: 5403:    rsize = insize;
        1: 5404:    maxcode = MAXCODE(n_bits = INIT_BITS)-1;
        1: 5405:    bitmask = (1<<n_bits)-1;
        1: 5406:    oldcode = -1;
        1: 5407:    finchar = 0;
        1: 5408:    outpos = 0;
        1: 5409:    posbits = inptr<<3;
        -: 5410:
        1: 5411:    free_ent = ((block_mode) ? FIRST : 256);
        -: 5412:    
        1: 5413:    clear_tab_prefixof(); /* Initialize the first 256 entries in the table. */
        -: 5414:    
      257: 5415:    for (code = 255 ; code >= 0 ; --code) {
      256: 5416:	tab_suffixof(code) = (char_type)code;
        -: 5417:    }
        -: 5418:    do {
        -: 5419:	REG1 int i;
        -: 5420:	int  e;
        -: 5421:	int  o;
        -: 5422:	
        -: 5423:    resetbuf:
        7: 5424:	e = insize-(o = (posbits>>3));
        -: 5425:	
    74495: 5426:	for (i = 0 ; i < e ; ++i) {
    74488: 5427:	    inbuf[i] = inbuf[i+o];
        -: 5428:	}
        7: 5429:	insize = e;
        7: 5430:	posbits = 0;
        -: 5431:	
        7: 5432:	if (insize < INBUF_EXTRA) {
        1: 5433:	    if ((rsize = read(in, (char*)inbuf+insize, INBUFSIZ)) == EOF) {
    #####: 5434:		read_error();
        -: 5435:	    }
        1: 5436:	    insize += rsize;
        1: 5437:	    bytes_in += (ulg)rsize;
        -: 5438:	}
        8: 5439:	inbits = ((rsize != 0) ? ((long)insize - insize%n_bits)<<3 : 
        1: 5440:		  ((long)insize<<3)-(n_bits-1));
        -: 5441:	
    10152: 5442:	while (inbits > posbits) {
    10143: 5443:	    if (free_ent > maxcode) {
       10: 5444:		posbits = ((posbits-1) +
        5: 5445:			   ((n_bits<<3)-(posbits-1+(n_bits<<3))%(n_bits<<3)));
        5: 5446:		++n_bits;
        5: 5447:		if (n_bits == maxbits) {
    #####: 5448:		    maxcode = maxmaxcode;
        -: 5449:		} else {
        5: 5450:		    maxcode = MAXCODE(n_bits)-1;
        -: 5451:		}
        5: 5452:		bitmask = (1<<n_bits)-1;
        5: 5453:		goto resetbuf;
        -: 5454:	    }
    10138: 5455:	    input(inbuf,posbits,code,n_bits,bitmask);
        -: 5456:	    
    10138: 5457:	    if (oldcode == -1) {
        1: 5458:		outbuf[outpos++] = (char_type)(finchar = (int)(oldcode=code));
        1: 5459:		continue;
        -: 5460:	    }
    10137: 5461:	    if (code == CLEAR && block_mode) {
    #####: 5462:		clear_tab_prefixof();
    #####: 5463:		free_ent = FIRST - 1;
    #####: 5464:		posbits = ((posbits-1) +
    #####: 5465:			   ((n_bits<<3)-(posbits-1+(n_bits<<3))%(n_bits<<3)));
    #####: 5466:		maxcode = MAXCODE(n_bits = INIT_BITS)-1;
    #####: 5467:		bitmask = (1<<n_bits)-1;
    #####: 5468:		goto resetbuf;
        -: 5469:	    }
    10137: 5470:	    incode = code;
    10137: 5471:	    stackp = de_stack;
        -: 5472:	    
    10137: 5473:	    if (code >= free_ent) { /* Special case for KwKwK string. */
       17: 5474:		if (code > free_ent) {
        -: 5475:#ifdef DEBUG		    
        -: 5476:		    char_type *p;
        -: 5477:
        -: 5478:		    posbits -= n_bits;
        -: 5479:		    p = &inbuf[posbits>>3];
        -: 5480:		    fprintf(stderr,
        -: 5481:			    "code:%ld free_ent:%ld n_bits:%d insize:%u\n",
        -: 5482:			    code, free_ent, n_bits, insize);
        -: 5483:		    fprintf(stderr,
        -: 5484:			    "posbits:%ld inbuf:%02X %02X %02X %02X %02X\n",
        -: 5485:			    posbits, p[-1],p[0],p[1],p[2],p[3]);
        -: 5486:#endif
    #####: 5487:		    if (!test && outpos > 0) {
    #####: 5488:			write_buf(out, (char*)outbuf, outpos);
    #####: 5489:			bytes_out += (ulg)outpos;
        -: 5490:		    }
    #####: 5491:		    error("corrupt input. Use zcat to recover some data.");
        -: 5492:		}
       17: 5493:		*--stackp = (char_type)finchar;
       17: 5494:		code = oldcode;
        -: 5495:	    }
        -: 5496:
    44350: 5497:	    while ((cmp_code_int)code >= (cmp_code_int)256) {
        -: 5498:		/* Generate output characters in reverse order */
    24076: 5499:		*--stackp = tab_suffixof(code);
    24076: 5500:		code = tab_prefixof(code);
        -: 5501:	    }
    10137: 5502:	    *--stackp =	(char_type)(finchar = tab_suffixof(code));
        -: 5503:	    
        -: 5504:	    /* And put them out in forward order */
        -: 5505:	    {
        -: 5506:		REG1 int	i;
        -: 5507:	    
    10137: 5508:		if (outpos+(i = (de_stack-stackp)) >= OUTBUFSIZ) {
        -: 5509:		    do {
        4: 5510:			if (i > OUTBUFSIZ-outpos) i = OUTBUFSIZ-outpos;
        -: 5511:
        4: 5512:			if (i > 0) {
        4: 5513:			    memcpy(outbuf+outpos, stackp, i);
        4: 5514:			    outpos += i;
        -: 5515:			}
        4: 5516:			if (outpos >= OUTBUFSIZ) {
        2: 5517:			    if (!test) {
        2: 5518:				write_buf(out, (char*)outbuf, outpos);
        2: 5519:				bytes_out += (ulg)outpos;
        -: 5520:			    }
        2: 5521:			    outpos = 0;
        -: 5522:			}
        4: 5523:			stackp+= i;
        4: 5524:		    } while ((i = (de_stack-stackp)) > 0);
        -: 5525:		} else {
    10135: 5526:		    memcpy(outbuf+outpos, stackp, i);
    10135: 5527:		    outpos += i;
        -: 5528:		}
        -: 5529:	    }
        -: 5530:
    10137: 5531:	    if ((code = free_ent) < maxmaxcode) { /* Generate the new entry. */
        -: 5532:
    10137: 5533:		tab_prefixof(code) = (unsigned short)oldcode;
    10137: 5534:		tab_suffixof(code) = (char_type)finchar;
    10137: 5535:		free_ent = code+1;
        -: 5536:	    } 
    10137: 5537:	    oldcode = incode;	/* Remember previous code.	*/
        -: 5538:	}
        2: 5539:    } while (rsize != 0);
        -: 5540:    
        1: 5541:    if (!test && outpos > 0) {
        1: 5542:	write_buf(out, (char*)outbuf, outpos);
        1: 5543:	bytes_out += (ulg)outpos;
        -: 5544:    }
        1: 5545:    return OK;
        -: 5546:}
        -: 5547:/* unpack.c -- decompress files in pack format.
        -: 5548: * Copyright (C) 1992-1993 Jean-loup Gailly
        -: 5549: * This is free software; you can redistribute it and/or modify it under the
        -: 5550: * terms of the GNU General Public License, see the file COPYING.
        -: 5551: */
        -: 5552:
        -: 5553:/*
        -: 5554:#ifndef lint
        -: 5555:static char rcsid[] = "$Id: unpack.c,v 1.3 1993/05/28 17:56:07 jloup Exp $";
        -: 5556:#endif
        -: 5557:*/
        -: 5558:
        -: 5559:#define MIN(a,b) ((a) <= (b) ? (a) : (b))
        -: 5560:/* The arguments must not have side effects. */
        -: 5561:
        -: 5562:#define MAX_BITLEN 25
        -: 5563:/* Maximum length of Huffman codes. (Minor modifications to the code
        -: 5564: * would be needed to support 32 bits codes, but pack never generates
        -: 5565: * more than 24 bits anyway.)
        -: 5566: */
        -: 5567:
        -: 5568:#define LITERALS 256
        -: 5569:/* Number of literals, excluding the End of Block (EOB) code */
        -: 5570:
        -: 5571:#ifdef SMALL_MEM
        -: 5572:#  define MAX_PEEK 10
        -: 5573:#else
        -: 5574:#  define MAX_PEEK 12
        -: 5575:#endif
        -: 5576:/* Maximum number of 'peek' bits used to optimize traversal of the
        -: 5577: * Huffman tree.
        -: 5578: */
        -: 5579:
        -: 5580:local ulg orig_len;       /* original uncompressed length */
        -: 5581:local int max_len;        /* maximum bit length of Huffman codes */
        -: 5582:
        -: 5583:local uch literal[LITERALS];
        -: 5584:/* The literal bytes present in the Huffman tree. The EOB code is not
        -: 5585: * represented.
        -: 5586: */
        -: 5587:
        -: 5588:local int lit_base[MAX_BITLEN+1];
        -: 5589:/* All literals of a given bit length are contiguous in literal[] and
        -: 5590: * have contiguous codes. literal[code+lit_base[len]] is the literal
        -: 5591: * for a code of len bits.
        -: 5592: */
        -: 5593:
        -: 5594:local int leaves [MAX_BITLEN+1]; /* Number of leaves for each bit length */
        -: 5595:local int parents[MAX_BITLEN+1]; /* Number of parents for each bit length */
        -: 5596:
        -: 5597:local int peek_bits; /* Number of peek bits currently used */
        -: 5598:
        -: 5599:local uch prefix_len[1 << MAX_PEEK];
        -: 5600:/* For each bit pattern b of peek_bits bits, prefix_len[b] is the length
        -: 5601: * of the Huffman code starting with a prefix of b (upper bits), or 0
        -: 5602: * if all codes of prefix b have more than peek_bits bits. It is not
        -: 5603: * necessary to have a huge table (large MAX_PEEK) because most of the
        -: 5604: * codes encountered in the input stream are short codes (by construction).
        -: 5605: * So for most codes a single lookup will be necessary.
        -: 5606: */
        -: 5607:
        -: 5608:local ulg bitbuf;
        -: 5609:/* Bits are added on the low part of bitbuf and read from the high part. */
        -: 5610:
        -: 5611:local int valid;                  /* number of valid bits in bitbuf */
        -: 5612:/* all bits above the last valid bit are always zero */
        -: 5613:
        -: 5614:/* Set code to the next 'bits' input bits without skipping them. code
        -: 5615: * must be the name of a simple variable and bits must not have side effects.
        -: 5616: * IN assertions: bits <= 25 (so that we still have room for an extra byte
        -: 5617: * when valid is only 24), and mask = (1<<bits)-1.
        -: 5618: */
        -: 5619:#define look_bits(code,bits,mask) \
        -: 5620:{ \
        -: 5621:  while (valid < (bits)) bitbuf = (bitbuf<<8) | (ulg)get_byte(), valid += 8; \
        -: 5622:  code = (bitbuf >> (valid-(bits))) & (mask); \
        -: 5623:}
        -: 5624:
        -: 5625:/* Skip the given number of bits (after having peeked at them): */
        -: 5626:#define skip_bits(bits)  (valid -= (bits))
        -: 5627:
        -: 5628:#define clear_bitbuf() (valid = 0, bitbuf = 0)
        -: 5629:
        -: 5630:/* Local functions */
        -: 5631:
        -: 5632:local void read_tree  OF((void));
        -: 5633:local void un_build_tree OF((void));
        -: 5634:
        -: 5635:/* ===========================================================================
        -: 5636: * Read the Huffman tree.
        -: 5637: */
        1: 5638:local void read_tree()
        -: 5639:{
        -: 5640:    int len;  /* bit length */
        -: 5641:    int base; /* base offset for a sequence of leaves */
        -: 5642:    int n;
        -: 5643:
        -: 5644:    /* Read the original input size, MSB first */
        1: 5645:    orig_len = 0;
        1: 5646:    for (n = 1; n <= 4; n++) orig_len = (orig_len << 8) | (ulg)get_byte();
        -: 5647:
        1: 5648:    max_len = (int)get_byte(); /* maximum bit length of Huffman codes */
        1: 5649:    if (max_len > MAX_BITLEN) {
    #####: 5650:	error("invalid compressed data -- Huffman code > 32 bits");
        -: 5651:    }
        -: 5652:
        -: 5653:    /* Get the number of leaves at each bit length */
        1: 5654:    n = 0;
       17: 5655:    for (len = 1; len <= max_len; len++) {
       16: 5656:	leaves[len] = (int)get_byte();
       16: 5657:	n += leaves[len];
        -: 5658:    }
        1: 5659:    if (n > LITERALS) {
    #####: 5660:	error("too many leaves in Huffman tree");
        -: 5661:    }
        -: 5662:    Trace((stderr, "orig_len %ld, max_len %d, leaves %d\n",
        -: 5663:	   orig_len, max_len, n));
        -: 5664:    /* There are at least 2 and at most 256 leaves of length max_len.
        -: 5665:     * (Pack arbitrarily rejects empty files and files consisting of
        -: 5666:     * a single byte even repeated.) To fit the last leaf count in a
        -: 5667:     * byte, it is offset by 2. However, the last literal is the EOB
        -: 5668:     * code, and is not transmitted explicitly in the tree, so we must
        -: 5669:     * adjust here by one only.
        -: 5670:     */
        1: 5671:    leaves[max_len]++;
        -: 5672:
        -: 5673:    /* Now read the leaves themselves */
        1: 5674:    base = 0;
       17: 5675:    for (len = 1; len <= max_len; len++) {
        -: 5676:	/* Remember where the literals of this length start in literal[] : */
       16: 5677:	lit_base[len] = base;
        -: 5678:	/* And read the literals: */
      107: 5679:	for (n = leaves[len]; n > 0; n--) {
       91: 5680:	    literal[base++] = (uch)get_byte();
        -: 5681:	}
        -: 5682:    }
        1: 5683:    leaves[max_len]++; /* Now include the EOB code in the Huffman tree */
        1: 5684:}
        -: 5685:
        -: 5686:/* ===========================================================================
        -: 5687: * Build the Huffman tree and the prefix table.
        -: 5688: */
        1: 5689:local void un_build_tree()
        -: 5690:{
        1: 5691:    int nodes = 0; /* number of nodes (parents+leaves) at current bit length */
        -: 5692:    int len;       /* current bit length */
        -: 5693:    uch *prefixp;  /* pointer in prefix_len */
        -: 5694:
       17: 5695:    for (len = max_len; len >= 1; len--) {
        -: 5696:	/* The number of parent nodes at this level is half the total
        -: 5697:	 * number of nodes at parent level:
        -: 5698:	 */
       16: 5699:	nodes >>= 1;
       16: 5700:	parents[len] = nodes;
        -: 5701:	/* Update lit_base by the appropriate bias to skip the parent nodes
        -: 5702:	 * (which are not represented in the literal array):
        -: 5703:	 */
       16: 5704:	lit_base[len] -= nodes;
        -: 5705:	/* Restore nodes to be parents+leaves: */
       16: 5706:	nodes += leaves[len];
        -: 5707:    }
        -: 5708:    /* Construct the prefix table, from shortest leaves to longest ones.
        -: 5709:     * The shortest code is all ones, so we start at the end of the table.
        -: 5710:     */
        1: 5711:    peek_bits = MIN(max_len, MAX_PEEK);
        1: 5712:    prefixp = &prefix_len[1<<peek_bits];
       13: 5713:    for (len = 1; len <= peek_bits; len++) {
       12: 5714:	int prefixes = leaves[len] << (peek_bits-len); /* may be 0 */
       12: 5715:	while (prefixes--) *--prefixp = (uch)len;
        -: 5716:    }
        -: 5717:    /* The length of all other codes is unknown: */
        1: 5718:    while (prefixp > prefix_len) *--prefixp = 0;
        1: 5719:}
        -: 5720:
        -: 5721:/* ===========================================================================
        -: 5722: * Unpack in to out.  This routine does not support the old pack format
        -: 5723: * with magic header \037\037.
        -: 5724: *
        -: 5725: * IN assertions: the buffer inbuf contains already the beginning of
        -: 5726: *   the compressed data, from offsets inptr to insize-1 included.
        -: 5727: *   The magic header has already been checked. The output buffer is cleared.
        -: 5728: */
        1: 5729:int unpack(in, out)
        -: 5730:    int in, out;            /* input and output file descriptors */
        -: 5731:{
        -: 5732:    int len;                /* Bit length of current code */
        -: 5733:    unsigned eob;           /* End Of Block code */
        -: 5734:    register unsigned peek; /* lookahead bits */
        -: 5735:    unsigned peek_mask;     /* Mask for peek_bits bits */
        -: 5736:
        1: 5737:    ifd = in;
        1: 5738:    ofd = out;
        -: 5739:
        1: 5740:    read_tree();     /* Read the Huffman tree */
        1: 5741:    un_build_tree();    /* Build the prefix table */
        1: 5742:    clear_bitbuf();  /* Initialize bit input */
        1: 5743:    peek_mask = (1<<peek_bits)-1;
        -: 5744:
        -: 5745:    /* The eob code is the largest code among all leaves of maximal length: */
        1: 5746:    eob = leaves[max_len]-1;
        -: 5747:    Trace((stderr, "eob %d %x\n", max_len, eob));
        -: 5748:
        -: 5749:    /* Decode the input data: */
        -: 5750:    for (;;) {
        -: 5751:	/* Since eob is the longest code and not shorter than max_len,
        -: 5752:         * we can peek at max_len bits without having the risk of reading
        -: 5753:         * beyond the end of file.
        -: 5754:	 */
    34232: 5755:	look_bits(peek, peek_bits, peek_mask);
    34232: 5756:	len = prefix_len[peek];
    34232: 5757:	if (len > 0) {
    34184: 5758:	    peek >>= peek_bits - len; /* discard the extra bits */
        -: 5759:	} else {
        -: 5760:	    /* Code of more than peek_bits bits, we must traverse the tree */
       48: 5761:	    ulg mask = peek_mask;
       48: 5762:	    len = peek_bits;
        -: 5763:	    do {
       76: 5764:                len++, mask = (mask<<1)+1;
       76: 5765:		look_bits(peek, len, mask);
       76: 5766:	    } while (peek < parents[len]);
        -: 5767:	    /* loop as long as peek is a parent node */
        -: 5768:	}
        -: 5769:	/* At this point, peek is the next complete code, of len bits */
    34232: 5770:	if (peek == eob && len == max_len) break; /* end of file? */
    34231: 5771:	put_ubyte(literal[peek+lit_base[len]]);
        -: 5772:	Tracev((stderr,"%02d %04x %c\n", len, peek,
        -: 5773:		literal[peek+lit_base[len]]));
    34231: 5774:	skip_bits(len);
    34231: 5775:    } /* for (;;) */
        -: 5776:
        1: 5777:    flush_window();
        -: 5778:    Trace((stderr, "bytes_out %ld\n", bytes_out));
        1: 5779:    if (orig_len != bytes_out) {
    #####: 5780:	error("invalid compressed data--length error");
        -: 5781:    }
        1: 5782:    return OK;
        -: 5783:}
        -: 5784:/* unzip.c -- decompress files in gzip or pkzip format.
        -: 5785: * Copyright (C) 1992-1993 Jean-loup Gailly
        -: 5786: * This is free software; you can redistribute it and/or modify it under the
        -: 5787: * terms of the GNU General Public License, see the file COPYING.
        -: 5788: *
        -: 5789: * The code in this file is derived from the file funzip.c written
        -: 5790: * and put in the public domain by Mark Adler.
        -: 5791: */
        -: 5792:
        -: 5793:/*
        -: 5794:   This version can extract files in gzip or pkzip format.
        -: 5795:   For the latter, only the first entry is extracted, and it has to be
        -: 5796:   either deflated or stored.
        -: 5797: */
        -: 5798:
        -: 5799:/*
        -: 5800:#ifndef lint
        -: 5801:static char rcsid[] = "$Id: unzip.c,v 0.12 1993/05/28 17:56:23 jloup Exp $";
        -: 5802:#endif
        -: 5803:*/
        -: 5804:
        -: 5805:/* PKZIP header definitions */
        -: 5806:#define LOCSIG 0x04034b50L      /* four-byte lead-in (lsb first) */
        -: 5807:#define LOCFLG 6                /* offset of bit flag */
        -: 5808:#define  CRPFLG 1               /*  bit for encrypted entry */
        -: 5809:#define  EXTFLG 8               /*  bit for extended local header */
        -: 5810:#define LOCHOW 8                /* offset of compression method */
        -: 5811:#define LOCTIM 10               /* file mod time (for decryption) */
        -: 5812:#define LOCCRC 14               /* offset of crc */
        -: 5813:#define LOCSIZ 18               /* offset of compressed size */
        -: 5814:#define LOCLEN 22               /* offset of uncompressed length */
        -: 5815:#define LOCFIL 26               /* offset of file name field length */
        -: 5816:#define LOCEXT 28               /* offset of extra field length */
        -: 5817:#define LOCHDR 30               /* size of local header, including sig */
        -: 5818:#define EXTHDR 16               /* size of extended local header, inc sig */
        -: 5819:
        -: 5820:
        -: 5821:/* Globals */
        -: 5822:
        -: 5823:int decrypt;        /* flag to turn on decryption */
        -: 5824:char *key;          /* not used--needed to link crypt.c */
        -: 5825:int pkzip = 0;      /* set for a pkzip file */
        -: 5826:int ext_header = 0; /* set if extended local header */
        -: 5827:
        -: 5828:/* ===========================================================================
        -: 5829: * Check zip file and advance inptr to the start of the compressed data.
        -: 5830: * Get ofname from the local header if necessary.
        -: 5831: */
        2: 5832:int check_zipfile(in)
        -: 5833:    int in;   /* input file descriptors */
        -: 5834:{
        2: 5835:    uch *h = inbuf + inptr; /* first local header */
        -: 5836:
        2: 5837:    ifd = in;
        -: 5838:
        -: 5839:    /* Check validity of local header, and skip name and extra fields */
        2: 5840:    inptr += LOCHDR + SH(h + LOCFIL) + SH(h + LOCEXT);
        -: 5841:
        2: 5842:    if (inptr > insize || LG(h) != LOCSIG) {
    #####: 5843:	fprintf(stderr, "\n%s: %s: not a valid zip file\n",
        -: 5844:		progname, ifname);
    #####: 5845:	exit_code = ERROR;
    #####: 5846:	return ERROR;
        -: 5847:    }
        2: 5848:    method = h[LOCHOW];
        2: 5849:    if (method != STORED && method != DEFLATED) {
    #####: 5850:	fprintf(stderr,
        -: 5851:		"\n%s: %s: first entry not deflated or stored -- use unzip\n",
        -: 5852:		progname, ifname);
    #####: 5853:	exit_code = ERROR;
    #####: 5854:	return ERROR;
        -: 5855:    }
        -: 5856:
        -: 5857:    /* If entry encrypted, decrypt and validate encryption header */
        2: 5858:    if ((decrypt = h[LOCFLG] & CRPFLG) != 0) {
    #####: 5859:	fprintf(stderr, "\n%s: %s: encrypted file -- use unzip\n",
        -: 5860:		progname, ifname);
    #####: 5861:	exit_code = ERROR;
    #####: 5862:	return ERROR;
        -: 5863:    }
        -: 5864:
        -: 5865:    /* Save flags for unzip() */
        2: 5866:    ext_header = (h[LOCFLG] & EXTFLG) != 0;
        2: 5867:    pkzip = 1;
        -: 5868:
        -: 5869:    /* Get ofname and time stamp from local header (to be done) */
        2: 5870:    return OK;
        -: 5871:}
        -: 5872:
        -: 5873:/* ===========================================================================
        -: 5874: * Unzip in to out.  This routine works on both gzip and pkzip files.
        -: 5875: *
        -: 5876: * IN assertions: the buffer inbuf contains already the beginning of
        -: 5877: *   the compressed data, from offsets inptr to insize-1 included.
        -: 5878: *   The magic header has already been checked. The output buffer is cleared.
        -: 5879: */
       13: 5880:int unzip(in, out)
        -: 5881:    int in, out;   /* input and output file descriptors */
        -: 5882:{
       13: 5883:    ulg orig_crc = 0;       /* original crc */
       13: 5884:    ulg orig_len = 0;       /* original uncompressed length */
        -: 5885:    int n;
        -: 5886:    uch buf[EXTHDR];        /* extended local header */
        -: 5887:
       13: 5888:    ifd = in;
       13: 5889:    ofd = out;
        -: 5890:
       13: 5891:    updcrc(NULL, 0);           /* initialize crc */
        -: 5892:
       13: 5893:    if (pkzip && !ext_header) {  /* crc and length at the end otherwise */
        2: 5894:	orig_crc = LG(inbuf + LOCCRC);
        2: 5895:	orig_len = LG(inbuf + LOCLEN);
        -: 5896:    }
        -: 5897:
        -: 5898:    /* Decompress */
       13: 5899:    if (method == DEFLATED)  {
        -: 5900:
       13: 5901:	int res = inflate();
        -: 5902:
       13: 5903:	if (res == 3) {
    #####: 5904:	    error("out of memory");
       13: 5905:	} else if (res != 0) {
    #####: 5906:	    error("invalid compressed data--format violated");
        -: 5907:	}
        -: 5908:
    #####: 5909:    } else if (pkzip && method == STORED) {
        -: 5910:
    #####: 5911:	register ulg n = LG(inbuf + LOCLEN);
        -: 5912:
    #####: 5913:	if (n != LG(inbuf + LOCSIZ) - (decrypt ? RAND_HEAD_LEN : 0)) {
        -: 5914:
    #####: 5915:	    fprintf(stderr, "len %ld, siz %ld\n", n, LG(inbuf + LOCSIZ));
    #####: 5916:	    error("invalid compressed data--length mismatch");
        -: 5917:	}
    #####: 5918:	while (n--) {
    #####: 5919:	    uch c = (uch)get_byte();
        -: 5920:#ifdef CRYPT
        -: 5921:	    if (decrypt) zdecode(c);
        -: 5922:#endif
    #####: 5923:	    put_ubyte(c);
        -: 5924:	}
    #####: 5925:	flush_window();
        -: 5926:    } else {
    #####: 5927:	error("internal error, invalid method");
        -: 5928:    }
        -: 5929:
        -: 5930:    /* Get the crc and original length */
       13: 5931:    if (!pkzip) {
        -: 5932:        /* crc32  (see algorithm.doc)
        -: 5933:	 * uncompressed input size modulo 2^32
        -: 5934:         */
       99: 5935:	for (n = 0; n < 8; n++) {
       88: 5936:	    buf[n] = (uch)get_byte(); /* may cause an error if EOF */
        -: 5937:	}
       11: 5938:	orig_crc = LG(buf);
       11: 5939:	orig_len = LG(buf+4);
        -: 5940:
        2: 5941:    } else if (ext_header) {  /* If extended header, check it */
        -: 5942:	/* signature - 4bytes: 0x50 0x4b 0x07 0x08
        -: 5943:	 * CRC-32 value
        -: 5944:         * compressed size 4-bytes
        -: 5945:         * uncompressed size 4-bytes
        -: 5946:	 */
    #####: 5947:	for (n = 0; n < EXTHDR; n++) {
    #####: 5948:	    buf[n] = (uch)get_byte(); /* may cause an error if EOF */
        -: 5949:	}
    #####: 5950:	orig_crc = LG(buf+4);
    #####: 5951:	orig_len = LG(buf+12);
        -: 5952:    }
        -: 5953:
        -: 5954:    /* Validate decompression */
       13: 5955:    if (orig_crc != updcrc(outbuf, 0)) {
    #####: 5956:	error("invalid compressed data--crc error");
        -: 5957:    }
       13: 5958:    if (orig_len != bytes_out) {
    #####: 5959:	error("invalid compressed data--length error");
        -: 5960:    }
        -: 5961:
        -: 5962:    /* Check if there are more entries in a pkzip file */
       13: 5963:    if (pkzip && inptr + 4 < insize && LG(inbuf+inptr) == LOCSIG) {
    #####: 5964:	if (to_stdout) {
    #####: 5965:	    WARN((stderr,
        -: 5966:		  "%s: %s has more than one entry--rest ignored\n",
        -: 5967:		  progname, ifname));
        -: 5968:	} else {
        -: 5969:	    /* Don't destroy the input zip file */
    #####: 5970:	    fprintf(stderr,
        -: 5971:		    "%s: %s has more than one entry -- unchanged\n",
        -: 5972:		    progname, ifname);
    #####: 5973:	    exit_code = ERROR;
    #####: 5974:	    ext_header = pkzip = 0;
    #####: 5975:	    return ERROR;
        -: 5976:	}
        -: 5977:    }
       13: 5978:    ext_header = pkzip = 0; /* for next file */
       13: 5979:    return OK;
        -: 5980:}
        -: 5981:/* util.c -- utility functions for gzip support
        -: 5982: * Copyright (C) 1992-1993 Jean-loup Gailly
        -: 5983: * This is free software; you can redistribute it and/or modify it under the
        -: 5984: * terms of the GNU General Public License, see the file COPYING.
        -: 5985: */
        -: 5986:
        -: 5987:/*
        -: 5988:#ifndef lint
        -: 5989:static char rcsid[] = "$Id: util.c,v 0.14 1993/05/27 10:31:52 jloup Exp $";
        -: 5990:#endif
        -: 5991:*/
        -: 5992:
        -: 5993:#ifdef HAVE_UNISTD_H
        -: 5994:#  include <unistd.h>
        -: 5995:#endif
        -: 5996:#ifndef NO_FCNTL_H
        -: 5997:#  include <fcntl.h>
        -: 5998:#endif
        -: 5999:
        -: 6000:#if defined(STDC_HEADERS) || !defined(NO_STDLIB_H)
        -: 6001:#  include <stdlib.h>
        -: 6002:#else
        -: 6003:   extern int errno;
        -: 6004:#endif
        -: 6005:
        -: 6006:extern ulg crc_32_tab[];   /* crc table, defined below */
        -: 6007:
        -: 6008:/* ===========================================================================
        -: 6009: * Run a set of bytes through the crc shift register.  If s is a NULL
        -: 6010: * pointer, then initialize the crc shift register contents instead.
        -: 6011: * Return the current crc in either case.
        -: 6012: */
      289: 6013:ulg updcrc(s, n)
        -: 6014:    uch *s;                 /* pointer to bytes to pump through */
        -: 6015:    unsigned n;             /* number of bytes in s[] */
        -: 6016:{
        -: 6017:    register ulg c;         /* temporary variable */
        -: 6018:
        -: 6019:    static ulg crc = (ulg)0xffffffffL; /* shift register contents */
        -: 6020:
      289: 6021:    if (s == NULL) {
      119: 6022:	c = 0xffffffffL;
        -: 6023:    } else {
      170: 6024:	c = crc;
      170: 6025:        if (n) do {
  4837117: 6026:            c = crc_32_tab[((int)c ^ (*s++)) & 0xff] ^ (c >> 8);
  4837117: 6027:        } while (--n);
        -: 6028:    }
      289: 6029:    crc = c;
      289: 6030:    return c ^ 0xffffffffL;       /* (instead of ~c for 64-bit machines) */
        -: 6031:}
        -: 6032:
        -: 6033:/* ===========================================================================
        -: 6034: * Clear input and output buffers
        -: 6035: */
      122: 6036:void clear_bufs()
        -: 6037:{
      122: 6038:    outcnt = 0;
      122: 6039:    insize = inptr = 0;
      122: 6040:    bytes_in = bytes_out = 0L;
      122: 6041:}
        -: 6042:
        -: 6043:/* ===========================================================================
        -: 6044: * Fill the input buffer. This is called only when the buffer is empty
        -: 6045: * and at least one byte is really needed.
        -: 6046: */
       18: 6047:int fill_inbuf()
        -: 6048:{
        -: 6049:    int len;
        -: 6050:
        -: 6051:    /* Read as much as possible */
       18: 6052:    insize = 0;
       18: 6053:    errno = 0;
        -: 6054:    do {
       33: 6055:	len = read(ifd, (char*)inbuf+insize, INBUFSIZ-insize);
       33: 6056:        if (len == 0 || len == EOF) break;
       17: 6057:	insize += len;
       17: 6058:    } while (insize < INBUFSIZ);
        -: 6059:
       18: 6060:    if (insize == 0) {
        1: 6061:	read_error();
        -: 6062:    }
       17: 6063:    bytes_in += (ulg)insize;
       17: 6064:    inptr = 1;
       17: 6065:    return inbuf[0];
        -: 6066:}
        -: 6067:
        -: 6068:/* ===========================================================================
        -: 6069: * Write the output buffer outbuf[0..outcnt-1] and update bytes_out.
        -: 6070: * (used for the compressed data only)
        -: 6071: */
      117: 6072:void flush_outbuf()
        -: 6073:{
      117: 6074:    if (outcnt == 0) return;
        -: 6075:
      117: 6076:    write_buf(ofd, (char *)outbuf, outcnt);
      117: 6077:    bytes_out += (ulg)outcnt;
      117: 6078:    outcnt = 0;
        -: 6079:}
        -: 6080:
        -: 6081:/* ===========================================================================
        -: 6082: * Write the output window window[0..outcnt-1] and update crc and bytes_out.
        -: 6083: * (Used for the decompressed data only.)
        -: 6084: */
       29: 6085:void flush_window()
        -: 6086:{
       29: 6087:    if (outcnt == 0) return;
       29: 6088:    updcrc(window, outcnt);
        -: 6089:
       29: 6090:    if (!test) {
       23: 6091:	write_buf(ofd, (char *)window, outcnt);
        -: 6092:    }
       29: 6093:    bytes_out += (ulg)outcnt;
       29: 6094:    outcnt = 0;
        -: 6095:}
        -: 6096:
        -: 6097:/* ===========================================================================
        -: 6098: * Does the same as write(), but also handles partial pipe writes and checks
        -: 6099: * for error return.
        -: 6100: */
      143: 6101:void write_buf(fd, buf, cnt)
        -: 6102:    int       fd;
        -: 6103:    voidp     buf;
        -: 6104:    unsigned  cnt;
        -: 6105:{
        -: 6106:    unsigned  n;
        -: 6107:
      286: 6108:    while ((n = write(fd, buf, cnt)) != cnt) {
    #####: 6109:	if (n == (unsigned)(-1)) {
    #####: 6110:	    write_error();
        -: 6111:	}
    #####: 6112:	cnt -= n;
    #####: 6113:	buf = (voidp)((char*)buf+n);
        -: 6114:    }
      143: 6115:}
        -: 6116:
        -: 6117:/* ========================================================================
        -: 6118: * Put string s in lower case, return s.
        -: 6119: */
       14: 6120:char *strlwr(s)
        -: 6121:    char *s;
        -: 6122:{
        -: 6123:    char *t;
       14: 6124:    for (t = s; *t; t++) *t = tolow(*t);
       14: 6125:    return s;
        -: 6126:}
        -: 6127:
        -: 6128:/* ========================================================================
        -: 6129: * Return the base name of a file (remove any directory prefix and
        -: 6130: * any version suffix). For systems with file names that are not
        -: 6131: * case sensitive, force the base name to lower case.
        -: 6132: */
      211: 6133:char *basename(fname)
        -: 6134:    char *fname;
        -: 6135:{
        -: 6136:    char *p;
        -: 6137:
      211: 6138:    if ((p = strrchr(fname, PATH_SEP))  != NULL) fname = p+1;
        -: 6139:#ifdef PATH_SEP2
        -: 6140:    if ((p = strrchr(fname, PATH_SEP2)) != NULL) fname = p+1;
        -: 6141:#endif
        -: 6142:#ifdef PATH_SEP3
        -: 6143:    if ((p = strrchr(fname, PATH_SEP3)) != NULL) fname = p+1;
        -: 6144:#endif
        -: 6145:#ifdef SUFFIX_SEP
        -: 6146:    if ((p = strrchr(fname, SUFFIX_SEP)) != NULL) *p = '\0';
        -: 6147:#endif
        -: 6148:    if (casemap('A') == 'a') strlwr(fname);
      211: 6149:    return fname;
        -: 6150:}
        -: 6151:
        -: 6152:#if defined(NO_STRING_H) && !defined(STDC_HEADERS)
        -: 6153:
        -: 6154:/* Provide missing strspn and strcspn functions. */
        -: 6155:
        -: 6156:#  ifndef __STDC__
        -: 6157:#    define const
        -: 6158:#  endif
        -: 6159:
        -: 6160:int strspn  OF((const char *s, const char *accept));
        -: 6161:int strcspn OF((const char *s, const char *reject));
        -: 6162:
        -: 6163:/* ========================================================================
        -: 6164: * Return the length of the maximum initial segment
        -: 6165: * of s which contains only characters in accept.
        -: 6166: */
        -: 6167:int strspn(s, accept)
        -: 6168:    const char *s;
        -: 6169:    const char *accept;
        -: 6170:{
        -: 6171:    register const char *p;
        -: 6172:    register const char *a;
        -: 6173:    register int count = 0;
        -: 6174:
        -: 6175:    for (p = s; *p != '\0'; ++p) {
        -: 6176:	for (a = accept; *a != '\0'; ++a) {
        -: 6177:	    if (*p == *a) break;
        -: 6178:	}
        -: 6179:	if (*a == '\0') return count;
        -: 6180:	++count;
        -: 6181:    }
        -: 6182:    return count;
        -: 6183:}
        -: 6184:
        -: 6185:/* ========================================================================
        -: 6186: * Return the length of the maximum inital segment of s
        -: 6187: * which contains no characters from reject.
        -: 6188: */
        -: 6189:int strcspn(s, reject)
        -: 6190:    const char *s;
        -: 6191:    const char *reject;
        -: 6192:{
        -: 6193:    register int count = 0;
        -: 6194:
        -: 6195:    while (*s != '\0') {
        -: 6196:	if (strchr(reject, *s++) != NULL) return count;
        -: 6197:	++count;
        -: 6198:    }
        -: 6199:    return count;
        -: 6200:}
        -: 6201:
        -: 6202:#endif /* NO_STRING_H */
        -: 6203:
        -: 6204:/* ========================================================================
        -: 6205: * Add an environment variable (if any) before argv, and update argc.
        -: 6206: * Return the expanded environment variable to be freed later, or NULL 
        -: 6207: * if no options were added to argv.
        -: 6208: */
        -: 6209:#define SEPARATOR	" \t"	/* separators in env variable */
        -: 6210:
      211: 6211:char *add_envopt(argcp, argvp, env)
        -: 6212:    int *argcp;          /* pointer to argc */
        -: 6213:    char ***argvp;       /* pointer to argv */
        -: 6214:    char *env;           /* name of environment variable */
        -: 6215:{
        -: 6216:    char *p;             /* running pointer through env variable */
        -: 6217:    char **oargv;        /* runs through old argv array */
        -: 6218:    char **nargv;        /* runs through new argv array */
      211: 6219:    int	 oargc = *argcp; /* old argc */
      211: 6220:    int  nargc = 0;      /* number of arguments in env variable */
        -: 6221:
      211: 6222:    env = (char*)getenv(env);
      211: 6223:    if (env == NULL) return NULL;
        -: 6224:
    #####: 6225:    p = (char*)xmalloc(strlen(env)+1);
    #####: 6226:    env = strcpy(p, env);                    /* keep env variable intact */
        -: 6227:
    #####: 6228:    for (p = env; *p; nargc++ ) {            /* move through env */
    #####: 6229:	p += strspn(p, SEPARATOR);	     /* skip leading separators */
    #####: 6230:	if (*p == '\0') break;
        -: 6231:
    #####: 6232:	p += strcspn(p, SEPARATOR);	     /* find end of word */
    #####: 6233:	if (*p) *p++ = '\0';		     /* mark it */
        -: 6234:    }
    #####: 6235:    if (nargc == 0) {
    #####: 6236:	free(env); env = NULL;
    #####: 6237:	return NULL;
        -: 6238:    }
    #####: 6239:    *argcp += nargc;
        -: 6240:    /* Allocate the new argv array, with an extra element just in case
        -: 6241:     * the original arg list did not end with a NULL.
        -: 6242:     */
    #####: 6243:    nargv = (char**)calloc(*argcp+1, sizeof(char *));
    #####: 6244:    if (nargv == NULL) error("out of memory");
    #####: 6245:    oargv  = *argvp;
    #####: 6246:    *argvp = nargv;
        -: 6247:
        -: 6248:    /* Copy the program name first */
    #####: 6249:    if (oargc-- < 0) error("argc<=0");
    #####: 6250:    *(nargv++) = *(oargv++);
        -: 6251:
        -: 6252:    /* Then copy the environment args */
    #####: 6253:    for (p = env; nargc > 0; nargc--) {
    #####: 6254:	p += strspn(p, SEPARATOR);	     /* skip separators */
    #####: 6255:	*(nargv++) = p;			     /* store start */
    #####: 6256:	while (*p++) ;			     /* skip over word */
        -: 6257:    }
        -: 6258:
        -: 6259:    /* Finally copy the old args and add a NULL (usual convention) */
    #####: 6260:    while (oargc--) *(nargv++) = *(oargv++);
    #####: 6261:    *nargv = NULL;
    #####: 6262:    return env;
        -: 6263:}
        -: 6264:
        -: 6265:/* ========================================================================
        -: 6266: * Error handlers.
        -: 6267: */
    #####: 6268:void error(m)
        -: 6269:    char *m;
        -: 6270:{
    #####: 6271:    fprintf(stderr, "\n%s: %s: %s\n", progname, ifname, m);
    #####: 6272:    abort_gzip();
    #####: 6273:}
        -: 6274:
    #####: 6275:void warn(a, b)
        -: 6276:    char *a, *b;            /* message strings juxtaposed in output */
        -: 6277:{
    #####: 6278:    WARN((stderr, "%s: %s: warning: %s%s\n", progname, ifname, a, b));
    #####: 6279:}
        -: 6280:
        1: 6281:void read_error()
        -: 6282:{
        1: 6283:    fprintf(stderr, "\n%s: ", progname);
        1: 6284:    if (errno != 0) {
    #####: 6285:	perror(ifname);
        -: 6286:    } else {
        1: 6287:	fprintf(stderr, "%s: unexpected end of file\n", ifname);
        -: 6288:    }
        1: 6289:    abort_gzip();
    #####: 6290:}
        -: 6291:
    #####: 6292:void write_error()
        -: 6293:{
    #####: 6294:    fprintf(stderr, "\n%s: ", progname);
    #####: 6295:    perror(ofname);
    #####: 6296:    abort_gzip();
    #####: 6297:}
        -: 6298:
        -: 6299:/* ========================================================================
        -: 6300: * Display compression ratio on stderr.
        -: 6301: */
       42: 6302:void display_ratio(num, den)
        -: 6303:    long num;
        -: 6304:    long den;
        -: 6305:{
        -: 6306:    long ratio;  /* 1000 times the compression ratio */
        -: 6307:
       42: 6308:    if (den == 0) {
    #####: 6309:	ratio = 0; /* no compression */
       42: 6310:    } else if (den < 2147483L) { /* (2**31 -1)/1000 */
       42: 6311:	ratio = 1000L*num/den;
        -: 6312:    } else {
    #####: 6313:	ratio = num/(den/1000L);
        -: 6314:    }
       42: 6315:    if (ratio < 0) {
    #####: 6316:	putc('-', stderr);
    #####: 6317:	ratio = -ratio;
        -: 6318:    }
       42: 6319:    fprintf(stderr, "%2ld.%ld%%", ratio / 10L, ratio % 10L);
       42: 6320:}
        -: 6321:
        -: 6322:
        -: 6323:/* ========================================================================
        -: 6324: * Semi-safe malloc -- never returns NULL.
        -: 6325: */
    #####: 6326:voidp xmalloc (size)
        -: 6327:    unsigned size;
        -: 6328:{
    #####: 6329:    voidp cp = (voidp)malloc (size);
        -: 6330:
    #####: 6331:    if (cp == NULL) error("out of memory");
    #####: 6332:    return cp;
        -: 6333:}
        -: 6334:
        -: 6335:/* ========================================================================
        -: 6336: * Table of CRC-32's of all single-byte values (made by makecrc.c)
        -: 6337: */
        -: 6338:ulg crc_32_tab[] = {
        -: 6339:  0x00000000L, 0x77073096L, 0xee0e612cL, 0x990951baL, 0x076dc419L,
        -: 6340:  0x706af48fL, 0xe963a535L, 0x9e6495a3L, 0x0edb8832L, 0x79dcb8a4L,
        -: 6341:  0xe0d5e91eL, 0x97d2d988L, 0x09b64c2bL, 0x7eb17cbdL, 0xe7b82d07L,
        -: 6342:  0x90bf1d91L, 0x1db71064L, 0x6ab020f2L, 0xf3b97148L, 0x84be41deL,
        -: 6343:  0x1adad47dL, 0x6ddde4ebL, 0xf4d4b551L, 0x83d385c7L, 0x136c9856L,
        -: 6344:  0x646ba8c0L, 0xfd62f97aL, 0x8a65c9ecL, 0x14015c4fL, 0x63066cd9L,
        -: 6345:  0xfa0f3d63L, 0x8d080df5L, 0x3b6e20c8L, 0x4c69105eL, 0xd56041e4L,
        -: 6346:  0xa2677172L, 0x3c03e4d1L, 0x4b04d447L, 0xd20d85fdL, 0xa50ab56bL,
        -: 6347:  0x35b5a8faL, 0x42b2986cL, 0xdbbbc9d6L, 0xacbcf940L, 0x32d86ce3L,
        -: 6348:  0x45df5c75L, 0xdcd60dcfL, 0xabd13d59L, 0x26d930acL, 0x51de003aL,
        -: 6349:  0xc8d75180L, 0xbfd06116L, 0x21b4f4b5L, 0x56b3c423L, 0xcfba9599L,
        -: 6350:  0xb8bda50fL, 0x2802b89eL, 0x5f058808L, 0xc60cd9b2L, 0xb10be924L,
        -: 6351:  0x2f6f7c87L, 0x58684c11L, 0xc1611dabL, 0xb6662d3dL, 0x76dc4190L,
        -: 6352:  0x01db7106L, 0x98d220bcL, 0xefd5102aL, 0x71b18589L, 0x06b6b51fL,
        -: 6353:  0x9fbfe4a5L, 0xe8b8d433L, 0x7807c9a2L, 0x0f00f934L, 0x9609a88eL,
        -: 6354:  0xe10e9818L, 0x7f6a0dbbL, 0x086d3d2dL, 0x91646c97L, 0xe6635c01L,
        -: 6355:  0x6b6b51f4L, 0x1c6c6162L, 0x856530d8L, 0xf262004eL, 0x6c0695edL,
        -: 6356:  0x1b01a57bL, 0x8208f4c1L, 0xf50fc457L, 0x65b0d9c6L, 0x12b7e950L,
        -: 6357:  0x8bbeb8eaL, 0xfcb9887cL, 0x62dd1ddfL, 0x15da2d49L, 0x8cd37cf3L,
        -: 6358:  0xfbd44c65L, 0x4db26158L, 0x3ab551ceL, 0xa3bc0074L, 0xd4bb30e2L,
        -: 6359:  0x4adfa541L, 0x3dd895d7L, 0xa4d1c46dL, 0xd3d6f4fbL, 0x4369e96aL,
        -: 6360:  0x346ed9fcL, 0xad678846L, 0xda60b8d0L, 0x44042d73L, 0x33031de5L,
        -: 6361:  0xaa0a4c5fL, 0xdd0d7cc9L, 0x5005713cL, 0x270241aaL, 0xbe0b1010L,
        -: 6362:  0xc90c2086L, 0x5768b525L, 0x206f85b3L, 0xb966d409L, 0xce61e49fL,
        -: 6363:  0x5edef90eL, 0x29d9c998L, 0xb0d09822L, 0xc7d7a8b4L, 0x59b33d17L,
        -: 6364:  0x2eb40d81L, 0xb7bd5c3bL, 0xc0ba6cadL, 0xedb88320L, 0x9abfb3b6L,
        -: 6365:  0x03b6e20cL, 0x74b1d29aL, 0xead54739L, 0x9dd277afL, 0x04db2615L,
        -: 6366:  0x73dc1683L, 0xe3630b12L, 0x94643b84L, 0x0d6d6a3eL, 0x7a6a5aa8L,
        -: 6367:  0xe40ecf0bL, 0x9309ff9dL, 0x0a00ae27L, 0x7d079eb1L, 0xf00f9344L,
        -: 6368:  0x8708a3d2L, 0x1e01f268L, 0x6906c2feL, 0xf762575dL, 0x806567cbL,
        -: 6369:  0x196c3671L, 0x6e6b06e7L, 0xfed41b76L, 0x89d32be0L, 0x10da7a5aL,
        -: 6370:  0x67dd4accL, 0xf9b9df6fL, 0x8ebeeff9L, 0x17b7be43L, 0x60b08ed5L,
        -: 6371:  0xd6d6a3e8L, 0xa1d1937eL, 0x38d8c2c4L, 0x4fdff252L, 0xd1bb67f1L,
        -: 6372:  0xa6bc5767L, 0x3fb506ddL, 0x48b2364bL, 0xd80d2bdaL, 0xaf0a1b4cL,
        -: 6373:  0x36034af6L, 0x41047a60L, 0xdf60efc3L, 0xa867df55L, 0x316e8eefL,
        -: 6374:  0x4669be79L, 0xcb61b38cL, 0xbc66831aL, 0x256fd2a0L, 0x5268e236L,
        -: 6375:  0xcc0c7795L, 0xbb0b4703L, 0x220216b9L, 0x5505262fL, 0xc5ba3bbeL,
        -: 6376:  0xb2bd0b28L, 0x2bb45a92L, 0x5cb36a04L, 0xc2d7ffa7L, 0xb5d0cf31L,
        -: 6377:  0x2cd99e8bL, 0x5bdeae1dL, 0x9b64c2b0L, 0xec63f226L, 0x756aa39cL,
        -: 6378:  0x026d930aL, 0x9c0906a9L, 0xeb0e363fL, 0x72076785L, 0x05005713L,
        -: 6379:  0x95bf4a82L, 0xe2b87a14L, 0x7bb12baeL, 0x0cb61b38L, 0x92d28e9bL,
        -: 6380:  0xe5d5be0dL, 0x7cdcefb7L, 0x0bdbdf21L, 0x86d3d2d4L, 0xf1d4e242L,
        -: 6381:  0x68ddb3f8L, 0x1fda836eL, 0x81be16cdL, 0xf6b9265bL, 0x6fb077e1L,
        -: 6382:  0x18b74777L, 0x88085ae6L, 0xff0f6a70L, 0x66063bcaL, 0x11010b5cL,
        -: 6383:  0x8f659effL, 0xf862ae69L, 0x616bffd3L, 0x166ccf45L, 0xa00ae278L,
        -: 6384:  0xd70dd2eeL, 0x4e048354L, 0x3903b3c2L, 0xa7672661L, 0xd06016f7L,
        -: 6385:  0x4969474dL, 0x3e6e77dbL, 0xaed16a4aL, 0xd9d65adcL, 0x40df0b66L,
        -: 6386:  0x37d83bf0L, 0xa9bcae53L, 0xdebb9ec5L, 0x47b2cf7fL, 0x30b5ffe9L,
        -: 6387:  0xbdbdf21cL, 0xcabac28aL, 0x53b39330L, 0x24b4a3a6L, 0xbad03605L,
        -: 6388:  0xcdd70693L, 0x54de5729L, 0x23d967bfL, 0xb3667a2eL, 0xc4614ab8L,
        -: 6389:  0x5d681b02L, 0x2a6f2b94L, 0xb40bbe37L, 0xc30c8ea1L, 0x5a05df1bL,
        -: 6390:  0x2d02ef8dL
        -: 6391:};
        -: 6392:/* zip.c -- compress files to the gzip or pkzip format
        -: 6393: * Copyright (C) 1992-1993 Jean-loup Gailly
        -: 6394: * This is free software; you can redistribute it and/or modify it under the
        -: 6395: * terms of the GNU General Public License, see the file COPYING.
        -: 6396: */
        -: 6397:
        -: 6398:/*
        -: 6399:#ifndef lint
        -: 6400:static char rcsid[] = "$Id: zip.c,v 0.16 1993/05/28 14:51:17 jloup Exp $";
        -: 6401:#endif
        -: 6402:*/
        -: 6403:
        -: 6404:#ifdef HAVE_UNISTD_H
        -: 6405:#  include <unistd.h>
        -: 6406:#endif
        -: 6407:#ifndef NO_FCNTL_H
        -: 6408:#  include <fcntl.h>
        -: 6409:#endif
        -: 6410:
        -: 6411:local ulg crc;       /* crc on uncompressed file data */
        -: 6412:long header_bytes;   /* number of bytes in gzip header */
        -: 6413:
        -: 6414:/* ===========================================================================
        -: 6415: * Deflate in to out.
        -: 6416: * IN assertions: the input and output buffers are cleared.
        -: 6417: *   The variables time_stamp and save_orig_name are initialized.
        -: 6418: */
      106: 6419:int zip(in, out)
        -: 6420:    int in, out;            /* input and output file descriptors */
        -: 6421:{
      106: 6422:    uch  flags = 0;         /* general purpose bit flags */
      106: 6423:    ush  attr = 0;          /* ascii/binary flag */
      106: 6424:    ush  deflate_flags = 0; /* pkzip -es, -en or -ex equivalent */
        -: 6425:
      106: 6426:    ifd = in;
      106: 6427:    ofd = out;
      106: 6428:    outcnt = 0;
        -: 6429:
        -: 6430:    /* Write the header to the gzip file. See algorithm.doc for the format */
        -: 6431:
      106: 6432:    method = DEFLATED;
      106: 6433:    put_byte(GZIP_MAGIC[0]); /* magic header */
      106: 6434:    put_byte(GZIP_MAGIC[1]);
      106: 6435:    put_byte(DEFLATED);      /* compression method */
        -: 6436:
      106: 6437:    if (save_orig_name) {
    #####: 6438:	flags |= ORIG_NAME;
        -: 6439:    }
      106: 6440:    put_byte(flags);         /* general flags */
      106: 6441:    put_long(time_stamp);
        -: 6442:
        -: 6443:    /* Write deflated file to zip file */
      106: 6444:    crc = updcrc(0, 0);
        -: 6445:
      106: 6446:    bi_init(out);
      106: 6447:    ct_init(&attr, &method);
      106: 6448:    lm_init(level, &deflate_flags);
        -: 6449:
      106: 6450:    put_byte((uch)deflate_flags); /* extra flags */
      106: 6451:    put_byte(OS_CODE);            /* OS identifier */
        -: 6452:
      106: 6453:    if (save_orig_name) {
    #####: 6454:	char *p = basename(ifname); /* Don't save the directory part. */
        -: 6455:	do {
    #####: 6456:	    put_char(*p);
    #####: 6457:	} while (*p++);
        -: 6458:    }
      106: 6459:    header_bytes = (long)outcnt;
        -: 6460:
      106: 6461:    (void)deflate();
        -: 6462:
        -: 6463:#if !defined(NO_SIZE_CHECK) && !defined(RECORD_IO)
        -: 6464:  /* Check input size (but not in VMS -- variable record lengths mess it up)
        -: 6465:   * and not on MSDOS -- diet in TSR mode reports an incorrect file size)
        -: 6466:   */
        -: 6467:    if (ifile_size != -1L && isize != (ulg)ifile_size) {
        -: 6468:	Trace((stderr, " actual=%ld, read=%ld ", ifile_size, isize));
        -: 6469:	fprintf(stderr, "%s: %s: file size changed while zipping\n",
        -: 6470:		progname, ifname);
        -: 6471:    }
        -: 6472:#endif
        -: 6473:
        -: 6474:    /* Write the crc and uncompressed size */
      106: 6475:    put_long(crc);
      106: 6476:    put_long(isize);
      106: 6477:    header_bytes += 2*sizeof(long);
        -: 6478:
      106: 6479:    flush_outbuf();
      106: 6480:    return OK;
        -: 6481:}
        -: 6482:
        -: 6483:
        -: 6484:/* ===========================================================================
        -: 6485: * Read a new buffer from the current input file, perform end-of-line
        -: 6486: * translation, and update the crc and input file size.
        -: 6487: * IN assertion: size >= 2 (for end-of-line translation)
        -: 6488: */
      234: 6489:int file_read(buf, size)
        -: 6490:    char *buf;
        -: 6491:    unsigned size;
        -: 6492:{
        -: 6493:    unsigned len;
        -: 6494:
        -: 6495:    Assert(insize == 0, "inbuf not empty");
        -: 6496:
      234: 6497:    len = read(ifd, buf, size);
      234: 6498:    if (len == (unsigned)(-1) || len == 0) return (int)len;
        -: 6499:
      128: 6500:    crc = updcrc((uch*)buf, len);
      128: 6501:    isize += (ulg)len;
      128: 6502:    return (int)len;
        -: 6503:}
